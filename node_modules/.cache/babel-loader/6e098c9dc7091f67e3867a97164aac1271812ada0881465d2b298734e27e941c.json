{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TChart from '@/views/components/TChart';\nimport { hasEventListener } from \"@/utils/utils\";\nimport { formatDate, formatTime } from '@/utils/formatTime';\nimport { AGPUtils } from \"@/utils/algorithm/AGP\";\nimport { GlucoseUtils } from \"@/utils/algorithm/Glucose\";\nimport { mapGetters } from \"vuex\";\nexport default {\n  data() {\n    return {\n      initOptions: {\n        renderer: 'svg'\n      },\n      option: {\n        grid: [{\n          height: 300,\n          left: 140,\n          right: 120,\n          top: 30\n        }],\n        xAxis: [{\n          type: 'category',\n          gridIndex: 0,\n          boundaryGap: false,\n          axisTick: false,\n          splitLine: {\n            show: false,\n            lineStyle: {\n              color: 'var(--color-black-60)'\n            },\n            interval: 59\n          },\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: 'var(--color-black-60)',\n              width: 1\n            }\n          },\n          data: [],\n          axisLabel: {\n            formatter: function (value, index) {\n              if (index % 360 === 0) {\n                return value;\n              }\n            },\n            interval: 0,\n            color: 'var(--color-black-60)',\n            fontSize: 20,\n            margin: 14\n          }\n        }],\n        yAxis: [{\n          type: 'value',\n          gridIndex: 0,\n          min: 0,\n          max: 15,\n          splitLine: {\n            lineStyle: {\n              color: 'var(--color-black-60)'\n            }\n          },\n          axisLabel: {\n            formatter: '{value}',\n            color: 'var(--color-black-60)',\n            fontSize: 20,\n            margin: 14\n          }\n        }],\n        series: [{\n          name: 'L',\n          type: 'line',\n          data: [],\n          lineStyle: {\n            opacity: 0\n          },\n          stack: 'confidence-band',\n          symbol: 'none',\n          animation: false\n        },\n        // 置信区间5-25\n        {\n          name: 'U',\n          type: 'line',\n          data: [],\n          lineStyle: {\n            opacity: 0\n          },\n          areaStyle: {\n            color: '#D6F1F2'\n          },\n          stack: 'confidence-band',\n          symbol: 'none',\n          animation: false\n        },\n        //置信区间25-75\n        {\n          name: 'U',\n          type: 'line',\n          data: [],\n          lineStyle: {\n            opacity: 0\n          },\n          areaStyle: {\n            color: '#94DBDE'\n          },\n          stack: 'confidence-band',\n          symbol: 'none',\n          animation: false\n        },\n        //75-95\n        {\n          name: 'U',\n          type: 'line',\n          data: [],\n          lineStyle: {\n            opacity: 0\n          },\n          areaStyle: {\n            color: '#D6F1F2'\n          },\n          stack: 'confidence-band',\n          symbol: 'none',\n          animation: false\n        },\n        //中位线\n        {\n          type: 'line',\n          data: [],\n          itemStyle: {\n            color: 'var(--color-primary)'\n          },\n          showSymbol: false,\n          lineStyle: {\n            width: 2\n          },\n          animation: false,\n          markLine: {\n            silent: true,\n            // 不高亮辅助线\n            symbol: 'none',\n            animation: false,\n            data: [{\n              type: 'min',\n              yAxis: 70,\n              lineStyle: {\n                color: 'var(--color-error)',\n                width: 2,\n                type: 'solid'\n              },\n              label: {\n                color: 'var(--color-error)',\n                fontSize: 20,\n                distance: 14,\n                position: 'start'\n              }\n            }, {\n              type: 'max',\n              yAxis: 180,\n              lineStyle: {\n                color: 'var(--color-warning)',\n                width: 2,\n                type: 'solid'\n              },\n              label: {\n                color: 'var(--color-warning)',\n                fontSize: 20,\n                distance: 14,\n                position: 'start'\n              }\n            }]\n          }\n        }]\n      },\n      empty: true,\n      target: [3.9, 13.9]\n    };\n  },\n  components: {\n    TChart\n  },\n  computed: {\n    ...mapGetters(['unit'])\n  },\n  created() {},\n  mounted() {\n    this.$bus.$on('getDatas', data => {\n      if (data[1].length >= 5 * 1440) {\n        this.handelIng(data);\n        this.empty = false;\n      } else {\n        this.empty = true;\n      }\n    });\n    this.$bus.$on('getVuexTag', data => {\n      let result = this.$store.state.report.agp[data];\n      if (result) {\n        this.empty = false;\n        this.renderIng(result);\n      } else {\n        this.empty = true;\n      }\n    });\n  },\n  methods: {\n    /**\n     * 1.将原始数组分割为时刻数组，判断时间戳转换的HH:MM\n     * 2.创建5条曲线所需要的1440长度时刻数组，数组下标对应数据时刻，例如：00：00=>0  00：01=>1  12：00=>12*60\n     * 3.将时刻数组对应的下标塞到5个agp数组中\n     * 4.分时段平均值，创建24长度的时段数组，1440个时刻，i%60为一个新时刻，否则向原来的数组中push,画图时求每个时段对应的平均值\n     * \n     */\n    handelIng(data) {\n      data = _.cloneDeep(data);\n      let array = data[1];\n      // 将数组分割为时刻数组\n      let momentMap = new Map();\n      array.forEach(item => {\n        item.moment = formatDate(item.DataTs * 1000, 'HH:MM');\n        momentMap.has(item.moment) ? momentMap.get(item.moment).push(item.Value) : momentMap.set(item.moment, [item.Value]);\n      });\n      // 计算出AGP数据并补全图谱数据\n      let agpMap = new Map();\n      let agp05 = new Array(24 * 60);\n      let agp25 = new Array(24 * 60);\n      let agp50 = new Array(24 * 60);\n      let agp75 = new Array(24 * 60);\n      let agp95 = new Array(24 * 60);\n      let xData = new Array(24 * 60);\n      for (let i = 0; i < 24 * 60; i++) {\n        // index换算为时刻\n        let h = Math.floor(i / 60) < 10 ? '0' + Math.floor(i / 60) : Math.floor(i / 60);\n        let m = i % 60 < 10 ? '0' + i % 60 : i % 60;\n        let moment = h + ':' + m;\n        if (momentMap.has(moment)) {\n          agp05[i] = AGPUtils.calculateYValue(momentMap.get(moment)) ? AGPUtils.calculateYValue(momentMap.get(moment)).p05 : AGPUtils.calculateYValue(momentMap.get(moment));\n          agp25[i] = AGPUtils.calculateYValue(momentMap.get(moment)) ? AGPUtils.calculateYValue(momentMap.get(moment)).p25 : AGPUtils.calculateYValue(momentMap.get(moment));\n          agp50[i] = AGPUtils.calculateYValue(momentMap.get(moment)) ? AGPUtils.calculateYValue(momentMap.get(moment)).p50 : AGPUtils.calculateYValue(momentMap.get(moment));\n          agp75[i] = AGPUtils.calculateYValue(momentMap.get(moment)) ? AGPUtils.calculateYValue(momentMap.get(moment)).p75 : AGPUtils.calculateYValue(momentMap.get(moment));\n          agp95[i] = AGPUtils.calculateYValue(momentMap.get(moment)) ? AGPUtils.calculateYValue(momentMap.get(moment)).p95 : AGPUtils.calculateYValue(momentMap.get(moment));\n        }\n        xData[i] = moment;\n      }\n      xData.push('00:00');\n      let params = {\n        xData: xData,\n        agp05: agp05,\n        agp25: agp25,\n        agp50: agp50,\n        agp75: agp75,\n        agp95: agp95\n      };\n      console.log(formatTime(new Date()), 'AGP计算完成');\n      this.renderIng(params);\n      this.$store.dispatch('setAgp', {\n        key: data[0],\n        value: params\n      }); //处理完数据存vuex\n    },\n    // 渲染数据\n    renderIng(data) {\n      let value = _.cloneDeep(data);\n      this.option.xAxis[0].data = value.xData;\n      let unit = this.unit;\n      let max = Math.ceil(GlucoseUtils.mgdlToMmol(_.maxBy(value.agp95)) / 3) * 3 < 15 ? 15 : Math.ceil(GlucoseUtils.mgdlToMmol(_.maxBy(value.agp95)) / 3) * 3;\n      console.log(max);\n      if (unit != 'mg/dL') {\n        max = max;\n        value.agp05 = value.agp05.map(val => GlucoseUtils.mgdlToMmol(val));\n        value.agp25 = value.agp25.map(val => GlucoseUtils.mgdlToMmol(val));\n        value.agp75 = value.agp75.map(val => GlucoseUtils.mgdlToMmol(val));\n        value.agp95 = value.agp95.map(val => GlucoseUtils.mgdlToMmol(val));\n        value.agp50 = value.agp50.map(val => GlucoseUtils.mgdlToMmol(val));\n        this.option.series[4].markLine.data[0].yAxis = 3.9;\n        this.option.series[4].markLine.data[1].yAxis = 10;\n      } else {\n        max = GlucoseUtils.mmolToMgdl(max);\n      }\n      this.option.yAxis[0].max = GlucoseUtils.mmolToMgdl(max);\n      this.option.yAxis[0].interval = GlucoseUtils.mmolToMgdl(max) / 5;\n      this.option.series[0].data = value.agp05;\n      this.option.series[1].data = value.agp25.map((item, index) => {\n        return item - value.agp05[index];\n      });\n      this.option.series[2].data = value.agp75.map((item, index) => {\n        return item - value.agp25[index];\n      });\n      this.option.series[3].data = value.agp95.map((item, index) => {\n        return item - value.agp75[index];\n      });\n      this.option.series[4].data = value.agp50;\n      this.$nextTick(() => {\n        console.log(formatTime(new Date()), 'AGP渲染完成');\n      });\n    }\n  },\n  beforeDestroy() {\n    this.$bus.$off('getDatas');\n    this.$bus.$off('getVuexTag');\n  }\n};","map":{"version":3,"names":["TChart","hasEventListener","formatDate","formatTime","AGPUtils","GlucoseUtils","mapGetters","data","initOptions","renderer","option","grid","height","left","right","top","xAxis","type","gridIndex","boundaryGap","axisTick","splitLine","show","lineStyle","color","interval","axisLine","width","axisLabel","formatter","value","index","fontSize","margin","yAxis","min","max","series","name","opacity","stack","symbol","animation","areaStyle","itemStyle","showSymbol","markLine","silent","label","distance","position","empty","target","components","computed","created","mounted","$bus","$on","length","handelIng","result","$store","state","report","agp","renderIng","methods","_","cloneDeep","array","momentMap","Map","forEach","item","moment","DataTs","has","get","push","Value","set","agpMap","agp05","Array","agp25","agp50","agp75","agp95","xData","i","h","Math","floor","m","calculateYValue","p05","p25","p50","p75","p95","params","console","log","Date","dispatch","key","unit","ceil","mgdlToMmol","maxBy","map","val","mmolToMgdl","$nextTick","beforeDestroy","$off"],"sources":["src/views/components/Chart/AGPchart.vue"],"sourcesContent":["<template>\n    <div>\n         <div class='agp-chart-empty' v-if='empty'>\n            <img src=\"~@/assets/image/empty-icon.png\" alt=\"\" class='empty-icon' >\n            <div class='agp-chartempty-tips' >至少需要五天数据才可显示AGP图谱</div>\n        </div>\n        <div v-else>\n            <div class='agp-legend' >\n                <div class='agp-legend-item' >\n                    <div class='apg-legend-shape1'>—</div>\n                    <div class='agp-legend-info' >50%中位线</div>\n                </div>\n                <div class='agp-legend-item' >\n                    <div class='apg-legend-shape2'></div>\n                    <div class='agp-legend-info' >25%-75%区间</div>\n                </div>\n                <div class='agp-legend-item' >\n                    <div class='apg-legend-shape3'></div>\n                    <div class='agp-legend-info' >5%-95%区间</div>\n                </div>\n                <div class='agp-legend-item' >\n                    <div class='apg-legend-shape4-box'>\n                        <p class='apg-legend-shape4'></p>\n                        <p class='apg-legend-shape4'></p>\n                    </div>\n                    <div class='agp-legend-info' >目标范围</div>\n                </div>\n            </div>\n            <t-chart\n                    style=\"width: 100%;height:370px;\"\n                    :option=\"option\"\n                    :init-options=\"initOptions\"\n                    theme=\"tduck-echarts-theme\"\n            />\n        </div>\n       \n    </div>\n</template>\n<script>\n    import TChart from '@/views/components/TChart'\n    import { hasEventListener } from \"@/utils/utils\";\n    import {formatDate,formatTime} from '@/utils/formatTime'\n    import { AGPUtils } from \"@/utils/algorithm/AGP\";\n    import { GlucoseUtils } from \"@/utils/algorithm/Glucose\";\n    import {mapGetters} from \"vuex\"\n    export default {\n        data(){\n            return{\n                initOptions: {\n                    renderer: 'svg'\n                },\n                option: {\n                    grid:[\n                        {\n                            height:300,\n                            left:140,\n                            right:120,\n                            top:30\n                        }\n                    ],\n                    xAxis: [\n                        {\n                            type: 'category',\n                            gridIndex:0,\n                            boundaryGap:false,\n                            axisTick: false,\n                            splitLine:{\n                                show:false,\n                                lineStyle:{\n                                    color:'var(--color-black-60)'\n                                },\n                                interval:59\n                            },\n                            axisLine: {\n                                show: true,\n                                lineStyle: {\n                                    color: 'var(--color-black-60)',\n                                    width:1,\n                                },\n                            },\n                            data:[],\n                            axisLabel: {\n                                formatter: function (value, index) {\n                                    if (index  % 360 === 0) {\n                                        return value;\n                                    }\n                                },\n                                interval:0,\n                                color: 'var(--color-black-60)',\n                                fontSize: 20, \n                                margin:14\n                            }\n                        }\n                    ],\n                    yAxis: [\n                        {\n                            type: 'value',\n                            gridIndex:0,\n                            min: 0,\n                            max: 15,\n                            splitLine:{\n                                lineStyle:{\n                                   color:'var(--color-black-60)'\n                                }\n                            },\n                            axisLabel: {\n                                formatter: '{value}',\n                                color: 'var(--color-black-60)',\n                                fontSize: 20,\n                                margin:14\n                            }\n                        }\n                    ],\n                    series: [\n                        {\n                            name: 'L',\n                            type: 'line',\n\n                            data: [],\n                            lineStyle: {\n                            opacity: 0,\n                            },\n                            stack: 'confidence-band',\n                            symbol: 'none',\n                            animation:false\n                        },\n                        // 置信区间5-25\n                        {\n                            name: 'U',\n                            type: 'line',\n                            data: [],\n                            lineStyle: {\n                            opacity: 0,\n                            },\n                            areaStyle: {\n                            color: '#D6F1F2',\n                            },\n                            stack: 'confidence-band',\n                            symbol: 'none',\n                            animation:false\n                        },\n                        //置信区间25-75\n                        {\n                            name: 'U',\n                            type: 'line',\n                            data: [],\n                            lineStyle: {\n                            opacity: 0,\n                            },\n                            areaStyle: {\n                            color: '#94DBDE',\n                            },\n                            stack: 'confidence-band',\n                            symbol: 'none',\n                            animation:false\n                        },\n                        //75-95\n                        {\n                            name: 'U',\n                            type: 'line',\n                            data:[],\n                            lineStyle: {\n                            opacity: 0,\n                            },\n                            areaStyle: {\n                            color: '#D6F1F2',\n                            },\n                            stack: 'confidence-band',\n                            symbol: 'none',\n                            animation:false\n                        },\n                        //中位线\n                        {\n                            type: 'line',\n                            data: [],\n                            itemStyle: {\n                            color:'var(--color-primary)',\n                            },\n                            showSymbol: false,\n                            lineStyle: {\n                            width: 2,\n                            },\n                            animation:false,\n                            markLine: {\n                            silent: true, // 不高亮辅助线\n                            symbol: 'none',\n                            animation:false,\n                            data: [\n                                {\n                                type: 'min',\n                                yAxis:70,\n                                lineStyle: {\n                                    color: 'var(--color-error)',\n                                    width: 2,\n                                    type:'solid'\n                                },\n                                label: {\n                                    color: 'var(--color-error)',\n                                    fontSize: 20,\n                                    distance: 14,\n                                    position:'start'\n                                },\n                                },\n                                {\n                                type: 'max',\n                                yAxis:180,\n                                lineStyle: {\n                                    color: 'var(--color-warning)',\n                                    width: 2,\n                                    type:'solid'\n                                },\n                                label: {\n                                    color: 'var(--color-warning)',\n                                    fontSize: 20,\n                                    distance:14,\n                                    position:'start'\n                                },\n                                },\n                            ],\n                            },\n                        }\n                    ],\n\n                \n                },\n                empty:true,\n                target:[3.9,13.9],\n            }\n        },\n        components: {\n            TChart\n        },\n        computed:{\n            ...mapGetters([\n                'unit']),\n        },\n        created(){\n            \n        },\n        mounted(){\n            this.$bus.$on('getDatas',(data)=>{\n                if(data[1].length>=5*1440){\n                    this.handelIng(data)  \n                     this.empty = false\n                }else{\n                    this.empty = true\n                }\n            })\n            this.$bus.$on('getVuexTag',(data)=>{\n                let result  = this.$store.state.report.agp[data]\n                if(result) {\n                    this.empty = false\n                    this.renderIng(result)\n                }else{\n                    this.empty = true\n                }\n                \n            })\n        },\n        methods:{\n            /**\n             * 1.将原始数组分割为时刻数组，判断时间戳转换的HH:MM\n             * 2.创建5条曲线所需要的1440长度时刻数组，数组下标对应数据时刻，例如：00：00=>0  00：01=>1  12：00=>12*60\n             * 3.将时刻数组对应的下标塞到5个agp数组中\n             * 4.分时段平均值，创建24长度的时段数组，1440个时刻，i%60为一个新时刻，否则向原来的数组中push,画图时求每个时段对应的平均值\n             * \n             */\n            handelIng(data){\n                data =  _.cloneDeep(data)\n                let array = data[1]\n                // 将数组分割为时刻数组\n                let momentMap = new Map();\n                array.forEach(item=>{\n                    item.moment = formatDate(item.DataTs*1000,'HH:MM')\n                    momentMap.has(item.moment) ? momentMap.get(item.moment).push(item.Value) : momentMap.set(item.moment, [item.Value]);\n                })\n                // 计算出AGP数据并补全图谱数据\n                let agpMap = new Map();\n                let agp05 = new Array(24 * 60);\n                let agp25 = new Array(24 * 60);\n                let agp50 = new Array(24 * 60);\n                let agp75 = new Array(24 * 60);\n                let agp95 = new Array(24 * 60);\n                let xData = new Array(24 * 60);\n                for (let i = 0; i < 24 * 60; i++) {\n                    // index换算为时刻\n                    let h =  Math.floor(i/60)<10 ? '0'+ Math.floor(i/60) : Math.floor(i/60) \n                    let m =  i%60 < 10 ? '0' + i%60 : i%60\n                    let moment = h+':'+m\n                    if(momentMap.has(moment)){\n                        agp05[i] = AGPUtils.calculateYValue(momentMap.get(moment))?AGPUtils.calculateYValue(momentMap.get(moment)).p05:AGPUtils.calculateYValue(momentMap.get(moment))\n                        agp25[i] = AGPUtils.calculateYValue(momentMap.get(moment))?AGPUtils.calculateYValue(momentMap.get(moment)).p25:AGPUtils.calculateYValue(momentMap.get(moment))  \n                        agp50[i] = AGPUtils.calculateYValue(momentMap.get(moment))?AGPUtils.calculateYValue(momentMap.get(moment)).p50:AGPUtils.calculateYValue(momentMap.get(moment))\n                        agp75[i] = AGPUtils.calculateYValue(momentMap.get(moment))?AGPUtils.calculateYValue(momentMap.get(moment)).p75:AGPUtils.calculateYValue(momentMap.get(moment)) \n                        agp95[i] = AGPUtils.calculateYValue(momentMap.get(moment))?AGPUtils.calculateYValue(momentMap.get(moment)).p95:AGPUtils.calculateYValue(momentMap.get(moment))\n                    }\n                     xData[i] = moment\n                }\n               \n                xData.push('00:00')\n                let params = {\n                    xData:xData,\n                    agp05:agp05,\n                    agp25:agp25,\n                    agp50:agp50,\n                    agp75:agp75,\n                    agp95:agp95\n                }\n                console.log(formatTime(new Date()),'AGP计算完成')\n                this.renderIng(params)\n                this.$store.dispatch('setAgp',{key:data[0],value:params}) //处理完数据存vuex\n               \n                \n            },\n            // 渲染数据\n            renderIng(data){\n                let value = _.cloneDeep(data)\n                this.option.xAxis[0].data = value.xData\n                let unit = this.unit\n               let max =  Math.ceil(GlucoseUtils.mgdlToMmol(_.maxBy(value.agp95)) / 3) * 3<15?15:Math.ceil(GlucoseUtils.mgdlToMmol(_.maxBy(value.agp95)) / 3) * 3\n               console.log(max)\n                if(unit != 'mg/dL'){\n                    max = max\n                    value.agp05 = value.agp05.map(val => GlucoseUtils.mgdlToMmol(val));\n                    value.agp25 = value.agp25.map(val => GlucoseUtils.mgdlToMmol(val));\n                    value.agp75 = value.agp75.map(val => GlucoseUtils.mgdlToMmol(val));\n                    value.agp95 = value.agp95.map(val => GlucoseUtils.mgdlToMmol(val));\n                    value.agp50 = value.agp50.map(val => GlucoseUtils.mgdlToMmol(val));\n                    this.option.series[4].markLine.data[0].yAxis = 3.9\n                    this.option.series[4].markLine.data[1].yAxis = 10\n                }else{\n                    max = GlucoseUtils.mmolToMgdl(max)\n                }\n                this.option.yAxis[0].max = GlucoseUtils.mmolToMgdl(max)\n                this.option.yAxis[0].interval = GlucoseUtils.mmolToMgdl(max)/5\n                this.option.series[0].data = value.agp05;\n                this.option.series[1].data =  value.agp25.map((item, index) => {\n                        return item - value.agp05[index];\n                        })\n                this.option.series[2].data = value.agp75.map((item, index) => {\n                        return item - value.agp25[index];\n                        })\n                this.option.series[3].data = value.agp95.map((item, index) => {\n                        return item - value.agp75[index];\n                        })\n                this.option.series[4].data = value.agp50\n                this.$nextTick(()=>{\n                    console.log(formatTime(new Date()),'AGP渲染完成')\n                })\n                \n            }\n        },\n        \n        beforeDestroy(){\n            this.$bus.$off('getDatas')\n            this.$bus.$off('getVuexTag')\n        }\n    }\n</script>\n<style scoped>\n   /* agp图谱legend */\n    .agp-chart-empty{\n        width:100%;\n        padding:150px 0;\n    }\n    .empty-icon{\n        width:80px;\n        height:80px;\n        display: block;\n        margin:0 auto;\n    }\n    .agp-chartempty-tips{\n        text-align: center;\n        font-size:var(--fontSize-max);\n        color:var(--color-black-40);\n    }\n    .agp-legend{\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    .agp-legend-item{\n        display: flex;\n        align-items: center;\n        margin:0 10px;\n    }\n    .agp-legend-info{\n         color:var(--color-black-60);\n         margin-left:6px;\n    }\n    .apg-legend-shape1{\n        color:var(--color-primary); \n    }\n    .apg-legend-shape2{\n        width:20px;\n        height:20px;\n        background:#94DBDE;\n    }\n    .apg-legend-shape3{\n        width:20px;\n        height:20px;\n        background:#D6F1F2;\n    }\n    .apg-legend-shape4{\n        width:20px;\n        border-top:2px solid var(--color-error); \n        display: block;\n    }\n    .apg-legend-shape4:nth-child(1){\n        margin-bottom:10px;\n        border-top:2px solid var(--color-warning); \n    }\n</style>"],"mappings":";AAuCA,OAAAA,MAAA;AACA,SAAAC,gBAAA;AACA,SAAAC,UAAA,EAAAC,UAAA;AACA,SAAAC,QAAA;AACA,SAAAC,YAAA;AACA,SAAAC,UAAA;AACA;EACAC,KAAA;IACA;MACAC,WAAA;QACAC,QAAA;MACA;MACAC,MAAA;QACAC,IAAA,GACA;UACAC,MAAA;UACAC,IAAA;UACAC,KAAA;UACAC,GAAA;QACA,EACA;QACAC,KAAA,GACA;UACAC,IAAA;UACAC,SAAA;UACAC,WAAA;UACAC,QAAA;UACAC,SAAA;YACAC,IAAA;YACAC,SAAA;cACAC,KAAA;YACA;YACAC,QAAA;UACA;UACAC,QAAA;YACAJ,IAAA;YACAC,SAAA;cACAC,KAAA;cACAG,KAAA;YACA;UACA;UACApB,IAAA;UACAqB,SAAA;YACAC,SAAA,WAAAA,CAAAC,KAAA,EAAAC,KAAA;cACA,IAAAA,KAAA;gBACA,OAAAD,KAAA;cACA;YACA;YACAL,QAAA;YACAD,KAAA;YACAQ,QAAA;YACAC,MAAA;UACA;QACA,EACA;QACAC,KAAA,GACA;UACAjB,IAAA;UACAC,SAAA;UACAiB,GAAA;UACAC,GAAA;UACAf,SAAA;YACAE,SAAA;cACAC,KAAA;YACA;UACA;UACAI,SAAA;YACAC,SAAA;YACAL,KAAA;YACAQ,QAAA;YACAC,MAAA;UACA;QACA,EACA;QACAI,MAAA,GACA;UACAC,IAAA;UACArB,IAAA;UAEAV,IAAA;UACAgB,SAAA;YACAgB,OAAA;UACA;UACAC,KAAA;UACAC,MAAA;UACAC,SAAA;QACA;QACA;QACA;UACAJ,IAAA;UACArB,IAAA;UACAV,IAAA;UACAgB,SAAA;YACAgB,OAAA;UACA;UACAI,SAAA;YACAnB,KAAA;UACA;UACAgB,KAAA;UACAC,MAAA;UACAC,SAAA;QACA;QACA;QACA;UACAJ,IAAA;UACArB,IAAA;UACAV,IAAA;UACAgB,SAAA;YACAgB,OAAA;UACA;UACAI,SAAA;YACAnB,KAAA;UACA;UACAgB,KAAA;UACAC,MAAA;UACAC,SAAA;QACA;QACA;QACA;UACAJ,IAAA;UACArB,IAAA;U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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}