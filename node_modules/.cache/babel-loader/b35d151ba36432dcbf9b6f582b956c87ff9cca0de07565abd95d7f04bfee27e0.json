{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2023 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _classPrivateMethodInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nvar _assertClassBrand = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/assertClassBrand.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldSet2.js\").default;\nvar _ChannelProxy;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChannelProxy = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst log_js_1 = require(\"../../../utils/log.js\");\nconst uuid_js_1 = require(\"../../../utils/uuid.js\");\n/**\n * Used to send messages from realm to BiDi user.\n */\nvar _properties = /*#__PURE__*/new WeakMap();\nvar _id = /*#__PURE__*/new WeakMap();\nvar _logger = /*#__PURE__*/new WeakMap();\nvar _ChannelProxy_brand = /*#__PURE__*/new WeakSet();\nclass ChannelProxy {\n  constructor(channel, logger) {\n    /** Starts listening for the channel events of the provided ChannelProxy. */\n    _classPrivateMethodInitSpec(this, _ChannelProxy_brand);\n    _classPrivateFieldInitSpec(this, _properties, void 0);\n    _classPrivateFieldInitSpec(this, _id, (0, uuid_js_1.uuidv4)());\n    _classPrivateFieldInitSpec(this, _logger, void 0);\n    _classPrivateFieldSet(_properties, this, channel);\n    _classPrivateFieldSet(_logger, this, logger);\n  }\n  /**\n   * Creates a channel proxy in the given realm, initialises listener and\n   * returns a handle to `sendMessage` delegate.\n   */\n  async init(realm, eventManager) {\n    const channelHandle = await _createAndGetHandleInRealm.call(ChannelProxy, realm);\n    const sendMessageHandle = await _createSendMessageHandle.call(ChannelProxy, realm, channelHandle);\n    void _assertClassBrand(_ChannelProxy_brand, this, _startListener).call(this, realm, channelHandle, eventManager);\n    return sendMessageHandle;\n  }\n  /** Gets a ChannelProxy from window and returns its handle. */\n  async startListenerFromWindow(realm, eventManager) {\n    try {\n      const channelHandle = await _assertClassBrand(_ChannelProxy_brand, this, _getHandleFromWindow).call(this, realm);\n      void _assertClassBrand(_ChannelProxy_brand, this, _startListener).call(this, realm, channelHandle, eventManager);\n    } catch (error) {\n      _classPrivateFieldGet(_logger, this)?.call(this, log_js_1.LogType.debugError, error);\n    }\n  }\n  /**\n   * Evaluation string which creates a ChannelProxy object on the client side.\n   */\n\n  /**\n   * String to be evaluated to create a ProxyChannel and put it to window.\n   * Returns the delegate `sendMessage`. Used to provide an argument for preload\n   * script. Does the following:\n   * 1. Creates a ChannelProxy.\n   * 2. Puts the ChannelProxy to window['${this.#id}'] or resolves the promise\n   *    by calling delegate stored in window['${this.#id}'].\n   *    This is needed because `#getHandleFromWindow` can be called before or\n   *    after this method.\n   * 3. Returns the delegate `sendMessage` of the created ChannelProxy.\n   */\n  getEvalInWindowStr() {\n    const delegate = String((id, channelProxy) => {\n      const w = window;\n      if (w[id] === undefined) {\n        // `#getHandleFromWindow` is not initialized yet, and will get the\n        // channelProxy later.\n        w[id] = channelProxy;\n      } else {\n        // `#getHandleFromWindow` is already set a delegate to window property\n        // and is waiting for it to be called with the channelProxy.\n        w[id](channelProxy);\n        delete w[id];\n      }\n      return channelProxy.sendMessage;\n    });\n    const channelProxyEval = _createChannelProxyEvalStr.call(ChannelProxy);\n    return `(${delegate})('${_classPrivateFieldGet(_id, this)}',${channelProxyEval})`;\n  }\n}\n_ChannelProxy = ChannelProxy;\nfunction _createChannelProxyEvalStr() {\n  const functionStr = String(() => {\n    const queue = [];\n    let queueNonEmptyResolver = null;\n    return {\n      /**\n       * Gets a promise, which is resolved as soon as a message occurs\n       * in the queue.\n       */\n      async getMessage() {\n        const onMessage = queue.length > 0 ? Promise.resolve() : new Promise(resolve => {\n          queueNonEmptyResolver = resolve;\n        });\n        await onMessage;\n        return queue.shift();\n      },\n      /**\n       * Adds a message to the queue.\n       * Resolves the pending promise if needed.\n       */\n      sendMessage(message) {\n        queue.push(message);\n        if (queueNonEmptyResolver !== null) {\n          queueNonEmptyResolver();\n          queueNonEmptyResolver = null;\n        }\n      }\n    };\n  });\n  return `(${functionStr})()`;\n}\n/** Creates a ChannelProxy in the given realm. */\nasync function _createAndGetHandleInRealm(realm) {\n  const createChannelHandleResult = await realm.cdpClient.sendCommand('Runtime.evaluate', {\n    expression: _assertClassBrand(_ChannelProxy, this, _createChannelProxyEvalStr).call(this),\n    contextId: realm.executionContextId,\n    serializationOptions: {\n      serialization: \"idOnly\" /* Protocol.Runtime.SerializationOptionsSerialization.IdOnly */\n    }\n  });\n  if (createChannelHandleResult.exceptionDetails || createChannelHandleResult.result.objectId === undefined) {\n    throw new Error(`Cannot create channel`);\n  }\n  return createChannelHandleResult.result.objectId;\n}\n/** Gets a handle to `sendMessage` delegate from the ChannelProxy handle. */\nasync function _createSendMessageHandle(realm, channelHandle) {\n  const sendMessageArgResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n    functionDeclaration: String(channelHandle => {\n      return channelHandle.sendMessage;\n    }),\n    arguments: [{\n      objectId: channelHandle\n    }],\n    executionContextId: realm.executionContextId,\n    serializationOptions: {\n      serialization: \"idOnly\" /* Protocol.Runtime.SerializationOptionsSerialization.IdOnly */\n    }\n  });\n  // TODO: check for exceptionDetails.\n  return sendMessageArgResult.result.objectId;\n}\nasync function _startListener(realm, channelHandle, eventManager) {\n  // noinspection InfiniteLoopJS\n  for (;;) {\n    try {\n      const message = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n        functionDeclaration: String(async channelHandle => await channelHandle.getMessage()),\n        arguments: [{\n          objectId: channelHandle\n        }],\n        awaitPromise: true,\n        executionContextId: realm.executionContextId,\n        serializationOptions: {\n          serialization: \"deep\" /* Protocol.Runtime.SerializationOptionsSerialization.Deep */,\n          maxDepth: _classPrivateFieldGet(_properties, this).serializationOptions?.maxObjectDepth ?? undefined\n        }\n      });\n      if (message.exceptionDetails) {\n        throw message.exceptionDetails;\n      }\n      for (const browsingContext of realm.associatedBrowsingContexts) {\n        eventManager.registerEvent({\n          type: 'event',\n          method: protocol_js_1.ChromiumBidi.Script.EventNames.Message,\n          params: {\n            channel: _classPrivateFieldGet(_properties, this).channel,\n            data: realm.cdpToBidiValue(message, _classPrivateFieldGet(_properties, this).ownership ?? \"none\" /* Script.ResultOwnership.None */),\n            source: realm.source\n          }\n        }, browsingContext.id);\n      }\n    } catch (error) {\n      // If an error is thrown, then the channel is permanently broken, so we\n      // exit the loop.\n      _classPrivateFieldGet(_logger, this)?.call(this, log_js_1.LogType.debugError, error);\n      break;\n    }\n  }\n}\n/**\n * Returns a handle of ChannelProxy from window's property which was set there\n * by `getEvalInWindowStr`. If window property is not set yet, sets a promise\n * resolver to the window property, so that `getEvalInWindowStr` can resolve\n * the promise later on with the channel.\n * This is needed because `getEvalInWindowStr` can be called before or\n * after this method.\n */\nasync function _getHandleFromWindow(realm) {\n  const channelHandleResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {\n    functionDeclaration: String(id => {\n      const w = window;\n      if (w[id] === undefined) {\n        // The channelProxy is not created yet. Create a promise, put the\n        // resolver to window property and return the promise.\n        // `getEvalInWindowStr` will resolve the promise later.\n        return new Promise(resolve => w[id] = resolve);\n      }\n      // The channelProxy is already created by `getEvalInWindowStr` and\n      // is set into window property. Return it.\n      const channelProxy = w[id];\n      delete w[id];\n      return channelProxy;\n    }),\n    arguments: [{\n      value: _classPrivateFieldGet(_id, this)\n    }],\n    executionContextId: realm.executionContextId,\n    awaitPromise: true,\n    serializationOptions: {\n      serialization: \"idOnly\" /* Protocol.Runtime.SerializationOptionsSerialization.IdOnly */\n    }\n  });\n  if (channelHandleResult.exceptionDetails !== undefined || channelHandleResult.result.objectId === undefined) {\n    throw new Error(`ChannelHandle not found in window[\"${_classPrivateFieldGet(_id, this)}\"]`);\n  }\n  return channelHandleResult.result.objectId;\n}\nexports.ChannelProxy = ChannelProxy;","map":{"version":3,"names":["_classPrivateMethodInitSpec","require","default","_classPrivateFieldInitSpec","_classPrivateFieldGet","_assertClassBrand","_classPrivateFieldSet","_ChannelProxy","protocol_js_1","log_js_1","uuid_js_1","_properties","WeakMap","_id","_logger","_ChannelProxy_brand","WeakSet","ChannelProxy","constructor","channel","logger","uuidv4","init","realm","eventManager","channelHandle","_createAndGetHandleInRealm","call","sendMessageHandle","_createSendMessageHandle","_startListener","startListenerFromWindow","_getHandleFromWindow","error","LogType","debugError","getEvalInWindowStr","delegate","String","id","channelProxy","w","window","undefined","sendMessage","channelProxyEval","_createChannelProxyEvalStr","functionStr","queue","queueNonEmptyResolver","getMessage","onMessage","length","Promise","resolve","shift","message","push","createChannelHandleResult","cdpClient","sendCommand","expression","contextId","executionContextId","serializationOptions","serialization","exceptionDetails","result","objectId","Error","sendMessageArgResult","functionDeclaration","arguments","awaitPromise","maxDepth","maxObjectDepth","browsingContext","associatedBrowsingContexts","registerEvent","type","method","ChromiumBidi","Script","EventNames","Message","params","data","cdpToBidiValue","ownership","source","channelHandleResult","value","exports"],"sources":["../../../../../src/bidiMapper/modules/script/ChannelProxy.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}