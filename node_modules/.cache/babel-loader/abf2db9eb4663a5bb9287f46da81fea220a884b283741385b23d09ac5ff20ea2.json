{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TChart from '@/views/components/TChart';\nimport { hasEventListener } from \"@/utils/utils\";\nimport { formatDate } from '@/utils/formatTime';\nimport { AGPUtils } from \"@/utils/algorithm/AGP\";\nexport default {\n  data() {\n    return {\n      initOptions: {\n        renderer: 'svg'\n      },\n      option: {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        grid: {\n          left: 120,\n          right: 120,\n          bottom: 60,\n          top: 60\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: false,\n          axisTick: false,\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: '#e5e5e5',\n              width: 1\n            }\n          },\n          data: [],\n          axisLabel: {\n            // formatter: function (value, index) {\n            //     if (index  % 360 === 0) {\n            //         return value;\n            //     }\n            // },\n            interval: 0,\n            color: '#666',\n            fontSize: 16,\n            margin: 14\n          }\n        }],\n        yAxis: [{\n          type: 'value',\n          min: 0,\n          max: 15,\n          splitLine: {\n            lineStyle: {\n              type: 'dashed',\n              color: '#e5e5e5'\n            }\n          },\n          axisLabel: {\n            formatter: '{value}',\n            color: '#666',\n            fontSize: 16,\n            margin: 14\n          }\n        }],\n        series: [{\n          name: 'L',\n          type: 'line',\n          data: [],\n          lineStyle: {\n            opacity: 1\n          },\n          symbol: 'none'\n        }]\n      }\n    };\n  },\n  components: {\n    TChart\n  },\n  mounted() {\n    // if(!hasEventListener(this.$bus,'getData')){\n    //     this.$bus.$on('getData',(data)=>{\n    //       this.manageData(data)  \n    //     })\n    // }\n    this.manageData();\n  },\n  methods: {\n    // 管理数据\n    manageData(data) {\n      let array = [{\n        DataTs: 1715129400,\n        Value: 171\n      }, {\n        DataTs: 1715043000,\n        Value: 239\n      }, {\n        DataTs: 1714956600,\n        Value: 164\n      }, {\n        DataTs: 1714956660,\n        Value: 388\n      }, {\n        DataTs: 1715043060,\n        Value: 218\n      }, {\n        DataTs: 1715129460,\n        Value: 230\n      }, {\n        DataTs: 1715129520,\n        Value: 158\n      }, {\n        DataTs: 1715043120,\n        Value: 267\n      }, {\n        DataTs: 1714956720,\n        Value: 180\n      }, {\n        DataTs: 1714870320,\n        Value: 192\n      }, {\n        DataTs: 1714783920,\n        Value: 255\n      }, {\n        DataTs: 1714697520,\n        Value: 236\n      }, {\n        DataTs: 1714697460,\n        Value: 360\n      }, {\n        DataTs: 1714783860,\n        Value: 397\n      }, {\n        DataTs: 1714870260,\n        Value: 356\n      }, {\n        DataTs: 1714870200,\n        Value: 230\n      }, {\n        DataTs: 1714783800,\n        Value: 387\n      }, {\n        DataTs: 1714697400,\n        Value: 199\n      }];\n      // 将数组分割为时刻数组\n      let momentMap = new Map();\n      array.forEach(item => {\n        item.moment = formatDate(item.DataTs * 1000, 'HH:MM');\n        momentMap.has(item.moment) ? momentMap.get(item.moment).push(item.Value) : momentMap.set(item.moment, [item.Value]);\n      });\n      console.log(momentMap);\n      // 计算出AGP数据并补全图谱数据\n      let agpMap = new Map();\n      let agp05 = new Array(3);\n      let agp25 = new Array(3);\n      let agp50 = new Array(3);\n      let agp75 = new Array(3);\n      let agp95 = new Array(3);\n      let xData = new Array(3);\n      // for (let i = 0; i <= 24 * 60; i++) {\n      //     // 分钟换算为时刻\n      //     let h =  Math.floor(i/60)<10 ? '0'+ Math.floor(i/60) : Math.floor(i/60) \n      //     let m =  i%60 < 10 ? '0' + i%60 : i%60\n      //     let moment = h+':'+m\n      //     if(momentMap.has(moment)){\n      //         agp05[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p05\n      //         agp25[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p25\n      //         agp50[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p50\n      //         agp75[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p75\n      //         agp95[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p95\n      //     }\n      //     xData[i] = moment\n      //     // momentMap.has(moment) ? agpMap.set(moment,AGPUtils.calculateYValue(momentMap.get(moment))) : agpMap.set(moment,{p05:null,p25:null,p50:null,p75:null,p95:null})\n      // }\n      for (let i = 0; i < 3; i++) {\n        // 分钟换算为时刻\n        let s = 530 + i;\n        let h = Math.floor(s / 60) < 10 ? '0' + Math.floor(s / 60) : Math.floor(s / 60);\n        let m = s % 60 < 10 ? '0' + s % 60 : s % 60;\n        let moment = h + ':' + m;\n        if (momentMap.has(moment)) {\n          agp05[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p05;\n          agp25[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p25;\n          agp50[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p50;\n          agp75[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p75;\n          agp95[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p95;\n        }\n        xData[i] = moment;\n        // momentMap.has(moment) ? agpMap.set(moment,AGPUtils.calculateYValue(momentMap.get(moment))) : agpMap.set(moment,{p05:null,p25:null,p50:null,p75:null,p95:null})\n      }\n      // let xData = [...agpMap.keys()];\n      console.log(agp05, xData);\n      this.option.xAxis[0].data = xData;\n      this.option.series[0].data = agp05;\n      // this.option.series[1].data =  agp25.map((item, index) => {\n      //         return item - agp05[index];\n      //         })\n      // this.option.series[2].data = agp75.map((item, index) => {\n      //         return item - agp25[index];\n      //         })\n      // this.option.series[3].data = agp95.map((item, index) => {\n      //         return item - agp75[index];\n      //         })\n      // this.option.series[4].data = agp50\n    }\n  },\n  beforeDestroy() {\n    this.$bus.$off('getData');\n  }\n};","map":{"version":3,"names":["TChart","hasEventListener","formatDate","AGPUtils","data","initOptions","renderer","option","tooltip","trigger","axisPointer","type","crossStyle","color","grid","left","right","bottom","top","xAxis","boundaryGap","axisTick","axisLine","show","lineStyle","width","axisLabel","interval","fontSize","margin","yAxis","min","max","splitLine","formatter","series","name","opacity","symbol","components","mounted","manageData","methods","array","DataTs","Value","momentMap","Map","forEach","item","moment","has","get","push","set","console","log","agpMap","agp05","Array","agp25","agp50","agp75","agp95","xData","i","s","h","Math","floor","m","calculateYValue","p05","p25","p50","p75","p95","beforeDestroy","$bus","$off"],"sources":["src/views/components/Chart/AGPchart.vue"],"sourcesContent":["<template>\n    <div>\n        <t-chart\n                style=\"width: 100%;height:450px;\"\n                :option=\"option\"\n                :init-options=\"initOptions\"\n                theme=\"tduck-echarts-theme\"\n        />\n    </div>\n</template>\n<script>\nimport TChart from '@/views/components/TChart'\nimport { hasEventListener } from \"@/utils/utils\";\nimport {formatDate} from '@/utils/formatTime'\nimport { AGPUtils } from \"@/utils/algorithm/AGP\";\nexport default {\n    data(){\n        return{\n            initOptions: {\n                renderer: 'svg'\n            },\n            option: {\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                    type: 'cross',\n                    crossStyle: {\n                        color: '#999'\n                    }\n                    }\n                },\n                grid:{\n                    left:120,\n                    right:120,\n                    bottom:60,\n                    top:60\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap:false,\n                        axisTick: false,\n                        axisLine: {\n                            show: true,\n                            lineStyle: {\n                                color: '#e5e5e5',\n                                width:1,\n                            },\n                        },\n                        data:[],\n                        axisLabel: {\n                            // formatter: function (value, index) {\n                            //     if (index  % 360 === 0) {\n                            //         return value;\n                            //     }\n                            // },\n                            interval: 0,\n                            color: '#666',\n                            fontSize: 16, \n                            margin:14\n                        }\n                    }\n                ],\n                yAxis: [\n                    {\n                    type: 'value',\n                    min: 0,\n                    max: 15,\n                    splitLine:{\n                        lineStyle:{\n                            type:'dashed',\n                            color:'#e5e5e5'\n                        }\n                    },\n                    axisLabel: {\n                        formatter: '{value}',\n                        color: '#666',\n                        fontSize: 16,\n                        margin:14\n                    }\n                    }\n                ],\n                series:[{\n                    name: 'L',\n                    type: 'line',\n                    data: [],\n                    lineStyle: {\n                    opacity: 1,\n                    },\n                    symbol: 'none',\n                }],\n\n              \n            },\n        }\n    },\n    components: {\n        TChart\n    },\n    mounted(){\n        // if(!hasEventListener(this.$bus,'getData')){\n        //     this.$bus.$on('getData',(data)=>{\n        //       this.manageData(data)  \n        //     })\n        // }\n        this.manageData()\n    },\n    methods:{\n        // 管理数据\n        manageData(data){\n            let array = [{DataTs:1715129400,Value:171},\n            {DataTs:1715043000,Value:239},\n            {DataTs:1714956600,Value:164},\n            {DataTs:1714956660,Value:388},\n            {DataTs:1715043060,Value:218},\n            {DataTs:1715129460,Value:230},\n            {DataTs:1715129520,Value:158},\n            {DataTs:1715043120,Value:267},\n            {DataTs:1714956720,Value:180},\n            {DataTs:1714870320,Value:192},\n            {DataTs:1714783920,Value:255},\n            {DataTs:1714697520,Value:236},\n            {DataTs:1714697460,Value:360},\n            {DataTs:1714783860,Value:397},\n            {DataTs:1714870260,Value:356},\n            {DataTs:1714870200,Value:230},\n            {DataTs:1714783800,Value:387},\n            {DataTs:1714697400,Value:199},\n            ]\n            // 将数组分割为时刻数组\n            let momentMap = new Map();\n            array.forEach(item=>{\n                item.moment = formatDate(item.DataTs*1000,'HH:MM')\n                momentMap.has(item.moment) ? momentMap.get(item.moment).push(item.Value) : momentMap.set(item.moment, [item.Value]);\n            })\n            console.log(momentMap)\n            // 计算出AGP数据并补全图谱数据\n            let agpMap = new Map();\n            let agp05 = new Array(3);\n            let agp25 = new Array(3);\n            let agp50 = new Array(3);\n            let agp75 = new Array(3);\n            let agp95 = new Array(3);\n            let xData = new Array(3);\n            // for (let i = 0; i <= 24 * 60; i++) {\n            //     // 分钟换算为时刻\n            //     let h =  Math.floor(i/60)<10 ? '0'+ Math.floor(i/60) : Math.floor(i/60) \n            //     let m =  i%60 < 10 ? '0' + i%60 : i%60\n            //     let moment = h+':'+m\n            //     if(momentMap.has(moment)){\n            //         agp05[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p05\n            //         agp25[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p25\n            //         agp50[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p50\n            //         agp75[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p75\n            //         agp95[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p95\n            //     }\n            //     xData[i] = moment\n            //     // momentMap.has(moment) ? agpMap.set(moment,AGPUtils.calculateYValue(momentMap.get(moment))) : agpMap.set(moment,{p05:null,p25:null,p50:null,p75:null,p95:null})\n            // }\n            for (let i = 0; i < 3; i++) {\n                // 分钟换算为时刻\n                let s = 530+i\n                let h =  Math.floor(s/60)<10 ? '0'+ Math.floor(s/60) : Math.floor(s/60) \n                let m =  s%60 < 10 ? '0' + s%60 : s%60\n                let moment = h+':'+m\n                if(momentMap.has(moment)){\n                    agp05[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p05\n                    agp25[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p25\n                    agp50[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p50\n                    agp75[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p75\n                    agp95[i] = AGPUtils.calculateYValue(momentMap.get(moment)).p95\n                }\n                xData[i] = moment\n                // momentMap.has(moment) ? agpMap.set(moment,AGPUtils.calculateYValue(momentMap.get(moment))) : agpMap.set(moment,{p05:null,p25:null,p50:null,p75:null,p95:null})\n            }\n            // let xData = [...agpMap.keys()];\n            console.log(agp05,xData)\n            this.option.xAxis[0].data = xData\n            this.option.series[0].data = agp05\n            // this.option.series[1].data =  agp25.map((item, index) => {\n            //         return item - agp05[index];\n            //         })\n            // this.option.series[2].data = agp75.map((item, index) => {\n            //         return item - agp25[index];\n            //         })\n            // this.option.series[3].data = agp95.map((item, index) => {\n            //         return item - agp75[index];\n            //         })\n            // this.option.series[4].data = agp50\n        },\n    },\n    beforeDestroy(){\n        this.$bus.$off('getData')\n    }\n}\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}