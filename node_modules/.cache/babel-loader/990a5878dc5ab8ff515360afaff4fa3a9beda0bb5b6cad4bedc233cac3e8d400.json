{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { formatDate } from '@/utils/formatTime';\nimport { GlucoseUtils } from \"@/utils/algorithm/Glucose\";\nimport { AGPUtils } from \"@/utils/algorithm/AGP\";\nimport lodash from 'lodash';\n// 监听主线程传来的消息\nself.addEventListener('message', e => {\n  // heavyCalculation(e.data)\n  self.postMessage(heavyCalculation(e.data));\n});\n// 处理数据\nfunction heavyCalculation(data) {\n  let array = data;\n  // 将数组分割为时刻数组\n  let momentMap = new Map();\n  array.forEach(item => {\n    item.moment = formatDate(item.DataTs * 1000, 'HH:MM');\n    momentMap.has(item.moment) ? momentMap.get(item.moment).push(item.Value) : momentMap.set(item.moment, [item.Value]);\n  });\n  // 计算出AGP数据并补全图谱数据\n  let agp05 = new Array(24 * 60);\n  let agp25 = new Array(24 * 60);\n  let agp50 = new Array(24 * 60);\n  let agp75 = new Array(24 * 60);\n  let agp95 = new Array(24 * 60);\n  let xData = new Array(24 * 60);\n\n  // 分时段平均血糖\n  let x2Data = new Array(24);\n  let avgData = new Array(24);\n  let avgMoment = 0;\n  for (let i = 0; i < 24 * 60; i++) {\n    // 分钟换算为时刻\n    let h = Math.floor(i / 60) < 10 ? '0' + Math.floor(i / 60) : Math.floor(i / 60);\n    let m = i % 60 < 10 ? '0' + i % 60 : i % 60;\n    let moment = h + ':' + m;\n    if (momentMap.has(moment)) {\n      agp05[i] = AGPUtils.calculateYValue(momentMap.get(moment)) ? GlucoseUtils.mgdlToMmol(AGPUtils.calculateYValue(momentMap.get(moment)).p05) : AGPUtils.calculateYValue(momentMap.get(moment));\n      agp25[i] = AGPUtils.calculateYValue(momentMap.get(moment)) ? GlucoseUtils.mgdlToMmol(AGPUtils.calculateYValue(momentMap.get(moment)).p25) : AGPUtils.calculateYValue(momentMap.get(moment));\n      agp50[i] = AGPUtils.calculateYValue(momentMap.get(moment)) ? GlucoseUtils.mgdlToMmol(AGPUtils.calculateYValue(momentMap.get(moment)).p50) : AGPUtils.calculateYValue(momentMap.get(moment));\n      agp75[i] = AGPUtils.calculateYValue(momentMap.get(moment)) ? GlucoseUtils.mgdlToMmol(AGPUtils.calculateYValue(momentMap.get(moment)).p75) : AGPUtils.calculateYValue(momentMap.get(moment));\n      agp95[i] = AGPUtils.calculateYValue(momentMap.get(moment)) ? GlucoseUtils.mgdlToMmol(AGPUtils.calculateYValue(momentMap.get(moment)).p95) : AGPUtils.calculateYValue(momentMap.get(moment));\n    }\n    xData[i] = moment;\n    if (i % 60 == 0) {\n      avgMoment = i / 60;\n      x2Data[i / 60] = moment;\n      avgData[avgMoment] = momentMap.get(moment) ? momentMap.get(moment) : [];\n    } else {\n      momentMap.get(moment) ? avgData[avgMoment].push(...momentMap.get(moment)) : [];\n    }\n  }\n  xData.push('24:00');\n  let params = {\n    xData: xData,\n    x2Data: x2Data,\n    series0: agp05,\n    series1: agp25.map((item, index) => {\n      return item - agp05[index];\n    }),\n    series2: agp75.map((item, index) => {\n      return item - agp25[index];\n    }),\n    series3: agp95.map((item, index) => {\n      return item - agp75[index];\n    }),\n    series4: agp50,\n    series5: avgData.map((item, index) => {\n      return GlucoseUtils.mgdlToMmol(lodash.mean(item));\n    })\n  };\n  return params;\n}","map":{"version":3,"names":["formatDate","GlucoseUtils","AGPUtils","lodash","self","addEventListener","e","postMessage","heavyCalculation","data","array","momentMap","Map","forEach","item","moment","DataTs","has","get","push","Value","set","agp05","Array","agp25","agp50","agp75","agp95","xData","x2Data","avgData","avgMoment","i","h","Math","floor","m","calculateYValue","mgdlToMmol","p05","p25","p50","p75","p95","params","series0","series1","map","index","series2","series3","series4","series5","mean"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/workers/agp_worker.js"],"sourcesContent":["import {formatDate} from '@/utils/formatTime'\nimport { GlucoseUtils } from \"@/utils/algorithm/Glucose\";\nimport { AGPUtils } from \"@/utils/algorithm/AGP\";\nimport lodash from 'lodash'\n// 监听主线程传来的消息\nself.addEventListener('message',(e)=>{\n    // heavyCalculation(e.data)\n    self.postMessage(heavyCalculation(e.data))\n})\n// 处理数据\nfunction heavyCalculation(data){\n    let array = data\n    // 将数组分割为时刻数组\n    let momentMap = new Map();\n    array.forEach(item=>{\n        item.moment = formatDate(item.DataTs*1000,'HH:MM')\n        momentMap.has(item.moment) ? momentMap.get(item.moment).push(item.Value) : momentMap.set(item.moment, [item.Value]);\n    })\n    // 计算出AGP数据并补全图谱数据\n    let agp05 = new Array(24 * 60);\n    let agp25 = new Array(24 * 60);\n    let agp50 = new Array(24 * 60);\n    let agp75 = new Array(24 * 60);\n    let agp95 = new Array(24 * 60);\n    let xData = new Array(24 * 60);\n\n    // 分时段平均血糖\n    let x2Data = new Array(24);\n    let avgData = new Array(24);\n    let avgMoment = 0\n    for (let i = 0; i < 24 * 60; i++) {\n        // 分钟换算为时刻\n        let h =  Math.floor(i/60)<10 ? '0'+ Math.floor(i/60) : Math.floor(i/60) \n        let m =  i%60 < 10 ? '0' + i%60 : i%60\n        let moment = h+':'+m\n        if(momentMap.has(moment)){\n            agp05[i] = AGPUtils.calculateYValue(momentMap.get(moment))?GlucoseUtils.mgdlToMmol(AGPUtils.calculateYValue(momentMap.get(moment)).p05):AGPUtils.calculateYValue(momentMap.get(moment))\n            agp25[i] = AGPUtils.calculateYValue(momentMap.get(moment))?GlucoseUtils.mgdlToMmol(AGPUtils.calculateYValue(momentMap.get(moment)).p25):AGPUtils.calculateYValue(momentMap.get(moment))  \n            agp50[i] = AGPUtils.calculateYValue(momentMap.get(moment))?GlucoseUtils.mgdlToMmol(AGPUtils.calculateYValue(momentMap.get(moment)).p50):AGPUtils.calculateYValue(momentMap.get(moment))\n            agp75[i] = AGPUtils.calculateYValue(momentMap.get(moment))?GlucoseUtils.mgdlToMmol(AGPUtils.calculateYValue(momentMap.get(moment)).p75):AGPUtils.calculateYValue(momentMap.get(moment)) \n            agp95[i] = AGPUtils.calculateYValue(momentMap.get(moment))?GlucoseUtils.mgdlToMmol(AGPUtils.calculateYValue(momentMap.get(moment)).p95):AGPUtils.calculateYValue(momentMap.get(moment))\n        }\n        xData[i] = moment\n        if(i%60==0){\n            avgMoment = i/60\n            x2Data[i/60] = moment\n            avgData[avgMoment] = momentMap.get(moment)?momentMap.get(moment):[]\n        }else{\n        momentMap.get(moment)?avgData[avgMoment].push(...momentMap.get(moment)):[]\n        }\n        \n    }\n    xData.push('24:00')\n    let params = {\n        xData:xData,\n        x2Data:x2Data,\n        series0:agp05,\n        series1:agp25.map((item, index) => {\n            return item - agp05[index];\n        }),\n        series2:agp75.map((item, index) => {\n            return item - agp25[index];\n        }),\n        series3:agp95.map((item, index) => {\n            return item - agp75[index];\n        }),\n        series4:agp50,\n        series5:avgData.map((item,index) => {\n            return GlucoseUtils.mgdlToMmol(lodash.mean(item));\n        }),\n    }\n\n    return  params\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}