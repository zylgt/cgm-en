{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2018 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar _classPrivateMethodInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _defineProperty = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _assertClassBrand = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/assertClassBrand.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldSet2.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Accessibility = void 0;\n/**\n * The Accessibility class provides methods for inspecting the browser's\n * accessibility tree. The accessibility tree is used by assistive technology\n * such as {@link https://en.wikipedia.org/wiki/Screen_reader | screen readers} or\n * {@link https://en.wikipedia.org/wiki/Switch_access | switches}.\n *\n * @remarks\n *\n * Accessibility is a very platform-specific thing. On different platforms,\n * there are different screen readers that might have wildly different output.\n *\n * Blink - Chrome's rendering engine - has a concept of \"accessibility tree\",\n * which is then translated into different platform-specific APIs. Accessibility\n * namespace gives users access to the Blink Accessibility Tree.\n *\n * Most of the accessibility tree gets filtered out when converting from Blink\n * AX Tree to Platform-specific AX-Tree or by assistive technologies themselves.\n * By default, Puppeteer tries to approximate this filtering, exposing only\n * the \"interesting\" nodes of the tree.\n *\n * @public\n */\nvar _client = /*#__PURE__*/new WeakMap();\nclass Accessibility {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    _classPrivateFieldInitSpec(this, _client, void 0);\n    _classPrivateFieldSet(_client, this, client);\n  }\n  /**\n   * @internal\n   */\n  updateClient(client) {\n    _classPrivateFieldSet(_client, this, client);\n  }\n  /**\n   * Captures the current state of the accessibility tree.\n   * The returned object represents the root accessible node of the page.\n   *\n   * @remarks\n   *\n   * **NOTE** The Chrome accessibility tree contains nodes that go unused on\n   * most platforms and by most screen readers. Puppeteer will discard them as\n   * well for an easier to process tree, unless `interestingOnly` is set to\n   * `false`.\n   *\n   * @example\n   * An example of dumping the entire accessibility tree:\n   *\n   * ```ts\n   * const snapshot = await page.accessibility.snapshot();\n   * console.log(snapshot);\n   * ```\n   *\n   * @example\n   * An example of logging the focused node's name:\n   *\n   * ```ts\n   * const snapshot = await page.accessibility.snapshot();\n   * const node = findFocusedNode(snapshot);\n   * console.log(node && node.name);\n   *\n   * function findFocusedNode(node) {\n   *   if (node.focused) return node;\n   *   for (const child of node.children || []) {\n   *     const foundNode = findFocusedNode(child);\n   *     return foundNode;\n   *   }\n   *   return null;\n   * }\n   * ```\n   *\n   * @returns An AXNode object representing the snapshot.\n   */\n  async snapshot(options = {}) {\n    const {\n      interestingOnly = true,\n      root = null\n    } = options;\n    const {\n      nodes\n    } = await _classPrivateFieldGet(_client, this).send('Accessibility.getFullAXTree');\n    let backendNodeId;\n    if (root) {\n      const {\n        node\n      } = await _classPrivateFieldGet(_client, this).send('DOM.describeNode', {\n        objectId: root.id\n      });\n      backendNodeId = node.backendNodeId;\n    }\n    const defaultRoot = AXNode.createTree(nodes);\n    let needle = defaultRoot;\n    if (backendNodeId) {\n      needle = defaultRoot.find(node => {\n        return node.payload.backendDOMNodeId === backendNodeId;\n      });\n      if (!needle) {\n        return null;\n      }\n    }\n    if (!interestingOnly) {\n      return this.serializeTree(needle)[0] ?? null;\n    }\n    const interestingNodes = new Set();\n    this.collectInterestingNodes(interestingNodes, defaultRoot, false);\n    if (!interestingNodes.has(needle)) {\n      return null;\n    }\n    return this.serializeTree(needle, interestingNodes)[0] ?? null;\n  }\n  serializeTree(node, interestingNodes) {\n    const children = [];\n    for (const child of node.children) {\n      children.push(...this.serializeTree(child, interestingNodes));\n    }\n    if (interestingNodes && !interestingNodes.has(node)) {\n      return children;\n    }\n    const serializedNode = node.serialize();\n    if (children.length) {\n      serializedNode.children = children;\n    }\n    return [serializedNode];\n  }\n  collectInterestingNodes(collection, node, insideControl) {\n    if (node.isInteresting(insideControl)) {\n      collection.add(node);\n    }\n    if (node.isLeafNode()) {\n      return;\n    }\n    insideControl = insideControl || node.isControl();\n    for (const child of node.children) {\n      this.collectInterestingNodes(collection, child, insideControl);\n    }\n  }\n}\nexports.Accessibility = Accessibility;\nvar _richlyEditable = /*#__PURE__*/new WeakMap();\nvar _editable = /*#__PURE__*/new WeakMap();\nvar _focusable = /*#__PURE__*/new WeakMap();\nvar _hidden = /*#__PURE__*/new WeakMap();\nvar _name = /*#__PURE__*/new WeakMap();\nvar _role = /*#__PURE__*/new WeakMap();\nvar _ignored = /*#__PURE__*/new WeakMap();\nvar _cachedHasFocusableChild = /*#__PURE__*/new WeakMap();\nvar _AXNode_brand = /*#__PURE__*/new WeakSet();\nclass AXNode {\n  constructor(payload) {\n    _classPrivateMethodInitSpec(this, _AXNode_brand);\n    _defineProperty(this, \"payload\", void 0);\n    _defineProperty(this, \"children\", []);\n    _classPrivateFieldInitSpec(this, _richlyEditable, false);\n    _classPrivateFieldInitSpec(this, _editable, false);\n    _classPrivateFieldInitSpec(this, _focusable, false);\n    _classPrivateFieldInitSpec(this, _hidden, false);\n    _classPrivateFieldInitSpec(this, _name, void 0);\n    _classPrivateFieldInitSpec(this, _role, void 0);\n    _classPrivateFieldInitSpec(this, _ignored, void 0);\n    _classPrivateFieldInitSpec(this, _cachedHasFocusableChild, void 0);\n    this.payload = payload;\n    _classPrivateFieldSet(_name, this, this.payload.name ? this.payload.name.value : '');\n    _classPrivateFieldSet(_role, this, this.payload.role ? this.payload.role.value : 'Unknown');\n    _classPrivateFieldSet(_ignored, this, this.payload.ignored);\n    for (const property of this.payload.properties || []) {\n      if (property.name === 'editable') {\n        _classPrivateFieldSet(_richlyEditable, this, property.value.value === 'richtext');\n        _classPrivateFieldSet(_editable, this, true);\n      }\n      if (property.name === 'focusable') {\n        _classPrivateFieldSet(_focusable, this, property.value.value);\n      }\n      if (property.name === 'hidden') {\n        _classPrivateFieldSet(_hidden, this, property.value.value);\n      }\n    }\n  }\n  find(predicate) {\n    if (predicate(this)) {\n      return this;\n    }\n    for (const child of this.children) {\n      const result = child.find(predicate);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  isLeafNode() {\n    if (!this.children.length) {\n      return true;\n    }\n    // These types of objects may have children that we use as internal\n    // implementation details, but we want to expose them as leaves to platform\n    // accessibility APIs because screen readers might be confused if they find\n    // any children.\n    if (_assertClassBrand(_AXNode_brand, this, _isPlainTextField).call(this) || _assertClassBrand(_AXNode_brand, this, _isTextOnlyObject).call(this)) {\n      return true;\n    }\n    // Roles whose children are only presentational according to the ARIA and\n    // HTML5 Specs should be hidden from screen readers.\n    // (Note that whilst ARIA buttons can have only presentational children, HTML5\n    // buttons are allowed to have content.)\n    switch (_classPrivateFieldGet(_role, this)) {\n      case 'doc-cover':\n      case 'graphics-symbol':\n      case 'img':\n      case 'image':\n      case 'Meter':\n      case 'scrollbar':\n      case 'slider':\n      case 'separator':\n      case 'progressbar':\n        return true;\n      default:\n        break;\n    }\n    // Here and below: Android heuristics\n    if (_assertClassBrand(_AXNode_brand, this, _hasFocusableChild).call(this)) {\n      return false;\n    }\n    if (_classPrivateFieldGet(_focusable, this) && _classPrivateFieldGet(_name, this)) {\n      return true;\n    }\n    if (_classPrivateFieldGet(_role, this) === 'heading' && _classPrivateFieldGet(_name, this)) {\n      return true;\n    }\n    return false;\n  }\n  isControl() {\n    switch (_classPrivateFieldGet(_role, this)) {\n      case 'button':\n      case 'checkbox':\n      case 'ColorWell':\n      case 'combobox':\n      case 'DisclosureTriangle':\n      case 'listbox':\n      case 'menu':\n      case 'menubar':\n      case 'menuitem':\n      case 'menuitemcheckbox':\n      case 'menuitemradio':\n      case 'radio':\n      case 'scrollbar':\n      case 'searchbox':\n      case 'slider':\n      case 'spinbutton':\n      case 'switch':\n      case 'tab':\n      case 'textbox':\n      case 'tree':\n      case 'treeitem':\n        return true;\n      default:\n        return false;\n    }\n  }\n  isInteresting(insideControl) {\n    const role = _classPrivateFieldGet(_role, this);\n    if (role === 'Ignored' || _classPrivateFieldGet(_hidden, this) || _classPrivateFieldGet(_ignored, this)) {\n      return false;\n    }\n    if (_classPrivateFieldGet(_focusable, this) || _classPrivateFieldGet(_richlyEditable, this)) {\n      return true;\n    }\n    // If it's not focusable but has a control role, then it's interesting.\n    if (this.isControl()) {\n      return true;\n    }\n    // A non focusable child of a control is not interesting\n    if (insideControl) {\n      return false;\n    }\n    return this.isLeafNode() && !!_classPrivateFieldGet(_name, this);\n  }\n  serialize() {\n    const properties = new Map();\n    for (const property of this.payload.properties || []) {\n      properties.set(property.name.toLowerCase(), property.value.value);\n    }\n    if (this.payload.name) {\n      properties.set('name', this.payload.name.value);\n    }\n    if (this.payload.value) {\n      properties.set('value', this.payload.value.value);\n    }\n    if (this.payload.description) {\n      properties.set('description', this.payload.description.value);\n    }\n    const node = {\n      role: _classPrivateFieldGet(_role, this)\n    };\n    const userStringProperties = ['name', 'value', 'description', 'keyshortcuts', 'roledescription', 'valuetext'];\n    const getUserStringPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const userStringProperty of userStringProperties) {\n      if (!properties.has(userStringProperty)) {\n        continue;\n      }\n      node[userStringProperty] = getUserStringPropertyValue(userStringProperty);\n    }\n    const booleanProperties = ['disabled', 'expanded', 'focused', 'modal', 'multiline', 'multiselectable', 'readonly', 'required', 'selected'];\n    const getBooleanPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const booleanProperty of booleanProperties) {\n      // RootWebArea's treat focus differently than other nodes. They report whether\n      // their frame  has focus, not whether focus is specifically on the root\n      // node.\n      if (booleanProperty === 'focused' && _classPrivateFieldGet(_role, this) === 'RootWebArea') {\n        continue;\n      }\n      const value = getBooleanPropertyValue(booleanProperty);\n      if (!value) {\n        continue;\n      }\n      node[booleanProperty] = getBooleanPropertyValue(booleanProperty);\n    }\n    const tristateProperties = ['checked', 'pressed'];\n    for (const tristateProperty of tristateProperties) {\n      if (!properties.has(tristateProperty)) {\n        continue;\n      }\n      const value = properties.get(tristateProperty);\n      node[tristateProperty] = value === 'mixed' ? 'mixed' : value === 'true' ? true : false;\n    }\n    const numericalProperties = ['level', 'valuemax', 'valuemin'];\n    const getNumericalPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const numericalProperty of numericalProperties) {\n      if (!properties.has(numericalProperty)) {\n        continue;\n      }\n      node[numericalProperty] = getNumericalPropertyValue(numericalProperty);\n    }\n    const tokenProperties = ['autocomplete', 'haspopup', 'invalid', 'orientation'];\n    const getTokenPropertyValue = key => {\n      return properties.get(key);\n    };\n    for (const tokenProperty of tokenProperties) {\n      const value = getTokenPropertyValue(tokenProperty);\n      if (!value || value === 'false') {\n        continue;\n      }\n      node[tokenProperty] = getTokenPropertyValue(tokenProperty);\n    }\n    return node;\n  }\n  static createTree(payloads) {\n    const nodeById = new Map();\n    for (const payload of payloads) {\n      nodeById.set(payload.nodeId, new AXNode(payload));\n    }\n    for (const node of nodeById.values()) {\n      for (const childId of node.payload.childIds || []) {\n        const child = nodeById.get(childId);\n        if (child) {\n          node.children.push(child);\n        }\n      }\n    }\n    return nodeById.values().next().value;\n  }\n}\nfunction _isPlainTextField() {\n  if (_classPrivateFieldGet(_richlyEditable, this)) {\n    return false;\n  }\n  if (_classPrivateFieldGet(_editable, this)) {\n    return true;\n  }\n  return _classPrivateFieldGet(_role, this) === 'textbox' || _classPrivateFieldGet(_role, this) === 'searchbox';\n}\nfunction _isTextOnlyObject() {\n  const role = _classPrivateFieldGet(_role, this);\n  return role === 'LineBreak' || role === 'text' || role === 'InlineTextBox' || role === 'StaticText';\n}\nfunction _hasFocusableChild() {\n  if (_classPrivateFieldGet(_cachedHasFocusableChild, this) === undefined) {\n    _classPrivateFieldSet(_cachedHasFocusableChild, this, false);\n    for (const child of this.children) {\n      if (_classPrivateFieldGet(_focusable, child) || _assertClassBrand(_AXNode_brand, child, _hasFocusableChild).call(child)) {\n        _classPrivateFieldSet(_cachedHasFocusableChild, this, true);\n        break;\n      }\n    }\n  }\n  return _classPrivateFieldGet(_cachedHasFocusableChild, this);\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","require","default","_defineProperty","_assertClassBrand","_classPrivateFieldInitSpec","_classPrivateFieldGet","_classPrivateFieldSet","_client","WeakMap","Accessibility","constructor","client","updateClient","snapshot","options","interestingOnly","root","nodes","send","backendNodeId","node","objectId","id","defaultRoot","AXNode","createTree","needle","find","payload","backendDOMNodeId","serializeTree","interestingNodes","Set","collectInterestingNodes","has","children","child","push","serializedNode","serialize","length","collection","insideControl","isInteresting","add","isLeafNode","isControl","exports","_richlyEditable","_editable","_focusable","_hidden","_name","_role","_ignored","_cachedHasFocusableChild","_AXNode_brand","WeakSet","name","value","role","ignored","property","properties","predicate","result","_isPlainTextField","call","_isTextOnlyObject","_hasFocusableChild","Map","set","toLowerCase","description","userStringProperties","getUserStringPropertyValue","key","get","userStringProperty","booleanProperties","getBooleanPropertyValue","booleanProperty","tristateProperties","tristateProperty","numericalProperties","getNumericalPropertyValue","numericalProperty","tokenProperties","getTokenPropertyValue","tokenProperty","payloads","nodeById","nodeId","values","childId","childIds","next","undefined"],"sources":["../../../../src/cdp/Accessibility.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}