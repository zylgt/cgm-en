{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable no-param-reassign */\nrequire(\"core-js/modules/es.array.push.js\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address4 = void 0;\nconst common = __importStar(require(\"./common\"));\nconst constants = __importStar(require(\"./v4/constants\"));\nconst address_error_1 = require(\"./address-error\");\nconst jsbn_1 = require(\"jsbn\");\nconst sprintf_js_1 = require(\"sprintf-js\");\n/**\n * Represents an IPv4 address\n * @class Address4\n * @param {string} address - An IPv4 address string\n */\nclass Address4 {\n  constructor(address) {\n    this.groups = constants.GROUPS;\n    this.parsedAddress = [];\n    this.parsedSubnet = '';\n    this.subnet = '/32';\n    this.subnetMask = 32;\n    this.v4 = true;\n    /**\n     * Returns true if the address is correct, false otherwise\n     * @memberof Address4\n     * @instance\n     * @returns {Boolean}\n     */\n    this.isCorrect = common.isCorrect(constants.BITS);\n    /**\n     * Returns true if the given address is in the subnet of the current address\n     * @memberof Address4\n     * @instance\n     * @returns {boolean}\n     */\n    this.isInSubnet = common.isInSubnet;\n    this.address = address;\n    const subnet = constants.RE_SUBNET_STRING.exec(address);\n    if (subnet) {\n      this.parsedSubnet = subnet[0].replace('/', '');\n      this.subnetMask = parseInt(this.parsedSubnet, 10);\n      this.subnet = `/${this.subnetMask}`;\n      if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n        throw new address_error_1.AddressError('Invalid subnet mask.');\n      }\n      address = address.replace(constants.RE_SUBNET_STRING, '');\n    }\n    this.addressMinusSuffix = address;\n    this.parsedAddress = this.parse(address);\n  }\n  static isValid(address) {\n    try {\n      // eslint-disable-next-line no-new\n      new Address4(address);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  /*\n   * Parses a v4 address\n   */\n  parse(address) {\n    const groups = address.split('.');\n    if (!address.match(constants.RE_ADDRESS)) {\n      throw new address_error_1.AddressError('Invalid IPv4 address.');\n    }\n    return groups;\n  }\n  /**\n   * Returns the correct form of an address\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n  correctForm() {\n    return this.parsedAddress.map(part => parseInt(part, 10)).join('.');\n  }\n  /**\n   * Converts a hex string to an IPv4 address object\n   * @memberof Address4\n   * @static\n   * @param {string} hex - a hex string to convert\n   * @returns {Address4}\n   */\n  static fromHex(hex) {\n    const padded = hex.replace(/:/g, '').padStart(8, '0');\n    const groups = [];\n    let i;\n    for (i = 0; i < 8; i += 2) {\n      const h = padded.slice(i, i + 2);\n      groups.push(parseInt(h, 16));\n    }\n    return new Address4(groups.join('.'));\n  }\n  /**\n   * Converts an integer into a IPv4 address object\n   * @memberof Address4\n   * @static\n   * @param {integer} integer - a number to convert\n   * @returns {Address4}\n   */\n  static fromInteger(integer) {\n    return Address4.fromHex(integer.toString(16));\n  }\n  /**\n   * Return an address from in-addr.arpa form\n   * @memberof Address4\n   * @static\n   * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address\n   * @returns {Adress4}\n   * @example\n   * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)\n   * address.correctForm(); // '192.0.2.42'\n   */\n  static fromArpa(arpaFormAddress) {\n    // remove ending \".in-addr.arpa.\" or just \".\"\n    const leader = arpaFormAddress.replace(/(\\.in-addr\\.arpa)?\\.$/, '');\n    const address = leader.split('.').reverse().join('.');\n    return new Address4(address);\n  }\n  /**\n   * Converts an IPv4 address object to a hex string\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n  toHex() {\n    return this.parsedAddress.map(part => (0, sprintf_js_1.sprintf)('%02x', parseInt(part, 10))).join(':');\n  }\n  /**\n   * Converts an IPv4 address object to an array of bytes\n   * @memberof Address4\n   * @instance\n   * @returns {Array}\n   */\n  toArray() {\n    return this.parsedAddress.map(part => parseInt(part, 10));\n  }\n  /**\n   * Converts an IPv4 address object to an IPv6 address group\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n  toGroup6() {\n    const output = [];\n    let i;\n    for (i = 0; i < constants.GROUPS; i += 2) {\n      const hex = (0, sprintf_js_1.sprintf)('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));\n      output.push((0, sprintf_js_1.sprintf)('%x', parseInt(hex, 16)));\n    }\n    return output.join(':');\n  }\n  /**\n   * Returns the address as a BigInteger\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n  bigInteger() {\n    return new jsbn_1.BigInteger(this.parsedAddress.map(n => (0, sprintf_js_1.sprintf)('%02x', parseInt(n, 10))).join(''), 16);\n  }\n  /**\n   * Helper function getting start address.\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n  _startAddress() {\n    return new jsbn_1.BigInteger(this.mask() + '0'.repeat(constants.BITS - this.subnetMask), 2);\n  }\n  /**\n   * The first address in the range given by this address' subnet.\n   * Often referred to as the Network Address.\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n  startAddress() {\n    return Address4.fromBigInteger(this._startAddress());\n  }\n  /**\n   * The first host address in the range given by this address's subnet ie\n   * the first address after the Network Address\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n  startAddressExclusive() {\n    const adjust = new jsbn_1.BigInteger('1');\n    return Address4.fromBigInteger(this._startAddress().add(adjust));\n  }\n  /**\n   * Helper function getting end address.\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n  _endAddress() {\n    return new jsbn_1.BigInteger(this.mask() + '1'.repeat(constants.BITS - this.subnetMask), 2);\n  }\n  /**\n   * The last address in the range given by this address' subnet\n   * Often referred to as the Broadcast\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n  endAddress() {\n    return Address4.fromBigInteger(this._endAddress());\n  }\n  /**\n   * The last host address in the range given by this address's subnet ie\n   * the last address prior to the Broadcast Address\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n  endAddressExclusive() {\n    const adjust = new jsbn_1.BigInteger('1');\n    return Address4.fromBigInteger(this._endAddress().subtract(adjust));\n  }\n  /**\n   * Converts a BigInteger to a v4 address object\n   * @memberof Address4\n   * @static\n   * @param {BigInteger} bigInteger - a BigInteger to convert\n   * @returns {Address4}\n   */\n  static fromBigInteger(bigInteger) {\n    return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n  }\n  /**\n   * Returns the first n bits of the address, defaulting to the\n   * subnet mask\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n  mask(mask) {\n    if (mask === undefined) {\n      mask = this.subnetMask;\n    }\n    return this.getBitsBase2(0, mask);\n  }\n  /**\n   * Returns the bits in the given range as a base-2 string\n   * @memberof Address4\n   * @instance\n   * @returns {string}\n   */\n  getBitsBase2(start, end) {\n    return this.binaryZeroPad().slice(start, end);\n  }\n  /**\n   * Return the reversed ip6.arpa form of the address\n   * @memberof Address4\n   * @param {Object} options\n   * @param {boolean} options.omitSuffix - omit the \"in-addr.arpa\" suffix\n   * @instance\n   * @returns {String}\n   */\n  reverseForm(options) {\n    if (!options) {\n      options = {};\n    }\n    const reversed = this.correctForm().split('.').reverse().join('.');\n    if (options.omitSuffix) {\n      return reversed;\n    }\n    return (0, sprintf_js_1.sprintf)('%s.in-addr.arpa.', reversed);\n  }\n  /**\n   * Returns true if the given address is a multicast address\n   * @memberof Address4\n   * @instance\n   * @returns {boolean}\n   */\n  isMulticast() {\n    return this.isInSubnet(new Address4('224.0.0.0/4'));\n  }\n  /**\n   * Returns a zero-padded base-2 string representation of the address\n   * @memberof Address4\n   * @instance\n   * @returns {string}\n   */\n  binaryZeroPad() {\n    return this.bigInteger().toString(2).padStart(constants.BITS, '0');\n  }\n  /**\n   * Groups an IPv4 address for inclusion at the end of an IPv6 address\n   * @returns {String}\n   */\n  groupForV6() {\n    const segments = this.parsedAddress;\n    return this.address.replace(constants.RE_ADDRESS, (0, sprintf_js_1.sprintf)('<span class=\"hover-group group-v4 group-6\">%s</span>.<span class=\"hover-group group-v4 group-7\">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));\n  }\n}\nexports.Address4 = Address4;","map":{"version":3,"names":["require","common","__importStar","constants","address_error_1","jsbn_1","sprintf_js_1","Address4","constructor","address","groups","GROUPS","parsedAddress","parsedSubnet","subnet","subnetMask","v4","isCorrect","BITS","isInSubnet","RE_SUBNET_STRING","exec","replace","parseInt","AddressError","addressMinusSuffix","parse","isValid","e","split","match","RE_ADDRESS","correctForm","map","part","join","fromHex","hex","padded","padStart","i","h","slice","push","fromInteger","integer","toString","fromArpa","arpaFormAddress","leader","reverse","toHex","sprintf","toArray","toGroup6","output","bigInteger","BigInteger","n","_startAddress","mask","repeat","startAddress","fromBigInteger","startAddressExclusive","adjust","add","_endAddress","endAddress","endAddressExclusive","subtract","undefined","getBitsBase2","start","end","binaryZeroPad","reverseForm","options","reversed","omitSuffix","isMulticast","groupForV6","segments","exports"],"sources":["../src/ipv4.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}