{"ast":null,"code":"'use strict';\n\nconst path = require('path');\nconst os = require('os');\nconst homedir = os.homedir();\nconst tmpdir = os.tmpdir();\nconst {\n  env\n} = process;\nconst macos = name => {\n  const library = path.join(homedir, 'Library');\n  return {\n    data: path.join(library, 'Application Support', name),\n    config: path.join(library, 'Preferences', name),\n    cache: path.join(library, 'Caches', name),\n    log: path.join(library, 'Logs', name),\n    temp: path.join(tmpdir, name)\n  };\n};\nconst windows = name => {\n  const appData = env.APPDATA || path.join(homedir, 'AppData', 'Roaming');\n  const localAppData = env.LOCALAPPDATA || path.join(homedir, 'AppData', 'Local');\n  return {\n    // Data/config/cache/log are invented by me as Windows isn't opinionated about this\n    data: path.join(localAppData, name, 'Data'),\n    config: path.join(appData, name, 'Config'),\n    cache: path.join(localAppData, name, 'Cache'),\n    log: path.join(localAppData, name, 'Log'),\n    temp: path.join(tmpdir, name)\n  };\n};\n\n// https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\nconst linux = name => {\n  const username = path.basename(homedir);\n  return {\n    data: path.join(env.XDG_DATA_HOME || path.join(homedir, '.local', 'share'), name),\n    config: path.join(env.XDG_CONFIG_HOME || path.join(homedir, '.config'), name),\n    cache: path.join(env.XDG_CACHE_HOME || path.join(homedir, '.cache'), name),\n    // https://wiki.debian.org/XDGBaseDirectorySpecification#state\n    log: path.join(env.XDG_STATE_HOME || path.join(homedir, '.local', 'state'), name),\n    temp: path.join(tmpdir, username, name)\n  };\n};\nconst envPaths = (name, options) => {\n  if (typeof name !== 'string') {\n    throw new TypeError(`Expected string, got ${typeof name}`);\n  }\n  options = Object.assign({\n    suffix: 'nodejs'\n  }, options);\n  if (options.suffix) {\n    // Add suffix to prevent possible conflict with native apps\n    name += `-${options.suffix}`;\n  }\n  if (process.platform === 'darwin') {\n    return macos(name);\n  }\n  if (process.platform === 'win32') {\n    return windows(name);\n  }\n  return linux(name);\n};\nmodule.exports = envPaths;\n// TODO: Remove this for the next major release\nmodule.exports.default = envPaths;","map":{"version":3,"names":["path","require","os","homedir","tmpdir","env","process","macos","name","library","join","data","config","cache","log","temp","windows","appData","APPDATA","localAppData","LOCALAPPDATA","linux","username","basename","XDG_DATA_HOME","XDG_CONFIG_HOME","XDG_CACHE_HOME","XDG_STATE_HOME","envPaths","options","TypeError","Object","assign","suffix","platform","module","exports","default"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/env-paths/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\nconst os = require('os');\n\nconst homedir = os.homedir();\nconst tmpdir = os.tmpdir();\nconst {env} = process;\n\nconst macos = name => {\n\tconst library = path.join(homedir, 'Library');\n\n\treturn {\n\t\tdata: path.join(library, 'Application Support', name),\n\t\tconfig: path.join(library, 'Preferences', name),\n\t\tcache: path.join(library, 'Caches', name),\n\t\tlog: path.join(library, 'Logs', name),\n\t\ttemp: path.join(tmpdir, name)\n\t};\n};\n\nconst windows = name => {\n\tconst appData = env.APPDATA || path.join(homedir, 'AppData', 'Roaming');\n\tconst localAppData = env.LOCALAPPDATA || path.join(homedir, 'AppData', 'Local');\n\n\treturn {\n\t\t// Data/config/cache/log are invented by me as Windows isn't opinionated about this\n\t\tdata: path.join(localAppData, name, 'Data'),\n\t\tconfig: path.join(appData, name, 'Config'),\n\t\tcache: path.join(localAppData, name, 'Cache'),\n\t\tlog: path.join(localAppData, name, 'Log'),\n\t\ttemp: path.join(tmpdir, name)\n\t};\n};\n\n// https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\nconst linux = name => {\n\tconst username = path.basename(homedir);\n\n\treturn {\n\t\tdata: path.join(env.XDG_DATA_HOME || path.join(homedir, '.local', 'share'), name),\n\t\tconfig: path.join(env.XDG_CONFIG_HOME || path.join(homedir, '.config'), name),\n\t\tcache: path.join(env.XDG_CACHE_HOME || path.join(homedir, '.cache'), name),\n\t\t// https://wiki.debian.org/XDGBaseDirectorySpecification#state\n\t\tlog: path.join(env.XDG_STATE_HOME || path.join(homedir, '.local', 'state'), name),\n\t\ttemp: path.join(tmpdir, username, name)\n\t};\n};\n\nconst envPaths = (name, options) => {\n\tif (typeof name !== 'string') {\n\t\tthrow new TypeError(`Expected string, got ${typeof name}`);\n\t}\n\n\toptions = Object.assign({suffix: 'nodejs'}, options);\n\n\tif (options.suffix) {\n\t\t// Add suffix to prevent possible conflict with native apps\n\t\tname += `-${options.suffix}`;\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\treturn macos(name);\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn windows(name);\n\t}\n\n\treturn linux(name);\n};\n\nmodule.exports = envPaths;\n// TODO: Remove this for the next major release\nmodule.exports.default = envPaths;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}