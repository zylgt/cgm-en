{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _assertClassBrand from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _defineProperty from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { assert } from '../util/assert.js';\nimport { Deferred } from '../util/Deferred.js';\n/**\n * Device in a request prompt.\n *\n * @public\n */\nexport class DeviceRequestPromptDevice {\n  /**\n   * @internal\n   */\n  constructor(id, name) {\n    /**\n     * Device id during a prompt.\n     */\n    _defineProperty(this, \"id\", void 0);\n    /**\n     * Device name as it appears in a prompt.\n     */\n    _defineProperty(this, \"name\", void 0);\n    this.id = id;\n    this.name = name;\n  }\n}\n/**\n * Device request prompts let you respond to the page requesting for a device\n * through an API like WebBluetooth.\n *\n * @remarks\n * `DeviceRequestPrompt` instances are returned via the\n * {@link Page.waitForDevicePrompt} method.\n *\n * @example\n *\n * ```ts\n * const [deviceRequest] = Promise.all([\n *   page.waitForDevicePrompt(),\n *   page.click('#connect-bluetooth'),\n * ]);\n * await devicePrompt.select(\n *   await devicePrompt.waitForDevice(({name}) => name.includes('My Device'))\n * );\n * ```\n *\n * @public\n */\nvar _client = /*#__PURE__*/new WeakMap();\nvar _timeoutSettings = /*#__PURE__*/new WeakMap();\nvar _id = /*#__PURE__*/new WeakMap();\nvar _handled = /*#__PURE__*/new WeakMap();\nvar _updateDevicesHandle = /*#__PURE__*/new WeakMap();\nvar _waitForDevicePromises = /*#__PURE__*/new WeakMap();\nvar _DeviceRequestPrompt_brand = /*#__PURE__*/new WeakSet();\nexport class DeviceRequestPrompt {\n  /**\n   * @internal\n   */\n  constructor(client, timeoutSettings, firstEvent) {\n    _classPrivateMethodInitSpec(this, _DeviceRequestPrompt_brand);\n    _classPrivateFieldInitSpec(this, _client, void 0);\n    _classPrivateFieldInitSpec(this, _timeoutSettings, void 0);\n    _classPrivateFieldInitSpec(this, _id, void 0);\n    _classPrivateFieldInitSpec(this, _handled, false);\n    _classPrivateFieldInitSpec(this, _updateDevicesHandle, _assertClassBrand(_DeviceRequestPrompt_brand, this, _updateDevices).bind(this));\n    _classPrivateFieldInitSpec(this, _waitForDevicePromises, new Set());\n    /**\n     * Current list of selectable devices.\n     */\n    _defineProperty(this, \"devices\", []);\n    _classPrivateFieldSet(_client, this, client);\n    _classPrivateFieldSet(_timeoutSettings, this, timeoutSettings);\n    _classPrivateFieldSet(_id, this, firstEvent.id);\n    _classPrivateFieldGet(_client, this).on('DeviceAccess.deviceRequestPrompted', _classPrivateFieldGet(_updateDevicesHandle, this));\n    _classPrivateFieldGet(_client, this).on('Target.detachedFromTarget', () => {\n      _classPrivateFieldSet(_client, this, null);\n    });\n    _assertClassBrand(_DeviceRequestPrompt_brand, this, _updateDevices).call(this, firstEvent);\n  }\n  /**\n   * Resolve to the first device in the prompt matching a filter.\n   */\n  async waitForDevice(filter, options = {}) {\n    for (const device of this.devices) {\n      if (filter(device)) {\n        return device;\n      }\n    }\n    const {\n      timeout = _classPrivateFieldGet(_timeoutSettings, this).timeout()\n    } = options;\n    const deferred = Deferred.create({\n      message: `Waiting for \\`DeviceRequestPromptDevice\\` failed: ${timeout}ms exceeded`,\n      timeout\n    });\n    const handle = {\n      filter,\n      promise: deferred\n    };\n    _classPrivateFieldGet(_waitForDevicePromises, this).add(handle);\n    try {\n      return await deferred.valueOrThrow();\n    } finally {\n      _classPrivateFieldGet(_waitForDevicePromises, this).delete(handle);\n    }\n  }\n  /**\n   * Select a device in the prompt's list.\n   */\n  async select(device) {\n    assert(_classPrivateFieldGet(_client, this) !== null, 'Cannot select device through detached session!');\n    assert(this.devices.includes(device), 'Cannot select unknown device!');\n    assert(!_classPrivateFieldGet(_handled, this), 'Cannot select DeviceRequestPrompt which is already handled!');\n    _classPrivateFieldGet(_client, this).off('DeviceAccess.deviceRequestPrompted', _classPrivateFieldGet(_updateDevicesHandle, this));\n    _classPrivateFieldSet(_handled, this, true);\n    return await _classPrivateFieldGet(_client, this).send('DeviceAccess.selectPrompt', {\n      id: _classPrivateFieldGet(_id, this),\n      deviceId: device.id\n    });\n  }\n  /**\n   * Cancel the prompt.\n   */\n  async cancel() {\n    assert(_classPrivateFieldGet(_client, this) !== null, 'Cannot cancel prompt through detached session!');\n    assert(!_classPrivateFieldGet(_handled, this), 'Cannot cancel DeviceRequestPrompt which is already handled!');\n    _classPrivateFieldGet(_client, this).off('DeviceAccess.deviceRequestPrompted', _classPrivateFieldGet(_updateDevicesHandle, this));\n    _classPrivateFieldSet(_handled, this, true);\n    return await _classPrivateFieldGet(_client, this).send('DeviceAccess.cancelPrompt', {\n      id: _classPrivateFieldGet(_id, this)\n    });\n  }\n}\n/**\n * @internal\n */\nfunction _updateDevices(event) {\n  if (event.id !== _classPrivateFieldGet(_id, this)) {\n    return;\n  }\n  for (const rawDevice of event.devices) {\n    if (this.devices.some(device => {\n      return device.id === rawDevice.id;\n    })) {\n      continue;\n    }\n    const newDevice = new DeviceRequestPromptDevice(rawDevice.id, rawDevice.name);\n    this.devices.push(newDevice);\n    for (const waitForDevicePromise of _classPrivateFieldGet(_waitForDevicePromises, this)) {\n      if (waitForDevicePromise.filter(newDevice)) {\n        waitForDevicePromise.promise.resolve(newDevice);\n      }\n    }\n  }\n}\nvar _client2 = /*#__PURE__*/new WeakMap();\nvar _timeoutSettings2 = /*#__PURE__*/new WeakMap();\nvar _deviceRequestPrompDeferreds = /*#__PURE__*/new WeakMap();\nvar _DeviceRequestPromptManager_brand = /*#__PURE__*/new WeakSet();\nexport class DeviceRequestPromptManager {\n  /**\n   * @internal\n   */\n  constructor(client, timeoutSettings) {\n    /**\n     * @internal\n     */\n    _classPrivateMethodInitSpec(this, _DeviceRequestPromptManager_brand);\n    _classPrivateFieldInitSpec(this, _client2, void 0);\n    _classPrivateFieldInitSpec(this, _timeoutSettings2, void 0);\n    _classPrivateFieldInitSpec(this, _deviceRequestPrompDeferreds, new Set());\n    _classPrivateFieldSet(_client2, this, client);\n    _classPrivateFieldSet(_timeoutSettings2, this, timeoutSettings);\n    _classPrivateFieldGet(_client2, this).on('DeviceAccess.deviceRequestPrompted', event => {\n      _assertClassBrand(_DeviceRequestPromptManager_brand, this, _onDeviceRequestPrompted).call(this, event);\n    });\n    _classPrivateFieldGet(_client2, this).on('Target.detachedFromTarget', () => {\n      _classPrivateFieldSet(_client2, this, null);\n    });\n  }\n  /**\n   * Wait for device prompt created by an action like calling WebBluetooth's\n   * requestDevice.\n   */\n  async waitForDevicePrompt(options = {}) {\n    assert(_classPrivateFieldGet(_client2, this) !== null, 'Cannot wait for device prompt through detached session!');\n    const needsEnable = _classPrivateFieldGet(_deviceRequestPrompDeferreds, this).size === 0;\n    let enablePromise;\n    if (needsEnable) {\n      enablePromise = _classPrivateFieldGet(_client2, this).send('DeviceAccess.enable');\n    }\n    const {\n      timeout = _classPrivateFieldGet(_timeoutSettings2, this).timeout()\n    } = options;\n    const deferred = Deferred.create({\n      message: `Waiting for \\`DeviceRequestPrompt\\` failed: ${timeout}ms exceeded`,\n      timeout\n    });\n    _classPrivateFieldGet(_deviceRequestPrompDeferreds, this).add(deferred);\n    try {\n      const [result] = await Promise.all([deferred.valueOrThrow(), enablePromise]);\n      return result;\n    } finally {\n      _classPrivateFieldGet(_deviceRequestPrompDeferreds, this).delete(deferred);\n    }\n  }\n}\nfunction _onDeviceRequestPrompted(event) {\n  if (!_classPrivateFieldGet(_deviceRequestPrompDeferreds, this).size) {\n    return;\n  }\n  assert(_classPrivateFieldGet(_client2, this) !== null);\n  const devicePrompt = new DeviceRequestPrompt(_classPrivateFieldGet(_client2, this), _classPrivateFieldGet(_timeoutSettings2, this), event);\n  for (const promise of _classPrivateFieldGet(_deviceRequestPrompDeferreds, this)) {\n    promise.resolve(devicePrompt);\n  }\n  _classPrivateFieldGet(_deviceRequestPrompDeferreds, this).clear();\n}","map":{"version":3,"names":["assert","Deferred","DeviceRequestPromptDevice","constructor","id","name","_defineProperty","_client","WeakMap","_timeoutSettings","_id","_handled","_updateDevicesHandle","_waitForDevicePromises","_DeviceRequestPrompt_brand","WeakSet","DeviceRequestPrompt","client","timeoutSettings","firstEvent","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_assertClassBrand","_updateDevices","bind","Set","_classPrivateFieldSet","_classPrivateFieldGet","on","call","waitForDevice","filter","options","device","devices","timeout","deferred","create","message","handle","promise","add","valueOrThrow","delete","select","includes","off","send","deviceId","cancel","event","rawDevice","some","newDevice","push","waitForDevicePromise","resolve","_client2","_timeoutSettings2","_deviceRequestPrompDeferreds","_DeviceRequestPromptManager_brand","DeviceRequestPromptManager","_onDeviceRequestPrompted","waitForDevicePrompt","needsEnable","size","enablePromise","result","Promise","all","devicePrompt","clear"],"sources":["../../../../src/cdp/DeviceRequestPrompt.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}