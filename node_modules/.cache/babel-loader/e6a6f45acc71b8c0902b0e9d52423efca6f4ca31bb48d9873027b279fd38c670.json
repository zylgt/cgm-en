{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Socket from '@/utils/webSocket';\nimport store from '@/store';\nimport { lastIndex } from '@/api/dataApi';\n\n// 处理数据\nexport function handelMessage(res) {\n  switch (res.path) {\n    case 'getAppInfo':\n      //  判断是否有更新，没有更新进行下一步\n      Socket.getReaderList();\n      break;\n    case 'getReaderDevices':\n      //获取redaer列表，如果只有一台直接连接，否则选取连接\n      store.dispatch('setDeviceList', res.data.devices);\n      store.dispatch('setUpStep', 3);\n      if (res.data.devices.length == 1) {\n        store.dispatch('setReaderConnect', 1);\n        Socket.connectReader(res.data.devices[0]);\n      }\n      break;\n    case 'connectReaderDevice':\n      //连接reader\n      store.dispatch('setReaderConnect', 2);\n      Socket.getReaderInfo();\n      break;\n    case 'getReaderDeviceInfo':\n      //获取reader信息，判断是否需要同步时间和目标范围\n      // 判断reader时间与当前时间差值为1000，则同步时间\n      let timestamp = Math.floor(Date.now() / 1000);\n      if (Math.abs(timestamp - res.data.currentTime) >= 1000) {\n        Socket.setTime({\n          timestamp: timestamp\n        });\n      }\n      Socket.cgmList(); // 同时获取绑定的发射器列表\n      break;\n    case 'getBindDevices':\n      //获取reader绑定的发射器列表\n      store.dispatch('setCgmList', res.data.devices);\n      getLimit(res.data.devices);\n      // if(res.data.devices.length>0){\n      //     getBgData(res.data.devices[0].mac,50,getLastIndex(res.data.devices[0].mac)==-1?res.data.devices[0].firstIndex:getLastIndex(res.data.devices[0].mac)+1,res.data.devices[0].lastIndex)\n      //     store.dispatch('setUpStep',4)\n      // }\n      break;\n    case 'getGlucoseData':\n      //获取的血糖数据\n      upLoad(res.data);\n      break;\n  }\n}\n\n/**\n * 从服务器获取最后一条数据索引\n */\n\nasync function getLastIndex(mac) {\n  let data = await lastIndex({\n    'device_mac': mac\n  }).then(response => {\n    if (response.code == 1000) {\n      return response.data;\n    } else {\n      this.$message({\n        type: 'error',\n        message: response.msg\n      });\n    }\n  }).catch(res => {\n    this.$message({\n      type: 'error',\n      message: res.message\n    });\n  });\n  console.log(data);\n  return data;\n}\n\n/**\n * 上传血糖数据总条数\n * \n * @param {*} devices  reader绑定的发射器列表\n */\n\nfunction getLimit(device) {\n  let limit = 0;\n  device.forEach(item => {\n    limit += item.lastIndex - (getLastIndex(item.mac) == -1 ? item.firstIndex : getLastIndex(item.mac));\n  });\n  store.dispatch('seUpLimit', limit);\n}\n\n/**\n * 获取数据\n */\nlet cgm_index = 0;\nlet upProgess = 0;\nfunction getBgData(mac, size, start_index, last_index) {\n  if (start_index <= last_index) {\n    Socket.queryGlucoseData({\n      \"mac\": mac,\n      \"size\": size,\n      \"startIndex\": start_index\n    });\n  } else {\n    console.log('传完了');\n    // upProgess += last_index- start_index//页面进度不需要判断当前mac是否完成\n    // store.dispatch('setUpProgess',upProgess)\n  }\n}\n/**\n * 上传数据\n */\n\nfunction upLoad(data) {\n  let datas = [];\n  data.values.forEach(item => {\n    datas.push({\n      \"data_index\": item.index,\n      \"data_ts\": item.timestamp,\n      \"timezone\": 8,\n      \"value\": item.value,\n      \"current\": item.current,\n      \"temperature\": item.temperature\n    });\n  });\n  let params = {\n    device_mac: data.mac,\n    start_index: data.startIndex,\n    end_index: data.values[data.values.length - 1].index,\n    start_ts: data.values[0].timestamp,\n    end_ts: data.values[data.values.length - 1].timestamp,\n    data_source: 1,\n    datas: datas\n  };\n  let device = store.getters.cgmList;\n  // 模拟服务器上传成功时间\n  setTimeout(function () {\n    // 判断当前mac是否上传完成\n    let last_index = device[cgm_index].lastIndex;\n    let start_index;\n    if (device.length > 1 && last_index == params.end_index && cgm_index != device.length - 1) {\n      cgm_index++;\n      start_index = getLastIndex(device[cgm_index].mac) + 1;\n    } else {\n      start_index = data.values[data.values.length - 1].index + 1;\n    }\n    upProgess += data.values.length; //页面进度不需要判断当前mac是否完成\n    store.dispatch('setUpProgess', upProgess);\n    getBgData(device[cgm_index].mac, 50, start_index, last_index);\n  }, 100);\n}","map":{"version":3,"names":["Socket","store","lastIndex","handelMessage","res","path","getReaderList","dispatch","data","devices","length","connectReader","getReaderInfo","timestamp","Math","floor","Date","now","abs","currentTime","setTime","cgmList","getLimit","upLoad","getLastIndex","mac","then","response","code","$message","type","message","msg","catch","console","log","device","limit","forEach","item","firstIndex","cgm_index","upProgess","getBgData","size","start_index","last_index","queryGlucoseData","datas","values","push","index","value","current","temperature","params","device_mac","startIndex","end_index","start_ts","end_ts","data_source","getters","setTimeout"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/socketMessage.js"],"sourcesContent":["import Socket from '@/utils/webSocket'\nimport store from '@/store'\nimport {lastIndex} from '@/api/dataApi'\n\n// 处理数据\nexport function handelMessage (res) {\n    switch(res.path){\n        case 'getAppInfo':\n            //  判断是否有更新，没有更新进行下一步\n            Socket.getReaderList()\n            break;\n        case 'getReaderDevices': //获取redaer列表，如果只有一台直接连接，否则选取连接\n            store.dispatch('setDeviceList',res.data.devices)\n            store.dispatch('setUpStep',3)\n            if(res.data.devices.length==1){\n                store.dispatch('setReaderConnect',1)\n                Socket.connectReader(res.data.devices[0])\n            }\n            break;\n        case 'connectReaderDevice': //连接reader\n            store.dispatch('setReaderConnect',2)\n            Socket.getReaderInfo()\n            break;\n        case 'getReaderDeviceInfo': //获取reader信息，判断是否需要同步时间和目标范围\n            // 判断reader时间与当前时间差值为1000，则同步时间\n            let timestamp = Math.floor(Date.now() / 1000)\n            if( Math.abs(timestamp-res.data.currentTime)>=1000){\n                Socket.setTime({timestamp:timestamp})\n            }\n            Socket.cgmList() // 同时获取绑定的发射器列表\n            break;\n        case 'getBindDevices': //获取reader绑定的发射器列表\n            store.dispatch('setCgmList',res.data.devices)\n            getLimit(res.data.devices)\n            // if(res.data.devices.length>0){\n            //     getBgData(res.data.devices[0].mac,50,getLastIndex(res.data.devices[0].mac)==-1?res.data.devices[0].firstIndex:getLastIndex(res.data.devices[0].mac)+1,res.data.devices[0].lastIndex)\n            //     store.dispatch('setUpStep',4)\n            // }\n            break;\n        case 'getGlucoseData': //获取的血糖数据\n            upLoad(res.data)\n            break;\n    }\n}\n\n\n/**\n * 从服务器获取最后一条数据索引\n */\n\n async function getLastIndex(mac){\n    let data = await lastIndex({'device_mac':mac}).then(response => {\n        if(response.code == 1000){\n           return response.data\n        }else{\n            this.$message({\n                type: 'error',\n                message: response.msg\n            });\n        }\n    }).catch((res) => {\n        this.$message({\n            type: 'error',\n            message: res.message\n        });\n    })\n    console.log(data)\n    return data\n}\n\n/**\n * 上传血糖数据总条数\n * \n * @param {*} devices  reader绑定的发射器列表\n */\n\n function getLimit(device){\n    let limit = 0\n    device.forEach(item=>{\n        limit +=item.lastIndex -( getLastIndex(item.mac)==-1?item.firstIndex:getLastIndex(item.mac))\n    })\n    store.dispatch('seUpLimit',limit)\n}\n\n\n\n/**\n * 获取数据\n */\n let cgm_index = 0 \n let upProgess = 0\n\nfunction getBgData(mac,size,start_index,last_index){\n    if(start_index<=last_index){\n        Socket.queryGlucoseData({\"mac\":mac,\"size\":size,\"startIndex\":start_index})\n    }else{\n        console.log('传完了')\n        // upProgess += last_index- start_index//页面进度不需要判断当前mac是否完成\n        // store.dispatch('setUpProgess',upProgess)\n    }\n}\n/**\n * 上传数据\n */\n\n\nfunction upLoad(data){\n    let datas  = []\n    data.values.forEach(item=>{\n        datas.push({\n           \"data_index\":item.index,\n           \"data_ts\":item.timestamp,\n           \"timezone\":8,\n           \"value\":item.value,\n           \"current\":item.current,\n           \"temperature\":item.temperature,\n        })\n    })\n    let params = {\n        device_mac:data.mac,\n        start_index:data.startIndex,\n        end_index:data.values[data.values.length-1].index,\n        start_ts:data.values[0].timestamp,\n        end_ts:data.values[data.values.length-1].timestamp,\n        data_source:1,\n        datas:datas\n    }\n    let device = store.getters.cgmList\n    // 模拟服务器上传成功时间\n    setTimeout(function(){\n        // 判断当前mac是否上传完成\n        let last_index = device[cgm_index].lastIndex\n        let start_index\n        if(device.length>1&&last_index==params.end_index&&cgm_index!=device.length-1){\n            cgm_index++\n            start_index = getLastIndex(device[cgm_index].mac)+1\n        }else{\n            start_index = data.values[data.values.length-1].index + 1\n        }\n        upProgess += data.values.length //页面进度不需要判断当前mac是否完成\n        store.dispatch('setUpProgess',upProgess)\n        getBgData(device[cgm_index].mac,50,start_index,last_index)\n    },100)\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}