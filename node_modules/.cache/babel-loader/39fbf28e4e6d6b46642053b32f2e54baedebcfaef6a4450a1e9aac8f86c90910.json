{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { create, typeList, updata, configList } from '@/api/api';\nimport Enumerable from 'linq';\nimport { formatDate } from '@/utils/formatTime';\nimport Sortable from 'sortablejs';\nexport default {\n  data() {\n    return {\n      formData: {\n        order: '',\n        item_name: ''\n      },\n      formRules: {\n        order: [{\n          required: true,\n          trigger: \"blur\",\n          message: \"请填写顺序号\"\n        }],\n        item_name: [{\n          required: true,\n          trigger: \"blur\",\n          message: \" 请填写配置项名称\"\n        }]\n      },\n      loading: false,\n      //添加配置项loading\n      listLoading: true,\n      list: [],\n      configList: [],\n      addType: false,\n      //弹窗是否显示\n      dialogTitle: '',\n      //弹窗标题\n      editType: 1,\n      //弹窗是1添加2修改\n      config_key: ''\n    };\n  },\n  created() {\n    this.getConfigList();\n  },\n  mounted() {\n    const el = document.querySelector('.tables .el-table__body-wrapper  table tbody');\n    let that = this;\n    Sortable.create(el, {\n      animation: 150,\n      ghostClass: 'blue-background-class',\n      onEnd: function ( /**Event*/evt) {\n        let arr = [];\n        that.list.forEach(item => {\n          arr.push(item.item_key);\n        });\n        console.log(arr);\n        let new_arr = arr.slice(evt.oldIndex);\n        console.log(arr);\n        new_arr.splice(evt.oldIndex, 0, arr[evt.newIndex]);\n        console.log(new_arr);\n        // arr.splice(evt.newIndex,0,that.list[evt.oldIndex])\n        // console.log(arr)\n        // let newIndex = evt.newIndex  // 排序后的索引位置\n        // let oldIndex = evt.oldIndex  // 排序前的索引位置\n        // var itemEl = evt.item;  // 拖拽 HTMLElement\n        // evt.to;    // 目标表\n        // evt.from;  // 上一个列表\n        // evt.oldIndex;  // 元素在旧父级中的旧索引\n        // evt.newIndex;  // 元素在新父级中的新索引\n        // evt.clone // 克隆元件\n        // evt.pullMode;  // 当项目在另一个可排序表中时：`“clone”`如果克隆，`true`如果移动\n      }\n    });\n  },\n  methods: {\n    formatTime(row) {\n      return formatDate(new Date(row.create_ts * 1000), \"YYYY-mm-dd HH:MM:SS\");\n    },\n    formatUpTime(row) {\n      return formatDate(new Date(row.update_ts * 1000), \"YYYY-mm-dd HH:MM:SS\");\n    },\n    // 获取配置项列表\n    getConfigList() {\n      configList().then(response => {\n        if (response.code == 1000) {\n          this.configList = response.data;\n          this.getInfos(response.data[0].config_key);\n        } else {\n          this.$message({\n            type: 'error',\n            message: response.msg\n          });\n        }\n      }).catch(res => {\n        this.$message({\n          type: 'error',\n          message: res.message\n        });\n      });\n    },\n    // 根据配置key获取配置详情\n    getInfos(config_key) {\n      this.listLoading = true;\n      this.config_key = config_key;\n      typeList({\n        config_key: config_key\n      }).then(response => {\n        this.listLoading = false;\n        if (response.code == 1000) {\n          this.list = response.data;\n        } else {\n          this.$message({\n            type: 'error',\n            message: response.msg\n          });\n        }\n      }).catch(res => {\n        this.$message({\n          type: 'error',\n          message: res.message\n        });\n      });\n    },\n    // 添加配置项\n    addTypes() {\n      this.$refs.formData.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          create(this.formData).then(response => {\n            this.loading = false;\n            if (response.code == 1000) {\n              this.addType = false;\n              this.$message({\n                message: '添加成功',\n                type: 'success'\n              });\n              this.getInfos(this.config_key);\n            } else {\n              this.$message({\n                type: 'error',\n                message: response.msg\n              });\n            }\n          }).catch(res => {\n            this.$message({\n              type: 'error',\n              message: res.message\n            });\n          });\n        }\n      });\n    },\n    // 修改配置项\n    editTypes() {\n      this.$refs.formData.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          updata(this.formData).then(response => {\n            this.loading = false;\n            if (response.code == 1000) {\n              this.addType = false;\n              this.$message({\n                message: '修改成功',\n                type: 'success'\n              });\n              this.getInfos(this.config_key);\n            } else {\n              this.$message({\n                type: 'error',\n                message: response.msg\n              });\n            }\n          }).catch(res => {\n            this.$message({\n              type: 'error',\n              message: res.message\n            });\n          });\n        }\n      });\n    },\n    // 切换类型\n    typeClick(tab) {\n      this.getInfos(tab.name);\n    },\n    // 新增弹窗\n    addDialog() {\n      this.addType = true;\n      this.dialogTitle = '添加配置项';\n      this.editType = 1;\n      this.formData = {\n        item_name: '',\n        config_key: this.config_key,\n        order: Enumerable.from(this.list).max(item => item.order) + 1\n      };\n    },\n    // 修改弹窗\n    edit(info) {\n      this.addType = true;\n      this.dialogTitle = '修改配置项';\n      this.editType = 2;\n      this.formData = {\n        id: info.id,\n        item_name: info.item_name,\n        order: info.order,\n        is_active: info.is_active\n      };\n    }\n  }\n};","map":{"version":3,"names":["create","typeList","updata","configList","Enumerable","formatDate","Sortable","data","formData","order","item_name","formRules","required","trigger","message","loading","listLoading","list","addType","dialogTitle","editType","config_key","created","getConfigList","mounted","el","document","querySelector","that","animation","ghostClass","onEnd","evt","arr","forEach","item","push","item_key","console","log","new_arr","slice","oldIndex","splice","newIndex","methods","formatTime","row","Date","create_ts","formatUpTime","update_ts","then","response","code","getInfos","$message","type","msg","catch","res","addTypes","$refs","validate","valid","editTypes","typeClick","tab","name","addDialog","from","max","edit","info","id","is_active"],"sources":["src/views/healthConfig.vue"],"sourcesContent":["<template>\n    <div>\n        <el-tabs v-model=\"config_key\" @tab-click=\"typeClick\">\n            <el-tab-pane v-for='item in configList' :key='item.id' :label=\"item.config_name+' '+item.version\" :name='item.config_key'></el-tab-pane>\n        </el-tabs>\n        <!-- 查询和其他操作 -->\n        <div class=\"filter-container\">\n          <el-button class=\"filter-item\" type=\"primary\" icon=\"el-icon-plus\" @click='addDialog' >新增</el-button>\n        </div>\n        <!-- 查询结果 -->\n        <el-table class='tables' row-key=\"id\" v-loading=\"listLoading\" :data=\"list\" header-row-class-name='headerBg' element-loading-text=\"正在查询中。。。\" border fit highlight-current-row  >\n            <el-table-column align=\"center\" label=\"主键\" prop=\"item_key\" />\n            <el-table-column align=\"center\" label=\"顺序号\" prop=\"order\"/>\n            <el-table-column align=\"center\" label=\"内容\" prop=\"item_name\"/>\n            <el-table-column align=\"center\" label=\"是否展示\" >\n                <template  slot-scope=\"scope\">\n                   {{scope.row.is_active==0?'不展示':'展示'}}\n                </template>\n            </el-table-column>\n            <el-table-column align=\"center\" label=\"创建时间\" :formatter='formatTime' />\n            <el-table-column align=\"center\" label=\"更新时间\" :formatter='formatUpTime' />\n            <el-table-column align=\"center\" label=\"操作\" >\n                <template  slot-scope=\"scope\">\n                    <div class='flex table-handel'>\n                        <el-button type=\"text\"  style='margin:0;' class=\"text-info\" @click='edit(scope.row)' >修改</el-button>\n                    </div>\n                </template>\n            </el-table-column>\n        </el-table>\n        <!-- 弹窗 -->\n        <el-dialog :visible.sync=\"addType\" :title=\"dialogTitle\" border width=\"50%\">\n            <el-form ref=\"formData\"  label-width=\"120px\" label-position=\"right\" :model=\"formData\" :rules='formRules'>\n               \n                <el-form-item label=\"顺序号\"  prop=\"order\">\n                    <el-input-number v-model=\"formData.order\"  :min=\"1\" :max=\"100\"></el-input-number>\n                </el-form-item>\n                 <el-form-item label=\"配置项名称\"  prop=\"item_name\">\n                    <el-input v-model=\"formData.item_name\" />\n                </el-form-item>\n                 <el-form-item label=\"是否在页面展示\"  prop=\"is_active\" v-if='editType==2' >\n                    <el-switch v-model=\"formData.is_active\" :active-value=\"1\"\n    :inactive-value=\"0\"></el-switch>\n                </el-form-item>\n                <div class='flex record-btn'  >\n                    <el-button :loading=\"loading\" type=\"primary\" @click=\"addTypes\" v-if='editType==1' >确认</el-button>\n                    <el-button :loading=\"loading\" type=\"primary\" @click=\"editTypes\" v-if='editType==2'>确认</el-button>\n                    <el-button  @click=\"addType = false\">取消</el-button>\n                </div>\n            </el-form>\n        </el-dialog>\n    </div>\n</template>\n<script>\nimport {create,typeList,updata,configList} from '@/api/api'\nimport Enumerable from 'linq';\nimport {formatDate} from '@/utils/formatTime'\nimport Sortable from 'sortablejs'\nexport default {\n    data(){\n        return{\n            formData:{\n                order:'',\n                item_name:''\n            },\n            formRules:{\n                order: [{ required: true, trigger: \"blur\", message: \"请填写顺序号\" }],\n                item_name: [{ required: true, trigger: \"blur\", message: \" 请填写配置项名称\" }]\n            },\n            loading:false, //添加配置项loading\n            listLoading:true,\n            list:[],\n            configList:[],\n            addType:false,  //弹窗是否显示\n            dialogTitle:'', //弹窗标题\n            editType:1,//弹窗是1添加2修改\n            config_key:'',\n        }\n    },\n    created(){\n        this.getConfigList()\n    },\n    mounted(){\n        const el = document.querySelector('.tables .el-table__body-wrapper  table tbody')\n        let that = this\n        Sortable.create(el, {\n            animation: 150,\n            ghostClass: 'blue-background-class',\n            onEnd: function (/**Event*/evt) {\n                let arr = []\n                that.list.forEach(item=>{\n                    arr.push(item.item_key)\n                })\n                console.log(arr)\n                let new_arr = arr.slice(evt.oldIndex)\n                console.log(arr)\n                new_arr.splice(evt.oldIndex,0,arr[evt.newIndex])\n                console.log(new_arr)\n                // arr.splice(evt.newIndex,0,that.list[evt.oldIndex])\n                // console.log(arr)\n                // let newIndex = evt.newIndex  // 排序后的索引位置\n                // let oldIndex = evt.oldIndex  // 排序前的索引位置\n                // var itemEl = evt.item;  // 拖拽 HTMLElement\n                // evt.to;    // 目标表\n                // evt.from;  // 上一个列表\n                // evt.oldIndex;  // 元素在旧父级中的旧索引\n                // evt.newIndex;  // 元素在新父级中的新索引\n                // evt.clone // 克隆元件\n                // evt.pullMode;  // 当项目在另一个可排序表中时：`“clone”`如果克隆，`true`如果移动\n            },\n        })\n    },\n    methods:{\n        formatTime(row){\n            return formatDate(new Date(row.create_ts*1000),\"YYYY-mm-dd HH:MM:SS\")\n        },\n        formatUpTime(row){\n            return formatDate(new Date(row.update_ts*1000),\"YYYY-mm-dd HH:MM:SS\")\n        },\n        // 获取配置项列表\n        getConfigList(){\n            configList().then(response => {\n                    if(response.code == 1000){\n                        this.configList = response.data\n                        this.getInfos(response.data[0].config_key)\n                    }else{\n                        this.$message({\n                            type: 'error',\n                            message: response.msg\n                        });\n                    }\n            }).catch((res) => {\n                    this.$message({\n                        type: 'error',\n                        message: res.message\n                    });\n            })\n        },\n        // 根据配置key获取配置详情\n        getInfos(config_key){\n            this.listLoading = true\n            this.config_key = config_key\n            typeList({config_key:config_key}).then(response => {\n                    this.listLoading = false\n                    if(response.code == 1000){\n                        this.list = response.data\n                    }else{\n                        this.$message({\n                            type: 'error',\n                            message: response.msg\n                        });\n                    }\n            }).catch((res) => {\n                    this.$message({\n                        type: 'error',\n                        message: res.message\n                    });\n            })\n        },\n        // 添加配置项\n        addTypes(){\n               this.$refs.formData.validate((valid) => {\n                    if(valid){\n                        this.loading = true\n                        create(this.formData).then(response => {\n                            this.loading=false\n\t\t\t\t\t\t\tif(response.code == 1000){\n\t\t\t\t\t\t\t\tthis.addType = false\n                                this.$message({\n                                    message: '添加成功',\n                                    type: 'success'\n                                });\n                                this.getInfos(this.config_key)\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tthis.$message({\n                                    type: 'error',\n                                    message: response.msg\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n                        }).catch((res) => {\n                                this.$message({\n                                    type: 'error',\n                                    message: res.message\n                                });\n                        })\n                    }\n               })\n        },\n        // 修改配置项\n        editTypes(){\n            this.$refs.formData.validate((valid) => {\n                    if(valid){\n                        this.loading = true\n                        updata(this.formData).then(response => {\n                            this.loading=false\n\t\t\t\t\t\t\tif(response.code == 1000){\n\t\t\t\t\t\t\t\tthis.addType = false\n                                this.$message({\n                                    message: '修改成功',\n                                    type: 'success'\n                                });\n                                this.getInfos(this.config_key)\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tthis.$message({\n                                    type: 'error',\n                                    message: response.msg\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n                        }).catch((res) => {\n                                this.$message({\n                                    type: 'error',\n                                    message: res.message\n                                });\n                        })\n                    }\n               })\n        },\n        // 切换类型\n        typeClick(tab){\n            this.getInfos(tab.name)\n        },\n        // 新增弹窗\n        addDialog(){\n            this.addType = true\n            this.dialogTitle = '添加配置项'\n            this.editType = 1\n            this.formData = {\n                item_name:'',\n                config_key:this.config_key,\n                order:Enumerable.from(this.list).max(item => item.order)+1\n            }\n        },\n        // 修改弹窗\n        edit(info){\n            this.addType = true\n            this.dialogTitle = '修改配置项'\n            this.editType = 2\n            this.formData = {\n                id:info.id,\n                item_name:info.item_name,\n                order:info.order,\n                is_active:info.is_active\n            }\n        }\n    }\n}\n</script>\n<style scoped>\n    .filter-container{\n        margin-bottom:20px;\n    }\n    .record-btn{\n        display: flex;\n        justify-content: flex-end;\n    }\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}