{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport \"core-js/modules/es.array.push.js\";\nvar _requestWillBeSentMap = /*#__PURE__*/new WeakMap();\nvar _requestPausedMap = /*#__PURE__*/new WeakMap();\nvar _httpRequestsMap = /*#__PURE__*/new WeakMap();\nvar _responseReceivedExtraInfoMap = /*#__PURE__*/new WeakMap();\nvar _queuedRedirectInfoMap = /*#__PURE__*/new WeakMap();\nvar _queuedEventGroupMap = /*#__PURE__*/new WeakMap();\n/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Helper class to track network events by request ID\n *\n * @internal\n */\nexport class NetworkEventManager {\n  constructor() {\n    /**\n     * There are four possible orders of events:\n     * A. `_onRequestWillBeSent`\n     * B. `_onRequestWillBeSent`, `_onRequestPaused`\n     * C. `_onRequestPaused`, `_onRequestWillBeSent`\n     * D. `_onRequestPaused`, `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestWillBeSent`, `_onRequestPaused`, `_onRequestPaused`\n     * (see crbug.com/1196004)\n     *\n     * For `_onRequest` we need the event from `_onRequestWillBeSent` and\n     * optionally the `interceptionId` from `_onRequestPaused`.\n     *\n     * If request interception is disabled, call `_onRequest` once per call to\n     * `_onRequestWillBeSent`.\n     * If request interception is enabled, call `_onRequest` once per call to\n     * `_onRequestPaused` (once per `interceptionId`).\n     *\n     * Events are stored to allow for subsequent events to call `_onRequest`.\n     *\n     * Note that (chains of) redirect requests have the same `requestId` (!) as\n     * the original request. We have to anticipate series of events like these:\n     * A. `_onRequestWillBeSent`,\n     * `_onRequestWillBeSent`, ...\n     * B. `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestWillBeSent`, `_onRequestPaused`, ...\n     * C. `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestPaused`, `_onRequestWillBeSent`, ...\n     * D. `_onRequestPaused`, `_onRequestWillBeSent`,\n     * `_onRequestPaused`, `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestWillBeSent`, `_onRequestPaused`, `_onRequestPaused`, ...\n     * (see crbug.com/1196004)\n     */\n    _classPrivateFieldInitSpec(this, _requestWillBeSentMap, new Map());\n    _classPrivateFieldInitSpec(this, _requestPausedMap, new Map());\n    _classPrivateFieldInitSpec(this, _httpRequestsMap, new Map());\n    /*\n     * The below maps are used to reconcile Network.responseReceivedExtraInfo\n     * events with their corresponding request. Each response and redirect\n     * response gets an ExtraInfo event, and we don't know which will come first.\n     * This means that we have to store a Response or an ExtraInfo for each\n     * response, and emit the event when we get both of them. In addition, to\n     * handle redirects, we have to make them Arrays to represent the chain of\n     * events.\n     */\n    _classPrivateFieldInitSpec(this, _responseReceivedExtraInfoMap, new Map());\n    _classPrivateFieldInitSpec(this, _queuedRedirectInfoMap, new Map());\n    _classPrivateFieldInitSpec(this, _queuedEventGroupMap, new Map());\n  }\n  forget(networkRequestId) {\n    _classPrivateFieldGet(_requestWillBeSentMap, this).delete(networkRequestId);\n    _classPrivateFieldGet(_requestPausedMap, this).delete(networkRequestId);\n    _classPrivateFieldGet(_queuedEventGroupMap, this).delete(networkRequestId);\n    _classPrivateFieldGet(_queuedRedirectInfoMap, this).delete(networkRequestId);\n    _classPrivateFieldGet(_responseReceivedExtraInfoMap, this).delete(networkRequestId);\n  }\n  responseExtraInfo(networkRequestId) {\n    if (!_classPrivateFieldGet(_responseReceivedExtraInfoMap, this).has(networkRequestId)) {\n      _classPrivateFieldGet(_responseReceivedExtraInfoMap, this).set(networkRequestId, []);\n    }\n    return _classPrivateFieldGet(_responseReceivedExtraInfoMap, this).get(networkRequestId);\n  }\n  queuedRedirectInfo(fetchRequestId) {\n    if (!_classPrivateFieldGet(_queuedRedirectInfoMap, this).has(fetchRequestId)) {\n      _classPrivateFieldGet(_queuedRedirectInfoMap, this).set(fetchRequestId, []);\n    }\n    return _classPrivateFieldGet(_queuedRedirectInfoMap, this).get(fetchRequestId);\n  }\n  queueRedirectInfo(fetchRequestId, redirectInfo) {\n    this.queuedRedirectInfo(fetchRequestId).push(redirectInfo);\n  }\n  takeQueuedRedirectInfo(fetchRequestId) {\n    return this.queuedRedirectInfo(fetchRequestId).shift();\n  }\n  inFlightRequestsCount() {\n    let inFlightRequestCounter = 0;\n    for (const request of _classPrivateFieldGet(_httpRequestsMap, this).values()) {\n      if (!request.response()) {\n        inFlightRequestCounter++;\n      }\n    }\n    return inFlightRequestCounter;\n  }\n  storeRequestWillBeSent(networkRequestId, event) {\n    _classPrivateFieldGet(_requestWillBeSentMap, this).set(networkRequestId, event);\n  }\n  getRequestWillBeSent(networkRequestId) {\n    return _classPrivateFieldGet(_requestWillBeSentMap, this).get(networkRequestId);\n  }\n  forgetRequestWillBeSent(networkRequestId) {\n    _classPrivateFieldGet(_requestWillBeSentMap, this).delete(networkRequestId);\n  }\n  getRequestPaused(networkRequestId) {\n    return _classPrivateFieldGet(_requestPausedMap, this).get(networkRequestId);\n  }\n  forgetRequestPaused(networkRequestId) {\n    _classPrivateFieldGet(_requestPausedMap, this).delete(networkRequestId);\n  }\n  storeRequestPaused(networkRequestId, event) {\n    _classPrivateFieldGet(_requestPausedMap, this).set(networkRequestId, event);\n  }\n  getRequest(networkRequestId) {\n    return _classPrivateFieldGet(_httpRequestsMap, this).get(networkRequestId);\n  }\n  storeRequest(networkRequestId, request) {\n    _classPrivateFieldGet(_httpRequestsMap, this).set(networkRequestId, request);\n  }\n  forgetRequest(networkRequestId) {\n    _classPrivateFieldGet(_httpRequestsMap, this).delete(networkRequestId);\n  }\n  getQueuedEventGroup(networkRequestId) {\n    return _classPrivateFieldGet(_queuedEventGroupMap, this).get(networkRequestId);\n  }\n  queueEventGroup(networkRequestId, event) {\n    _classPrivateFieldGet(_queuedEventGroupMap, this).set(networkRequestId, event);\n  }\n  forgetQueuedEventGroup(networkRequestId) {\n    _classPrivateFieldGet(_queuedEventGroupMap, this).delete(networkRequestId);\n  }\n}","map":{"version":3,"names":["NetworkEventManager","constructor","_classPrivateFieldInitSpec","_requestWillBeSentMap","Map","_requestPausedMap","_httpRequestsMap","_responseReceivedExtraInfoMap","_queuedRedirectInfoMap","_queuedEventGroupMap","forget","networkRequestId","_classPrivateFieldGet","delete","responseExtraInfo","has","set","get","queuedRedirectInfo","fetchRequestId","queueRedirectInfo","redirectInfo","push","takeQueuedRedirectInfo","shift","inFlightRequestsCount","inFlightRequestCounter","request","values","response","storeRequestWillBeSent","event","getRequestWillBeSent","forgetRequestWillBeSent","getRequestPaused","forgetRequestPaused","storeRequestPaused","getRequest","storeRequest","forgetRequest","getQueuedEventGroup","queueEventGroup","forgetQueuedEventGroup"],"sources":["../../../../src/cdp/NetworkEventManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}