{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2023 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseSharedId = exports.getSharedId = void 0;\nconst SHARED_ID_DIVIDER = '_element_';\nfunction getSharedId(frameId, documentId, backendNodeId) {\n  return `f.${frameId}.d.${documentId}.e.${backendNodeId}`;\n}\nexports.getSharedId = getSharedId;\nfunction parseLegacySharedId(sharedId) {\n  const match = sharedId.match(new RegExp(`(.*)${SHARED_ID_DIVIDER}(.*)`));\n  if (!match) {\n    // SharedId is incorrectly formatted.\n    return null;\n  }\n  const documentId = match[1];\n  const elementId = match[2];\n  if (documentId === undefined || elementId === undefined) {\n    return null;\n  }\n  const backendNodeId = parseInt(elementId ?? '');\n  if (isNaN(backendNodeId)) {\n    return null;\n  }\n  return {\n    documentId,\n    backendNodeId\n  };\n}\nfunction parseSharedId(sharedId) {\n  // TODO: remove legacy check once ChromeDriver provides sharedId in the new format.\n  const legacyFormattedSharedId = parseLegacySharedId(sharedId);\n  if (legacyFormattedSharedId !== null) {\n    return {\n      ...legacyFormattedSharedId,\n      frameId: undefined\n    };\n  }\n  const match = sharedId.match(/f\\.(.*)\\.d\\.(.*)\\.e\\.([0-9]*)/);\n  if (!match) {\n    // SharedId is incorrectly formatted.\n    return null;\n  }\n  const frameId = match[1];\n  const documentId = match[2];\n  const elementId = match[3];\n  if (frameId === undefined || documentId === undefined || elementId === undefined) {\n    return null;\n  }\n  const backendNodeId = parseInt(elementId ?? '');\n  if (isNaN(backendNodeId)) {\n    return null;\n  }\n  return {\n    frameId,\n    documentId,\n    backendNodeId\n  };\n}\nexports.parseSharedId = parseSharedId;","map":{"version":3,"names":["SHARED_ID_DIVIDER","getSharedId","frameId","documentId","backendNodeId","exports","parseLegacySharedId","sharedId","match","RegExp","elementId","undefined","parseInt","isNaN","parseSharedId","legacyFormattedSharedId"],"sources":["../../../../../src/bidiMapper/modules/script/SharedId.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAiBA,MAAMA,iBAAiB,GAAG,WAAW;AAErC,SAAgBC,WAAWA,CACzBC,OAAe,EACfC,UAAkB,EAClBC,aAAqB;EAErB,OAAO,KAAKF,OAAO,MAAMC,UAAU,MAAMC,aAAa,EAAE;AAC1D;AANAC,OAAA,CAAAJ,WAAA,GAAAA,WAAA;AAQA,SAASK,mBAAmBA,CAACC,QAAgB;EAI3C,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAAC,IAAIC,MAAM,CAAC,OAAOT,iBAAiB,MAAM,CAAC,CAAC;EACxE,IAAI,CAACQ,KAAK,EAAE;IACV;IACA,OAAO,IAAI;EACb;EACA,MAAML,UAAU,GAAGK,KAAK,CAAC,CAAC,CAAC;EAC3B,MAAME,SAAS,GAAGF,KAAK,CAAC,CAAC,CAAC;EAE1B,IAAIL,UAAU,KAAKQ,SAAS,IAAID,SAAS,KAAKC,SAAS,EAAE;IACvD,OAAO,IAAI;EACb;EACA,MAAMP,aAAa,GAAGQ,QAAQ,CAACF,SAAS,IAAI,EAAE,CAAC;EAC/C,IAAIG,KAAK,CAACT,aAAa,CAAC,EAAE;IACxB,OAAO,IAAI;EACb;EAEA,OAAO;IACLD,UAAU;IACVC;GACD;AACH;AAEA,SAAgBU,aAAaA,CAACP,QAAgB;EAQ5C;EACA,MAAMQ,uBAAuB,GAAGT,mBAAmB,CAACC,QAAQ,CAAC;EAC7D,IAAIQ,uBAAuB,KAAK,IAAI,EAAE;IACpC,OAAO;MAAC,GAAGA,uBAAuB;MAAEb,OAAO,EAAES;IAAS,CAAC;EACzD;EAEA,MAAMH,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAAC,+BAA+B,CAAC;EAC7D,IAAI,CAACA,KAAK,EAAE;IACV;IACA,OAAO,IAAI;EACb;EACA,MAAMN,OAAO,GAAGM,KAAK,CAAC,CAAC,CAAC;EACxB,MAAML,UAAU,GAAGK,KAAK,CAAC,CAAC,CAAC;EAC3B,MAAME,SAAS,GAAGF,KAAK,CAAC,CAAC,CAAC;EAE1B,IACEN,OAAO,KAAKS,SAAS,IACrBR,UAAU,KAAKQ,SAAS,IACxBD,SAAS,KAAKC,SAAS,EACvB;IACA,OAAO,IAAI;EACb;EACA,MAAMP,aAAa,GAAGQ,QAAQ,CAACF,SAAS,IAAI,EAAE,CAAC;EAC/C,IAAIG,KAAK,CAACT,aAAa,CAAC,EAAE;IACxB,OAAO,IAAI;EACb;EAEA,OAAO;IACLF,OAAO;IACPC,UAAU;IACVC;GACD;AACH;AAxCAC,OAAA,CAAAS,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}