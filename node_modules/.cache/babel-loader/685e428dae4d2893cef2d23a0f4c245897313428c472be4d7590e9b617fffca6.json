{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Touchscreen = exports.Mouse = exports.MouseButton = exports.Keyboard = void 0;\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On macOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n *\n * ```ts\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n *\n * ```ts\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\nclass Keyboard {\n  /**\n   * @internal\n   */\n  constructor() {}\n}\nexports.Keyboard = Keyboard;\n/**\n * Enum of valid mouse buttons.\n *\n * @public\n */\nexports.MouseButton = Object.freeze({\n  Left: 'left',\n  Right: 'right',\n  Middle: 'middle',\n  Back: 'back',\n  Forward: 'forward'\n});\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n *\n * ```ts\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n *\n * ```ts\n * await page.evaluate(\n *   (from, to) => {\n *     const selection = from.getRootNode().getSelection();\n *     const range = document.createRange();\n *     range.setStartBefore(from);\n *     range.setEndAfter(to);\n *     selection.removeAllRanges();\n *     selection.addRange(range);\n *   },\n *   fromJSHandle,\n *   toJSHandle\n * );\n * ```\n *\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n *\n * ```ts\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n *\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n *\n * ```ts\n * await browser\n *   .defaultBrowserContext()\n *   .overridePermissions('<your origin>', [\n *     'clipboard-read',\n *     'clipboard-write',\n *   ]);\n * ```\n *\n * @public\n */\nclass Mouse {\n  /**\n   * @internal\n   */\n  constructor() {}\n}\nexports.Mouse = Mouse;\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\nclass Touchscreen {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Dispatches a `touchstart` and `touchend` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n  async tap(x, y) {\n    await this.touchStart(x, y);\n    await this.touchEnd();\n  }\n}\nexports.Touchscreen = Touchscreen;","map":{"version":3,"names":["Keyboard","constructor","exports","MouseButton","Object","freeze","Left","Right","Middle","Back","Forward","Mouse","Touchscreen","tap","x","y","touchStart","touchEnd"],"sources":["../../../../src/api/Input.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;AAsCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,MAAsBA,QAAQ;EAC5B;;;EAGAC,YAAA,GAAe;;AAJjBC,OAAA,CAAAF,QAAA,GAAAA,QAAA;AAkLA;;;;;AAKaE,OAAA,CAAAC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC;EACvCC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE;CACV,CAAsD;AAOvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA,MAAsBC,KAAK;EACzB;;;EAGAV,YAAA,GAAe;;AAJjBC,OAAA,CAAAS,KAAA,GAAAA,KAAA;AA6HA;;;;AAIA,MAAsBC,WAAW;EAC/B;;;EAGAX,YAAA,GAAe;EAEf;;;;;EAKA,MAAMY,GAAGA,CAACC,CAAS,EAAEC,CAAS;IAC5B,MAAM,IAAI,CAACC,UAAU,CAACF,CAAC,EAAEC,CAAC,CAAC;IAC3B,MAAM,IAAI,CAACE,QAAQ,EAAE;EACvB;;AAdFf,OAAA,CAAAU,WAAA,GAAAA,WAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}