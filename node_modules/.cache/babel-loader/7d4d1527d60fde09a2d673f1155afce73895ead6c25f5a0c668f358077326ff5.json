{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Empty from '@/views/components/Empty/empty';\nimport WeekAnalysis from '@/views/report/components/weekAnalysis';\nimport { formatDate, formatTime } from '@/utils/formatTime';\nimport { getAgpData } from '@/api/dataApi';\nimport { mapGetters } from \"vuex\";\nimport { TIRUtils } from \"@/utils/algorithm/TIR\";\nimport { GlucoseUtils } from \"@/utils/algorithm/Glucose\";\nexport default {\n  data() {\n    return {\n      agpDate: ['2024-05-01', '2024-05-08'],\n      pickerOptions: {\n        shortcuts: [{\n          text: '最近7天',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近14天',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 14);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近30天',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n            picker.$emit('pick', [start, end]);\n          }\n        }, {\n          text: '最近90天',\n          onClick(picker) {\n            const end = new Date();\n            const start = new Date();\n            start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n            picker.$emit('pick', [start, end]);\n          }\n        }]\n      },\n      dialogVisible: false,\n      dialogType: \"\",\n      downloadList: ['AGP报告', '每日分析', '多日血糖分析', '报告解读', '饮食分析'],\n      checkedDowns: [],\n      checkAll: false,\n      isIndeterminate: true,\n      empty: true\n    };\n  },\n  components: {\n    WeekAnalysis,\n    Empty\n  },\n  mounted() {\n    // this.addWeek()\n  },\n  methods: {\n    upload() {\n      this.$router.push('/upLoad');\n    },\n    // 选择下载。打印的内容\n    handleCheckedCitiesChange(val) {\n      let checkedCount = val.length;\n      this.checkAll = checkedCount === this.downloadList.length;\n      this.isIndeterminate = checkedCount > 0 && checkedCount < this.downloadList.length;\n    },\n    // 全选\n    handleCheckAllChange(val) {\n      this.checkedDowns = val ? this.downloadList : [];\n      this.isIndeterminate = false;\n    },\n    // 打印\n    async print() {\n      this.dialogVisible = true;\n      this.dialogType = 'print';\n    },\n    // 导出pdf\n    handleExport() {\n      this.dialogVisible = true;\n      this.dialogType = 'export';\n    },\n    // 选择时间\n    changeDate(e) {\n      if (_.indexOf(this.$store.state.report.chooseDateList, this.agpDate.join('/')) == -1) {\n        this.getData();\n      } else {\n        let result = this.$store.state.report.day[this.agpDate.join('/')];\n        // this.list = result\n        this.addWeek(result);\n        if (result.length > 0) {\n          this.empty = false;\n        } else {\n          this.empty = true;\n        }\n      }\n    },\n    // 从云拉取数据\n    getData() {\n      let s = new Date(this.agpDate[0]);\n      let e = new Date(this.agpDate[1]);\n      let start_ts = s.setHours(0, 0, 0) / 1000;\n      let end_ts = e.setHours(23, 59, 59) / 1000;\n      this.loading = true;\n      getAgpData({\n        start_ts: start_ts,\n        end_ts: end_ts\n      }).then(response => {\n        if (response.code == 1000) {\n          let arrayData = response.data;\n          this.loading = false;\n          if (arrayData.length > 0) {\n            console.log(formatTime(new Date()), '得到数据');\n            this.empty = false;\n            this.handelDay([this.agpDate.join('/'), arrayData]);\n            this.$store.dispatch('setChooseDateList', this.agpDate.join('/'));\n          } else {\n            this.empty = true;\n          }\n        } else {\n          this.loading = false;\n          this.$message({\n            type: 'error',\n            message: response.msg\n          });\n        }\n      }).catch(res => {\n        console.log(res);\n      });\n    },\n    processArray(arr, interval) {\n      let result = [];\n      for (let i = 0; i < arr.length - 1; i++) {\n        result.push(arr[i]);\n        let diff = arr[i + 1].DataTs - arr[i].DataTs;\n        let addTs = arr[i].DataTs + interval;\n        while (diff > interval) {\n          result.push({\n            DataTs: addTs,\n            value: undefined\n          });\n          diff = arr[i + 1].DataTs - addTs;\n          addTs += interval;\n        }\n      }\n      result.push(arr[arr.length - 1]);\n      return result;\n    },\n    filterArray(data) {\n      const result = [];\n      const seenTimes = new Set();\n      let levelLowInvalidMg = 20;\n      let levelHighInvalidMg = 800;\n      let levelTooLowMg = 40;\n      let levelTooHighMg = 400;\n      data.forEach(item => {\n        const timeStr = formatDate(item.DataTs * 1000, 'YYYY-mm-dd HH:MM');\n        if (!seenTimes.has(timeStr)) {\n          seenTimes.add(timeStr);\n          if (item.value > levelLowInvalidMg || item.value < levelHighInvalidMg) {\n            result.push({\n              ...item,\n              value: undefined\n            });\n          } else if (item.value < levelTooLowMg) {\n            result.push({\n              ...item,\n              value: levelTooLowMg\n            });\n          } else if (item.value > levelTooHighMg) {\n            result.push({\n              ...item,\n              value: levelTooHighMg\n            });\n          } else {\n            result.push(item);\n          }\n        }\n      });\n      return result;\n    },\n    handleData(objects, s_ts, e_ts) {\n      let measuringInterval = 60;\n      objects = this.processArray(objects, measuringInterval);\n      objects = this.filterArray(objects);\n      let startTs = objects[0].DataTs;\n      while (startTs - measuringInterval >= s_ts) {\n        objects.unshift({\n          DataTs: startTs - measuringInterval,\n          value: undefined\n        });\n        startTs = startTs - measuringInterval;\n      }\n      let endTs = objects[objects.length - 1].DataTs;\n      while (endTs + measuringInterval < e_ts) {\n        objects.push({\n          DataTs: endTs + measuringInterval,\n          value: undefined\n        });\n        endTs = endTs + measuringInterval;\n      }\n      return objects;\n    },\n    // 分割成每日血糖\n    handelDay(data) {\n      data = _.cloneDeep(data);\n      let s = new Date(data[0].split('/')[0]);\n      let e = new Date(data[0].split('/')[1]);\n      let s_date = s.setHours(0, 0, 0) / 1000;\n      let e_date = e.setHours(23, 59, 59) / 1000;\n      let datArray = this.handleData(data[1], s_date, e_date);\n      let singleDay = _.chunk(datArray, 60 * 24);\n      let max = _.maxBy(datArray, 'Value').Value > 400 ? 400 : _.maxBy(datArray, 'Value').Value;\n      let dayList = new Array();\n      singleDay.forEach(item => {\n        let value = _.map(item, 'Value');\n        dayList.push({\n          day: formatDate(item[0].DataTs * 1000, 'mm.dd'),\n          week: formatDate(item[0].DataTs * 1000, 'WW'),\n          value: value,\n          max: max,\n          tir: TIRUtils.getTIRResult(value) ? (Number(TIRUtils.getTIRResult(value).normalRate) * 100).toFixed(1) : ''\n        });\n      });\n      // this.list = dayList\n      this.addWeek(dayList);\n      this.$store.dispatch('setDay', {\n        key: data[0],\n        value: dayList\n      }); //处理完数据存vuex\n    },\n    // 合并7天血糖\n    addWeek(data) {\n      let list = data;\n      let newList = _.chunk(list, 7);\n      let newArr = [];\n      newList.forEach(item => {\n        let handelValue = _.flatten(_.map(item, 'value'));\n        let max = _.max(handelValue) > 400 ? 400 : _.max(handelValue);\n        newArr.push({\n          day: [item[0].day, item[item.length - 1].day],\n          value: _.map(item, 'value'),\n          max: max,\n          tir: TIRUtils.getTIRResult(handelValue) ? (Number(TIRUtils.getTIRResult(handelValue).normalRate) * 100).toFixed(1) : '',\n          info: GlucoseUtils.calculateMeanCvGmi(handelValue)\n        });\n      });\n      this.list = newArr;\n      console.log(newArr);\n    },\n    // 分割为一周血糖\n    handelWeek(data) {\n      data = _.cloneDeep(data);\n      let s = new Date(data[0].split('/')[0]);\n      let e = new Date(data[0].split('/')[1]);\n      let s_date = s.setHours(0, 0, 0) / 1000;\n      let e_date = e.setHours(23, 59, 59) / 1000;\n      let oneDay = 24 * 60 * 60 * 1000;\n      let diff = Math.abs(e - s);\n      let splitNum = Math.floor(diff / oneDay);\n      let datArray = this.handleData(data[1], s_date, e_date);\n      let singleDay = splitNum >= 7 ? _.chunk(datArray, 60 * 24 * 7) : [datArray];\n      let max = _.maxBy(datArray, 'Value').Value > 400 ? 400 : _.maxBy(datArray, 'Value').Value;\n      let dayList = new Array();\n      singleDay.forEach(item => {\n        let value = _.map(item, 'Value');\n        dayList.push({\n          day: [formatDate(item[0].DataTs * 1000, 'mm月dd日'), formatDate(item[item.length - 1].DataTs * 1000, 'mm月dd日')],\n          value: _.chunk(value, 60 * 24),\n          max: max,\n          tir: TIRUtils.getTIRResult(value) ? (Number(TIRUtils.getTIRResult(value).normalRate) * 100).toFixed(1) : '',\n          info: GlucoseUtils.calculateMeanCvGmi(value)\n        });\n      });\n      console.log(dayList);\n    }\n  }\n};","map":{"version":3,"names":["Empty","WeekAnalysis","formatDate","formatTime","getAgpData","mapGetters","TIRUtils","GlucoseUtils","data","agpDate","pickerOptions","shortcuts","text","onClick","picker","end","Date","start","setTime","getTime","$emit","dialogVisible","dialogType","downloadList","checkedDowns","checkAll","isIndeterminate","empty","components","mounted","methods","upload","$router","push","handleCheckedCitiesChange","val","checkedCount","length","handleCheckAllChange","print","handleExport","changeDate","e","_","indexOf","$store","state","report","chooseDateList","join","getData","result","day","addWeek","s","start_ts","setHours","end_ts","loading","then","response","code","arrayData","console","log","handelDay","dispatch","$message","type","message","msg","catch","res","processArray","arr","interval","i","diff","DataTs","addTs","value","undefined","filterArray","seenTimes","Set","levelLowInvalidMg","levelHighInvalidMg","levelTooLowMg","levelTooHighMg","forEach","item","timeStr","has","add","handleData","objects","s_ts","e_ts","measuringInterval","startTs","unshift","endTs","cloneDeep","split","s_date","e_date","datArray","singleDay","chunk","max","maxBy","Value","dayList","Array","map","week","tir","getTIRResult","Number","normalRate","toFixed","key","list","newList","newArr","handelValue","flatten","info","calculateMeanCvGmi","handelWeek","oneDay","Math","abs","splitNum","floor"],"sources":["src/views/report/weekReport.vue"],"sourcesContent":["<template>\n    <div>\n         <div class='agp-top' >\n            <div class='agp-top-fl' >\n                <div class='report-title'> {{$t('message.route.'+$route.meta.title)}}</div>\n                \n            </div>\n            <div class='agp-fr' >\n                <img src=\"~@/assets/image/printer.png\" alt=\"\" class='agp-icon' @click='print' >\n                <img src=\"~@/assets/image/down-icon.png\" alt=\"\" class='agp-icon' @click='handleExport' >\n                <img src=\"~@/assets/image/share.png\" alt=\"\" class='agp-icon agp-fr-icon'>\n                <el-button type=\"primary\" @click=\"upload\">\n                    <img src=\"~@/assets/image/btn-upload.png\" alt=\"\" class='btn-upload' >\n                    上传数据\n                </el-button>\n            </div>\n        </div>\n        <div class='report-agp-date' >\n                <img src=\"~@/assets/image/date-calendar.png\" alt=\"\" class='agp-icon' >\n                <div class='agp-date' >{{agpDate[0]}} — {{agpDate[1]}}（4天）</div>\n                    <img src=\"~@/assets/image/select-icon.png\" alt=\"\" class='select-icon' >\n                <el-date-picker\n                    class='agp-picker'\n                    v-model=\"agpDate\"\n                    type=\"daterange\"\n                    align=\"right\"\n                    unlink-panels\n                    range-separator=\"至\"\n                    start-placeholder=\"开始日期\"\n                    end-placeholder=\"结束日期\"\n                    value-format=\"yyyy-MM-dd\"\n                    format=\"yyyy-MM-dd\"\n                    @change=\"changeDate\"\n                    :picker-options=\"pickerOptions\">\n                </el-date-picker>\n        </div>\n        <!-- 图表 -->\n        <div class='week-bg-main'  v-for='(item,index) in list' :key='index'>\n            <div  class='week-bg-title' >\n                <div class='week-bg-date' >{{item.day[0]}} - {{item.day[1]}}</div>\n                 <img src=\"~@/assets/image/reason-icon.png\" alt=\"\" class='reason-icon'>\n            </div>\n            <Empty v-if='empty'/>\n            <div v-else >\n                <div >\n                    <Empty v-if='item.value.length<=0' />\n                    <WeekAnalysis :dataList='item'/>\n                </div>\n            </div>\n        </div>\n         <!-- 下载打印弹窗 -->\n        <el-dialog  :visible.sync=\"dialogVisible\"  :show-close=\"false\" :title='dialogType==\"print\"?\"打印报告\":\"下载报告\"'\n         width=\"1060\" >\n            <div class='slot-popover'  id='popover'>\n                <div class='slot-popover-cont slot-popover-conts'>\n                    <div class='report-agp-date report-agp-dates' >\n                            <img src=\"~@/assets/image/date-calendar.png\" alt=\"\" class='agp-icon' >\n                            <div class='agp-date' >{{agpDate[0]}} — {{agpDate[1]}}（4天）</div>\n                            <img src=\"~@/assets/image/select-icon.png\" alt=\"\" class='select-icon' >\n                            <el-date-picker\n                                class='agp-picker'\n                                v-model=\"agpDate\"\n                                type=\"daterange\"\n                                align=\"right\"\n                                unlink-panels\n                                range-separator=\"至\"\n                                start-placeholder=\"开始日期\"\n                                end-placeholder=\"结束日期\"\n                                value-format=\"yyyy-MM-dd\"\n                                format=\"yyyy-MM-dd\"\n                                @change=\"changeDate\"\n                                :picker-options=\"pickerOptions\">\n                            </el-date-picker>\n                    </div>\n                    <div class='popover-cont-label' >\n                        <div class='popover-cont-label-label' v-if='dialogType==\"print\"'>请选择您想要打印的报告内容：</div>\n                        <div class='popover-cont-label-label' v-else>请选择您想要下载的报告内容：</div>\n                         <el-checkbox :indeterminate=\"isIndeterminate\" v-model=\"checkAll\" @change=\"handleCheckAllChange\">全选</el-checkbox>\n                    </div>\n                    <el-checkbox-group v-model=\"checkedDowns\" @change=\"handleCheckedCitiesChange\">\n                        <el-checkbox v-for=\"item in downloadList\" :label=\"item\" :key=\"item\">{{item}}</el-checkbox>\n                    </el-checkbox-group>\n                </div>\n                <div class='slot-popover-btn'>\n                    <el-button type=\"primary\" v-if='dialogType==\"print\"'>打印报告</el-button>\n                    <el-button type=\"primary\" v-else>下载报告</el-button>\n                </div>\n            </div>\n            <img src=\"~@/assets/image/close-icon.png\" alt=\"\" class='dialog-close' @click='dialogVisible=false' >\n        </el-dialog>\n    </div>\n</template>\n<script>\nimport Empty from '@/views/components/Empty/empty'\nimport WeekAnalysis from '@/views/report/components/weekAnalysis'\nimport {formatDate,formatTime} from '@/utils/formatTime'\nimport {getAgpData} from '@/api/dataApi'\nimport {mapGetters} from \"vuex\"\nimport { TIRUtils } from \"@/utils/algorithm/TIR\";\nimport { GlucoseUtils } from \"@/utils/algorithm/Glucose\";\nexport default {\n    data(){\n        return{\n            agpDate:['2024-05-01','2024-05-08'],\n            pickerOptions: {\n                shortcuts: [{\n                    text: '最近7天',\n                    onClick(picker) {\n                    const end = new Date();\n                    const start = new Date();\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 7);\n                    picker.$emit('pick', [start, end]);\n                    }\n                },{\n                    text: '最近14天',\n                    onClick(picker) {\n                    const end = new Date();\n                    const start = new Date();\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 14);\n                    picker.$emit('pick', [start, end]);\n                    }\n                }, {\n                    text: '最近30天',\n                    onClick(picker) {\n                    const end = new Date();\n                    const start = new Date();\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 30);\n                    picker.$emit('pick', [start, end]);\n                    }\n                }, {\n                    text: '最近90天',\n                    onClick(picker) {\n                    const end = new Date();\n                    const start = new Date();\n                    start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);\n                    picker.$emit('pick', [start, end]);\n                    }\n                }]\n            },\n            dialogVisible:false,\n            dialogType:\"\",\n            downloadList:['AGP报告','每日分析','多日血糖分析','报告解读','饮食分析'],\n            checkedDowns:[],\n            checkAll:false,\n            isIndeterminate: true,\n            empty:true,\n        }\n    },\n    components: {\n        WeekAnalysis,Empty\n    },\n    mounted(){\n        // this.addWeek()\n    },\n    methods:{\n        upload(){\n            this.$router.push('/upLoad')\n        },\n          // 选择下载。打印的内容\n        handleCheckedCitiesChange(val){\n            let checkedCount = val.length;\n            this.checkAll = checkedCount === this.downloadList.length;\n            this.isIndeterminate = checkedCount > 0 && checkedCount < this.downloadList.length;\n        },\n        // 全选\n        handleCheckAllChange(val){\n            this.checkedDowns = val ? this.downloadList : [];\n            this.isIndeterminate = false;\n        },\n          // 打印\n        async print(){\n            this.dialogVisible = true\n            this.dialogType='print'\n        },\n        // 导出pdf\n        handleExport() {\n            this.dialogVisible = true\n            this.dialogType='export'\n        },\n        // 选择时间\n        changeDate(e){\n            if( _.indexOf(this.$store.state.report.chooseDateList,this.agpDate.join('/'))==-1){\n                this.getData()\n            }else{\n                let result  = this.$store.state.report.day[this.agpDate.join('/')]\n                // this.list = result\n                this.addWeek(result)\n                if( result.length>0){\n                    this.empty = false\n                }else{\n                    this.empty = true\n                }\n            }\n        },\n        // 从云拉取数据\n        getData(){\n            let s = new Date(this.agpDate[0])\n            let e = new Date(this.agpDate[1])\n            let start_ts = s.setHours(0,0,0)/1000\n            let end_ts = e.setHours(23,59,59)/1000\n            this.loading = true\n            getAgpData({start_ts:start_ts,end_ts:end_ts}).then(response => {\n\t\t\t\t\t\t\tif(response.code == 1000){\n                                let arrayData = response.data\n                                this.loading = false\n                                if(arrayData.length>0){\n                                    console.log(formatTime(new Date()),'得到数据')   \n                                    this.empty = false\n                                    this.handelDay([this.agpDate.join('/'),arrayData])\n                                    this.$store.dispatch('setChooseDateList',this.agpDate.join('/'))\n                                }else{\n                                    this.empty = true\n                                }\n\t\t\t\t\t\t\t}else{\n                                this.loading = false\n\t\t\t\t\t\t\t\tthis.$message({\n                                    type: 'error',\n                                    message: response.msg\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n            }).catch((res) => {\n                console.log(res)\n            })\n        },\n        processArray(arr, interval) {\n            let result = [];\n\n            for (let i = 0; i < arr.length - 1; i++) {\n                result.push(arr[i]);\n\n                let diff = arr[i + 1].DataTs - arr[i].DataTs;\n                let addTs = arr[i].DataTs + interval;\n                while (diff > interval) {\n                result.push({DataTs: addTs, value: undefined});\n                diff = arr[i + 1].DataTs - addTs;\n                addTs += interval;\n                }\n            }\n            result.push(arr[arr.length - 1]);\n\n            return result;\n        },\n\n        filterArray  (data) {\n            const result = [];\n\n            const seenTimes = new Set();\n            let levelLowInvalidMg = 20\n            let levelHighInvalidMg = 800\n            let levelTooLowMg = 40\n            let levelTooHighMg = 400\n            data.forEach(item => {\n                const timeStr = formatDate(item.DataTs*1000,'YYYY-mm-dd HH:MM')\n\n                if (!seenTimes.has(timeStr)) {\n                seenTimes.add(timeStr);\n                if (item.value > levelLowInvalidMg || item.value < levelHighInvalidMg) {\n                    result.push({...item, value: undefined});\n                } else if (item.value < levelTooLowMg) {\n                    result.push({\n                    ...item,\n                    value: levelTooLowMg,\n                    });\n                } else if (item.value > levelTooHighMg) {\n                    result.push({\n                    ...item,\n                    value: levelTooHighMg,\n                    });\n                } else {\n                    result.push(item);\n                }\n                }\n            });\n\n            return result;\n        },\n\n        handleData (objects, s_ts, e_ts)  {\n            let measuringInterval = 60\n            objects = this.processArray(objects, measuringInterval);\n            objects = this.filterArray(objects);\n\n            let startTs = objects[0].DataTs;\n            while (startTs - measuringInterval >= s_ts) {\n                objects.unshift({\n                DataTs: startTs - measuringInterval,\n                value: undefined,\n                });\n                startTs = startTs - measuringInterval;\n            }\n\n            let endTs = objects[objects.length - 1].DataTs;\n            while (endTs + measuringInterval < e_ts) {\n                objects.push({\n                DataTs: endTs + measuringInterval,\n                value: undefined,\n                });\n                endTs = endTs + measuringInterval;\n            }\n            return objects;\n        },\n        // 分割成每日血糖\n        handelDay(data){\n            data = _.cloneDeep(data)\n            let s = new Date(data[0].split('/')[0])\n            let e = new Date(data[0].split('/')[1])\n            let s_date = s.setHours(0,0,0)/1000\n            let e_date = e.setHours(23,59,59)/1000\n            let datArray = this.handleData(data[1],s_date,e_date)\n            let singleDay  = _.chunk(datArray,60*24) ;\n            let max = _.maxBy(datArray,'Value').Value>400?400:_.maxBy(datArray,'Value').Value\n            let dayList = new Array()\n            singleDay.forEach(item=>{\n                let value = _.map(item, 'Value');\n                dayList.push({\n                    day: formatDate(item[0].DataTs*1000,'mm.dd'),\n                    week: formatDate(item[0].DataTs*1000,'WW'),\n                    value:value,\n                    max:max,\n                    tir:TIRUtils.getTIRResult(value)?(Number(TIRUtils.getTIRResult(value).normalRate)*100).toFixed(1):''\n                })\n            })\n            // this.list = dayList\n            this.addWeek(dayList)\n            this.$store.dispatch('setDay',{key:data[0],value:dayList}) //处理完数据存vuex\n        },\n        // 合并7天血糖\n        addWeek(data){\n            let list = data\n            let newList = _.chunk(list,7)\n            let newArr = []\n            newList.forEach(item=>{\n                let handelValue = _.flatten(_.map(item,'value'))\n                let max = _.max(handelValue)>400?400:_.max(handelValue)\n                newArr.push({\n                    day:[item[0].day,item[item.length-1].day],\n                    value:_.map(item,'value'),\n                    max:max,\n                    tir:TIRUtils.getTIRResult(handelValue)?(Number(TIRUtils.getTIRResult(handelValue).normalRate)*100).toFixed(1):'',\n                    info:GlucoseUtils.calculateMeanCvGmi(handelValue)\n                })\n            })\n            this.list = newArr\n            console.log(newArr)\n        },\n        // 分割为一周血糖\n        handelWeek(data){\n            data = _.cloneDeep(data)\n            let s = new Date(data[0].split('/')[0])\n            let e = new Date(data[0].split('/')[1])\n            let s_date = s.setHours(0,0,0)/1000\n            let e_date = e.setHours(23,59,59)/1000\n            let oneDay = 24*60*60*1000\n            let diff = Math.abs(e - s)\n            let splitNum = Math.floor(diff/oneDay)\n            let datArray = this.handleData(data[1],s_date,e_date)\n            let singleDay  = splitNum>=7?_.chunk(datArray,60*24*7):[datArray];\n            let max = _.maxBy(datArray,'Value').Value>400?400:_.maxBy(datArray,'Value').Value\n            let dayList = new Array()\n             singleDay.forEach(item=>{\n                let value = _.map(item, 'Value');\n                dayList.push({\n                    day: [formatDate(item[0].DataTs*1000,'mm月dd日'),formatDate(item[item.length-1].DataTs*1000,'mm月dd日')],\n                    value:_.chunk(value,60*24),\n                    max:max,\n                    tir:TIRUtils.getTIRResult(value)?(Number(TIRUtils.getTIRResult(value).normalRate)*100).toFixed(1):'',\n                    info:GlucoseUtils.calculateMeanCvGmi(value)\n                })\n            })\n            console.log(dayList)\n        }\n    }\n}\n</script>\n<style scoped>\n.week-bg-main{\n    width:100%;\n    height:605px;\n    background:#fff;\n    margin-bottom:20px;\n    border-radius:10px;\n    padding:20px;\n    box-sizing: border-box;\n}\n.week-bg-title{\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom:20px;\n}\n.week-bg-date{\n    font-size:var(--fontSize-max);\n    color:var(--color-black-100);\n    font-weight: 700;\n}\n.reason-icon{\n    width:24px;\n    height:24px;\n}\n</style>"],"mappings":";AA6FA,OAAAA,KAAA;AACA,OAAAC,YAAA;AACA,SAAAC,UAAA,EAAAC,UAAA;AACA,SAAAC,UAAA;AACA,SAAAC,UAAA;AACA,SAAAC,QAAA;AACA,SAAAC,YAAA;AACA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,aAAA;QACAC,SAAA;UACAC,IAAA;UACAC,QAAAC,MAAA;YACA,MAAAC,GAAA,OAAAC,IAAA;YACA,MAAAC,KAAA,OAAAD,IAAA;YACAC,KAAA,CAAAC,OAAA,CAAAD,KAAA,CAAAE,OAAA;YACAL,MAAA,CAAAM,KAAA,UAAAH,KAAA,EAAAF,GAAA;UACA;QACA;UACAH,IAAA;UACAC,QAAAC,MAAA;YACA,MAAAC,GAAA,OAAAC,IAAA;YACA,MAAAC,KAAA,OAAAD,IAAA;YACAC,KAAA,CAAAC,OAAA,CAAAD,KAAA,CAAAE,OAAA;YACAL,MAAA,CAAAM,KAAA,UAAAH,KAAA,EAAAF,GAAA;UACA;QACA;UACAH,IAAA;UACAC,QAAAC,MAAA;YACA,MAAAC,GAAA,OAAAC,IAAA;YACA,MAAAC,KAAA,OAAAD,IAAA;YACAC,KAAA,CAAAC,OAAA,CAAAD,KAAA,CAAAE,OAAA;YACAL,MAAA,CAAAM,KAAA,UAAAH,KAAA,EAAAF,GAAA;UACA;QACA;UACAH,IAAA;UACAC,QAAAC,MAAA;YACA,MAAAC,GAAA,OAAAC,IAAA;YACA,MAAAC,KAAA,OAAAD,IAAA;YACAC,KAAA,CAAAC,OAAA,CAAAD,KAAA,CAAAE,OAAA;YACAL,MAAA,CAAAM,KAAA,UAAAH,KAAA,EAAAF,GAAA;UACA;QACA;MACA;MACAM,aAAA;MACAC,UAAA;MACAC,YAAA;MACAC,YAAA;MACAC,QAAA;MACAC,eAAA;MACAC,KAAA;IACA;EACA;EACAC,UAAA;IACA3B,YAAA;IAAAD;EACA;EACA6B,QAAA;IACA;EAAA,CACA;EACAC,OAAA;IACAC,OAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;IACA;IACA;IACAC,0BAAAC,GAAA;MACA,IAAAC,YAAA,GAAAD,GAAA,CAAAE,MAAA;MACA,KAAAZ,QAAA,GAAAW,YAAA,UAAAb,YAAA,CAAAc,MAAA;MACA,KAAAX,eAAA,GAAAU,YAAA,QAAAA,YAAA,QAAAb,YAAA,CAAAc,MAAA;IACA;IACA;IACAC,qBAAAH,GAAA;MACA,KAAAX,YAAA,GAAAW,GAAA,QAAAZ,YAAA;MACA,KAAAG,eAAA;IACA;IACA;IACA,MAAAa,MAAA;MACA,KAAAlB,aAAA;MACA,KAAAC,UAAA;IACA;IACA;IACAkB,aAAA;MACA,KAAAnB,aAAA;MACA,KAAAC,UAAA;IACA;IACA;IACAmB,WAAAC,CAAA;MACA,IAAAC,CAAA,CAAAC,OAAA,MAAAC,MAAA,CAAAC,KAAA,CAAAC,MAAA,CAAAC,cAAA,OAAAvC,OAAA,CAAAwC,IAAA;QACA,KAAAC,OAAA;MACA;QACA,IAAAC,MAAA,QAAAN,MAAA,CAAAC,KAAA,CAAAC,MAAA,CAAAK,GAAA,MAAA3C,OAAA,CAAAwC,IAAA;QACA;QACA,KAAAI,OAAA,CAAAF,MAAA;QACA,IAAAA,MAAA,CAAAd,MAAA;UACA,KAAAV,KAAA;QACA;UACA,KAAAA,KAAA;QACA;MACA;IACA;IACA;IACAuB,QAAA;MACA,IAAAI,CAAA,OAAAtC,IAAA,MAAAP,OAAA;MACA,IAAAiC,CAAA,OAAA1B,IAAA,MAAAP,OAAA;MACA,IAAA8C,QAAA,GAAAD,CAAA,CAAAE,QAAA;MACA,IAAAC,MAAA,GAAAf,CAAA,CAAAc,QAAA;MACA,KAAAE,OAAA;MACAtD,UAAA;QAAAmD,QAAA,EAAAA,QAAA;QAAAE,MAAA,EAAAA;MAAA,GAAAE,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAAC,IAAA;UACA,IAAAC,SAAA,GAAAF,QAAA,CAAApD,IAAA;UACA,KAAAkD,OAAA;UACA,IAAAI,SAAA,CAAAzB,MAAA;YACA0B,OAAA,CAAAC,GAAA,CAAA7D,UAAA,KAAAa,IAAA;YACA,KAAAW,KAAA;YACA,KAAAsC,SAAA,OAAAxD,OAAA,CAAAwC,IAAA,OAAAa,SAAA;YACA,KAAAjB,MAAA,CAAAqB,QAAA,2BAAAzD,OAAA,CAAAwC,IAAA;UACA;YACA,KAAAtB,KAAA;UACA;QACA;UACA,KAAA+B,OAAA;UACA,KAAAS,QAAA;YACAC,IAAA;YACAC,OAAA,EAAAT,QAAA,CAAAU;UACA;QACA;MACA,GAAAC,KAAA,CAAAC,GAAA;QACAT,OAAA,CAAAC,GAAA,CAAAQ,GAAA;MACA;IACA;IACAC,aAAAC,GAAA,EAAAC,QAAA;MACA,IAAAxB,MAAA;MAEA,SAAAyB,CAAA,MAAAA,CAAA,GAAAF,GAAA,CAAArC,MAAA,MAAAuC,CAAA;QACAzB,MAAA,CAAAlB,IAAA,CAAAyC,GAAA,CAAAE,CAAA;QAEA,IAAAC,IAAA,GAAAH,GAAA,CAAAE,CAAA,MAAAE,MAAA,GAAAJ,GAAA,CAAAE,CAAA,EAAAE,MAAA;QACA,IAAAC,KAAA,GAAAL,GAAA,CAAAE,CAAA,EAAAE,MAAA,GAAAH,QAAA;QACA,OAAAE,IAAA,GAAAF,QAAA;UACAxB,MAAA,CAAAlB,IAAA;YAAA6C,MAAA,EAAAC,KAAA;YAAAC,KAAA,EAAAC;UAAA;UACAJ,IAAA,GAAAH,GAAA,CAAAE,CAAA,MAAAE,MAAA,GAAAC,KAAA;UACAA,KAAA,IAAAJ,QAAA;QACA;MACA;MACAxB,MAAA,CAAAlB,IAAA,CAAAyC,GAAA,CAAAA,GAAA,CAAArC,MAAA;MAEA,OAAAc,MAAA;IACA;IAEA+B,YAAA1E,IAAA;MACA,MAAA2C,MAAA;MAEA,MAAAgC,SAAA,OAAAC,GAAA;MACA,IAAAC,iBAAA;MACA,IAAAC,kBAAA;MACA,IAAAC,aAAA;MACA,IAAAC,cAAA;MACAhF,IAAA,CAAAiF,OAAA,CAAAC,IAAA;QACA,MAAAC,OAAA,GAAAzF,UAAA,CAAAwF,IAAA,CAAAZ,MAAA;QAEA,KAAAK,SAAA,CAAAS,GAAA,CAAAD,OAAA;UACAR,SAAA,CAAAU,GAAA,CAAAF,OAAA;UACA,IAAAD,IAAA,CAAAV,KAAA,GAAAK,iBAAA,IAAAK,IAAA,CAAAV,KAAA,GAAAM,kBAAA;YACAnC,MAAA,CAAAlB,IAAA;cAAA,GAAAyD,IAAA;cAAAV,KAAA,EAAAC;YAAA;UACA,WAAAS,IAAA,CAAAV,KAAA,GAAAO,aAAA;YACApC,MAAA,CAAAlB,IAAA;cACA,GAAAyD,IAAA;cACAV,KAAA,EAAAO;YACA;UACA,WAAAG,IAAA,CAAAV,KAAA,GAAAQ,cAAA;YACArC,MAAA,CAAAlB,IAAA;cACA,GAAAyD,IAAA;cACAV,KAAA,EAAAQ;YACA;UACA;YACArC,MAAA,CAAAlB,IAAA,CAAAyD,IAAA;UACA;QACA;MACA;MAEA,OAAAvC,MAAA;IACA;IAEA2C,WAAAC,OAAA,EAAAC,IAAA,EAAAC,IAAA;MACA,IAAAC,iBAAA;MACAH,OAAA,QAAAtB,YAAA,CAAAsB,OAAA,EAAAG,iBAAA;MACAH,OAAA,QAAAb,WAAA,CAAAa,OAAA;MAEA,IAAAI,OAAA,GAAAJ,OAAA,IAAAjB,MAAA;MACA,OAAAqB,OAAA,GAAAD,iBAAA,IAAAF,IAAA;QACAD,OAAA,CAAAK,OAAA;UACAtB,MAAA,EAAAqB,OAAA,GAAAD,iBAAA;UACAlB,KAAA,EAAAC;QACA;QACAkB,OAAA,GAAAA,OAAA,GAAAD,iBAAA;MACA;MAEA,IAAAG,KAAA,GAAAN,OAAA,CAAAA,OAAA,CAAA1D,MAAA,MAAAyC,MAAA;MACA,OAAAuB,KAAA,GAAAH,iBAAA,GAAAD,IAAA;QACAF,OAAA,CAAA9D,IAAA;UACA6C,MAAA,EAAAuB,KAAA,GAAAH,iBAAA;UACAlB,KAAA,EAAAC;QACA;QACAoB,KAAA,GAAAA,KAAA,GAAAH,iBAAA;MACA;MACA,OAAAH,OAAA;IACA;IACA;IACA9B,UAAAzD,IAAA;MACAA,IAAA,GAAAmC,CAAA,CAAA2D,SAAA,CAAA9F,IAAA;MACA,IAAA8C,CAAA,OAAAtC,IAAA,CAAAR,IAAA,IAAA+F,KAAA;MACA,IAAA7D,CAAA,OAAA1B,IAAA,CAAAR,IAAA,IAAA+F,KAAA;MACA,IAAAC,MAAA,GAAAlD,CAAA,CAAAE,QAAA;MACA,IAAAiD,MAAA,GAAA/D,CAAA,CAAAc,QAAA;MACA,IAAAkD,QAAA,QAAAZ,UAAA,CAAAtF,IAAA,KAAAgG,MAAA,EAAAC,MAAA;MACA,IAAAE,SAAA,GAAAhE,CAAA,CAAAiE,KAAA,CAAAF,QAAA;MACA,IAAAG,GAAA,GAAAlE,CAAA,CAAAmE,KAAA,CAAAJ,QAAA,WAAAK,KAAA,eAAApE,CAAA,CAAAmE,KAAA,CAAAJ,QAAA,WAAAK,KAAA;MACA,IAAAC,OAAA,OAAAC,KAAA;MACAN,SAAA,CAAAlB,OAAA,CAAAC,IAAA;QACA,IAAAV,KAAA,GAAArC,CAAA,CAAAuE,GAAA,CAAAxB,IAAA;QACAsB,OAAA,CAAA/E,IAAA;UACAmB,GAAA,EAAAlD,UAAA,CAAAwF,IAAA,IAAAZ,MAAA;UACAqC,IAAA,EAAAjH,UAAA,CAAAwF,IAAA,IAAAZ,MAAA;UACAE,KAAA,EAAAA,KAAA;UACA6B,GAAA,EAAAA,GAAA;UACAO,GAAA,EAAA9G,QAAA,CAAA+G,YAAA,CAAArC,KAAA,KAAAsC,MAAA,CAAAhH,QAAA,CAAA+G,YAAA,CAAArC,KAAA,EAAAuC,UAAA,SAAAC,OAAA;QACA;MACA;MACA;MACA,KAAAnE,OAAA,CAAA2D,OAAA;MACA,KAAAnE,MAAA,CAAAqB,QAAA;QAAAuD,GAAA,EAAAjH,IAAA;QAAAwE,KAAA,EAAAgC;MAAA;IACA;IACA;IACA3D,QAAA7C,IAAA;MACA,IAAAkH,IAAA,GAAAlH,IAAA;MACA,IAAAmH,OAAA,GAAAhF,CAAA,CAAAiE,KAAA,CAAAc,IAAA;MACA,IAAAE,MAAA;MACAD,OAAA,CAAAlC,OAAA,CAAAC,IAAA;QACA,IAAAmC,WAAA,GAAAlF,CAAA,CAAAmF,OAAA,CAAAnF,CAAA,CAAAuE,GAAA,CAAAxB,IAAA;QACA,IAAAmB,GAAA,GAAAlE,CAAA,CAAAkE,GAAA,CAAAgB,WAAA,gBAAAlF,CAAA,CAAAkE,GAAA,CAAAgB,WAAA;QACAD,MAAA,CAAA3F,IAAA;UACAmB,GAAA,GAAAsC,IAAA,IAAAtC,GAAA,EAAAsC,IAAA,CAAAA,IAAA,CAAArD,MAAA,MAAAe,GAAA;UACA4B,KAAA,EAAArC,CAAA,CAAAuE,GAAA,CAAAxB,IAAA;UACAmB,GAAA,EAAAA,GAAA;UACAO,GAAA,EAAA9G,QAAA,CAAA+G,YAAA,CAAAQ,WAAA,KAAAP,MAAA,CAAAhH,QAAA,CAAA+G,YAAA,CAAAQ,WAAA,EAAAN,UAAA,SAAAC,OAAA;UACAO,IAAA,EAAAxH,YAAA,CAAAyH,kBAAA,CAAAH,WAAA;QACA;MACA;MACA,KAAAH,IAAA,GAAAE,MAAA;MACA7D,OAAA,CAAAC,GAAA,CAAA4D,MAAA;IACA;IACA;IACAK,WAAAzH,IAAA;MACAA,IAAA,GAAAmC,CAAA,CAAA2D,SAAA,CAAA9F,IAAA;MACA,IAAA8C,CAAA,OAAAtC,IAAA,CAAAR,IAAA,IAAA+F,KAAA;MACA,IAAA7D,CAAA,OAAA1B,IAAA,CAAAR,IAAA,IAAA+F,KAAA;MACA,IAAAC,MAAA,GAAAlD,CAAA,CAAAE,QAAA;MACA,IAAAiD,MAAA,GAAA/D,CAAA,CAAAc,QAAA;MACA,IAAA0E,MAAA;MACA,IAAArD,IAAA,GAAAsD,IAAA,CAAAC,GAAA,CAAA1F,CAAA,GAAAY,CAAA;MACA,IAAA+E,QAAA,GAAAF,IAAA,CAAAG,KAAA,CAAAzD,IAAA,GAAAqD,MAAA;MACA,IAAAxB,QAAA,QAAAZ,UAAA,CAAAtF,IAAA,KAAAgG,MAAA,EAAAC,MAAA;MACA,IAAAE,SAAA,GAAA0B,QAAA,QAAA1F,CAAA,CAAAiE,KAAA,CAAAF,QAAA,kBAAAA,QAAA;MACA,IAAAG,GAAA,GAAAlE,CAAA,CAAAmE,KAAA,CAAAJ,QAAA,WAAAK,KAAA,eAAApE,CAAA,CAAAmE,KAAA,CAAAJ,QAAA,WAAAK,KAAA;MACA,IAAAC,OAAA,OAAAC,KAAA;MACAN,SAAA,CAAAlB,OAAA,CAAAC,IAAA;QACA,IAAAV,KAAA,GAAArC,CAAA,CAAAuE,GAAA,CAAAxB,IAAA;QACAsB,OAAA,CAAA/E,IAAA;UACAmB,GAAA,GAAAlD,UAAA,CAAAwF,IAAA,IAAAZ,MAAA,oBAAA5E,UAAA,CAAAwF,IAAA,CAAAA,IAAA,CAAArD,MAAA,MAAAyC,MAAA;UACAE,KAAA,EAAArC,CAAA,CAAAiE,KAAA,CAAA5B,KAAA;UACA6B,GAAA,EAAAA,GAAA;UACAO,GAAA,EAAA9G,QAAA,CAAA+G,YAAA,CAAArC,KAAA,KAAAsC,MAAA,CAAAhH,QAAA,CAAA+G,YAAA,CAAArC,KAAA,EAAAuC,UAAA,SAAAC,OAAA;UACAO,IAAA,EAAAxH,YAAA,CAAAyH,kBAAA,CAAAhD,KAAA;QACA;MACA;MACAjB,OAAA,CAAAC,GAAA,CAAAgD,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}