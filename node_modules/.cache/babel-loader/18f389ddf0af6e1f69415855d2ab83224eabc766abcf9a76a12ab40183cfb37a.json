{"ast":null,"code":"import Cookies from \"js-cookie\";\nexport default {\n  data() {\n    return {\n      loginForm: {\n        name: '',\n        password: '',\n        rememberMe: false\n      },\n      loading: false,\n      loginRules: {\n        name: [{\n          required: true,\n          trigger: \"blur\",\n          message: \" \"\n        }],\n        password: [{\n          required: true,\n          trigger: \"blur\",\n          message: \" \"\n        }]\n      }\n    };\n  },\n  created() {\n    this.getCookie;\n  },\n  methods: {\n    getCookie() {\n      const name = Cookies.get(\"name\");\n      const password = Cookies.get(\"password\");\n      const rememberMe = Cookies.get(\"rememberMe\");\n      this.loginForm = {\n        name: name === undefined ? this.loginForm.name : name,\n        password: password === undefined ? this.loginForm.password : decrypt(password),\n        rememberMe: rememberMe === undefined ? false : Boolean(rememberMe)\n      };\n    },\n    handleLogin() {\n      this.$refs.loginForm.validate(valid => {\n        console.log(vaild);\n        if (valid) {\n          this.loading = true;\n          if (this.loginForm.rememberMe) {\n            Cookies.set(\"name\", this.loginForm.name, {\n              expires: 30\n            });\n            Cookies.set(\"password\", encrypt(this.loginForm.password), {\n              expires: 30\n            });\n            Cookies.set(\"rememberMe\", this.loginForm.rememberMe, {\n              expires: 30\n            });\n          } else {\n            Cookies.remove(\"name\");\n            Cookies.remove(\"password\");\n            Cookies.remove(\"rememberMe\");\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Cookies","data","loginForm","name","password","rememberMe","loading","loginRules","required","trigger","message","created","getCookie","methods","get","undefined","decrypt","Boolean","handleLogin","$refs","validate","valid","console","log","vaild","set","expires","encrypt","remove"],"sources":["src/views/login/login.vue"],"sourcesContent":["<template>\n        <div class=\"login\">\n            <div class='login-box' >\n                <div  class='title' >{{ $t(\"message.themeTitle\") }}</div>\n                <div  class='login-form'>\n                    <el-form ref=\"form\" :model=\"loginForm\"  :rules=\"loginRules\">\n                        <el-form-item  prop='name'>\n                            <el-input v-model=\"loginForm.name\"\n                                prefix-icon=\"el-icon-user\"\n                                :placeholder=\"$t('message.login.placeholderName')\"></el-input>\n                        </el-form-item>\n                        <el-form-item  prop='password'>\n                            <el-input v-model=\"loginForm.password\"\n                                :placeholder=\"$t('message.login.placeholderPwd')\"\n                                prefix-icon=\"el-icon-lock\"></el-input>\n                        </el-form-item>\n                        <el-form-item >\n                            <el-checkbox v-model=\"loginForm.rememberMe\">\n                                {{ $t(\"message.login.rememberPwdText\") }}\n                            </el-checkbox>\n                        </el-form-item>\n                        <el-form-item >\n                            <el-button :loading=\"loading\" class=\"login-submit\" style=\"width: 100%\" type=\"primary\" @click.native.prevent=\"handleLogin\">\n                                <span v-if=\"!loading\">{{ $t(\"message.login.loginBtnText\") }}</span>\n                                <span v-else>{{ $t(\"message.login.loginInBtnText\") }}</span>\n                            </el-button>\n                        </el-form-item>\n                    </el-form>\n                </div>\n            </div>\n        </div>\n</template>\n\n<script>\nimport Cookies from \"js-cookie\"\nexport default {\n    data(){\n        return {\n            loginForm:{\n                name:'',\n                password:'',\n                rememberMe:false\n            },\n            loading:false,\n            loginRules: {\n                name: [{ required: true, trigger: \"blur\", message: \" \" }],\n                password: [{ required: true, trigger: \"blur\", message: \" \" }]\n            },\n        }\n    },\n    created(){\n        this.getCookie\n    },\n    methods:{\n        getCookie() {\n            const name = Cookies.get(\"name\")\n            const password = Cookies.get(\"password\")\n            const rememberMe = Cookies.get(\"rememberMe\")\n        this.loginForm = {\n            name: name === undefined ? this.loginForm.name : name,\n            password: password === undefined ? this.loginForm.password : decrypt(password),\n            rememberMe: rememberMe === undefined ? false : Boolean(rememberMe)\n        }\n        },\n        handleLogin(){\n             this.$refs.loginForm.validate((valid) => {\n                console.log(vaild)\n                if(valid){\n                    this.loading = true\n                    if (this.loginForm.rememberMe) {\n                        Cookies.set(\"name\", this.loginForm.name, { expires: 30 })\n                        Cookies.set(\"password\", encrypt(this.loginForm.password), { expires: 30 })\n                        Cookies.set(\"rememberMe\", this.loginForm.rememberMe, { expires: 30 })\n                    } else {\n                        Cookies.remove(\"name\")\n                        Cookies.remove(\"password\")\n                        Cookies.remove(\"rememberMe\")\n                    }\n                }\n             })\n        }\n    }\n}\n</script>\n\n<style >\n    .login{\n        height: 100%;\n        width:100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background: url(\"/src/assets/image/bottomRighht.png\") no-repeat;\n        background-size: cover;\n    }\n    .login-box{\n        padding:80px;\n        background:rgba(255,255,255,0.9);\n        border-radius:14px;\n        width:480px;\n        box-sizing: border-box;\n    }\n    .title{\n        text-align: center;\n        margin-bottom:50px;\n        font-size:28px;\n        font-weight: bold;\n        color:#333;\n    }\n    .el-input__inner{\n        background: none;\n    }\n</style>"],"mappings":"AAkCA,OAAAA,OAAA;AACA;EACAC,KAAA;IACA;MACAC,SAAA;QACAC,IAAA;QACAC,QAAA;QACAC,UAAA;MACA;MACAC,OAAA;MACAC,UAAA;QACAJ,IAAA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAN,QAAA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACAD,UAAA;MACA,MAAAT,IAAA,GAAAH,OAAA,CAAAc,GAAA;MACA,MAAAV,QAAA,GAAAJ,OAAA,CAAAc,GAAA;MACA,MAAAT,UAAA,GAAAL,OAAA,CAAAc,GAAA;MACA,KAAAZ,SAAA;QACAC,IAAA,EAAAA,IAAA,KAAAY,SAAA,QAAAb,SAAA,CAAAC,IAAA,GAAAA,IAAA;QACAC,QAAA,EAAAA,QAAA,KAAAW,SAAA,QAAAb,SAAA,CAAAE,QAAA,GAAAY,OAAA,CAAAZ,QAAA;QACAC,UAAA,EAAAA,UAAA,KAAAU,SAAA,WAAAE,OAAA,CAAAZ,UAAA;MACA;IACA;IACAa,YAAA;MACA,KAAAC,KAAA,CAAAjB,SAAA,CAAAkB,QAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAC,KAAA;QACA,IAAAH,KAAA;UACA,KAAAf,OAAA;UACA,SAAAJ,SAAA,CAAAG,UAAA;YACAL,OAAA,CAAAyB,GAAA,cAAAvB,SAAA,CAAAC,IAAA;cAAAuB,OAAA;YAAA;YACA1B,OAAA,CAAAyB,GAAA,aAAAE,OAAA,MAAAzB,SAAA,CAAAE,QAAA;cAAAsB,OAAA;YAAA;YACA1B,OAAA,CAAAyB,GAAA,oBAAAvB,SAAA,CAAAG,UAAA;cAAAqB,OAAA;YAAA;UACA;YACA1B,OAAA,CAAA4B,MAAA;YACA5B,OAAA,CAAA4B,MAAA;YACA5B,OAAA,CAAA4B,MAAA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}