{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2023 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _classPrivateMethodInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _defineProperty = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _classPrivateGetter = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateGetter.js\").default;\nvar _assertClassBrand = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/assertClassBrand.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldSet2.js\").default;\nvar _NetworkRequest;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkRequest = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst assert_js_1 = require(\"../../../utils/assert.js\");\nconst Deferred_js_1 = require(\"../../../utils/Deferred.js\");\nconst log_js_1 = require(\"../../../utils/log.js\");\nconst NetworkUtils_js_1 = require(\"./NetworkUtils.js\");\nconst REALM_REGEX = /(?<=realm=\").*(?=\")/;\n/** Abstracts one individual network request. */\nvar _id = /*#__PURE__*/new WeakMap();\nvar _fetchId = /*#__PURE__*/new WeakMap();\nvar _interceptPhase = /*#__PURE__*/new WeakMap();\nvar _servedFromCache = /*#__PURE__*/new WeakMap();\nvar _redirectCount = /*#__PURE__*/new WeakMap();\nvar _request = /*#__PURE__*/new WeakMap();\nvar _response = /*#__PURE__*/new WeakMap();\nvar _eventManager = /*#__PURE__*/new WeakMap();\nvar _networkStorage = /*#__PURE__*/new WeakMap();\nvar _cdpTarget = /*#__PURE__*/new WeakMap();\nvar _logger = /*#__PURE__*/new WeakMap();\nvar _emittedEvents = /*#__PURE__*/new WeakMap();\nvar _NetworkRequest_brand = /*#__PURE__*/new WeakSet();\nclass NetworkRequest {\n  constructor(id, eventManager, networkStorage, cdpTarget, redirectCount = 0, logger) {\n    _classPrivateMethodInitSpec(this, _NetworkRequest_brand);\n    /**\n     * Each network request has an associated request id, which is a string\n     * uniquely identifying that request.\n     *\n     * The identifier for a request resulting from a redirect matches that of the\n     * request that initiated it.\n     */\n    _classPrivateFieldInitSpec(this, _id, void 0);\n    _classPrivateFieldInitSpec(this, _fetchId, void 0);\n    /**\n     * Indicates the network intercept phase, if the request is currently blocked.\n     * Undefined necessarily implies that the request is not blocked.\n     */\n    _classPrivateFieldInitSpec(this, _interceptPhase, void 0);\n    _classPrivateFieldInitSpec(this, _servedFromCache, false);\n    _classPrivateFieldInitSpec(this, _redirectCount, void 0);\n    _classPrivateFieldInitSpec(this, _request, {});\n    _classPrivateFieldInitSpec(this, _response, {});\n    _classPrivateFieldInitSpec(this, _eventManager, void 0);\n    _classPrivateFieldInitSpec(this, _networkStorage, void 0);\n    _classPrivateFieldInitSpec(this, _cdpTarget, void 0);\n    _classPrivateFieldInitSpec(this, _logger, void 0);\n    _classPrivateFieldInitSpec(this, _emittedEvents, {\n      [protocol_js_1.ChromiumBidi.Network.EventNames.AuthRequired]: false,\n      [protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent]: false,\n      [protocol_js_1.ChromiumBidi.Network.EventNames.FetchError]: false,\n      [protocol_js_1.ChromiumBidi.Network.EventNames.ResponseCompleted]: false,\n      [protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted]: false\n    });\n    _defineProperty(this, \"waitNextPhase\", new Deferred_js_1.Deferred());\n    _classPrivateFieldSet(_id, this, id);\n    _classPrivateFieldSet(_eventManager, this, eventManager);\n    _classPrivateFieldSet(_networkStorage, this, networkStorage);\n    _classPrivateFieldSet(_cdpTarget, this, cdpTarget);\n    _classPrivateFieldSet(_redirectCount, this, redirectCount);\n    _classPrivateFieldSet(_logger, this, logger);\n  }\n  get id() {\n    return _classPrivateFieldGet(_id, this);\n  }\n  get fetchId() {\n    return _classPrivateFieldGet(_fetchId, this);\n  }\n  /**\n   * When blocked returns the phase for it\n   */\n  get interceptPhase() {\n    return _classPrivateFieldGet(_interceptPhase, this);\n  }\n  get url() {\n    const fragment = _classPrivateFieldGet(_request, this).info?.request.urlFragment ?? _classPrivateFieldGet(_request, this).paused?.request.urlFragment ?? '';\n    const url = _classPrivateFieldGet(_response, this).info?.url ?? _classPrivateFieldGet(_response, this).paused?.request.url ?? _classPrivateFieldGet(_request, this).auth?.request.url ?? _classPrivateFieldGet(_request, this).info?.request.url ?? _classPrivateFieldGet(_request, this).paused?.request.url ?? NetworkRequest.unknownParameter;\n    return `${url}${fragment}`;\n  }\n  get method() {\n    return _classPrivateFieldGet(_request, this).info?.request.method ?? _classPrivateFieldGet(_request, this).paused?.request.method ?? _classPrivateFieldGet(_request, this).auth?.request.method ?? _classPrivateFieldGet(_response, this).paused?.request.method ?? NetworkRequest.unknownParameter;\n  }\n  get redirectCount() {\n    return _classPrivateFieldGet(_redirectCount, this);\n  }\n  get cdpTarget() {\n    return _classPrivateFieldGet(_cdpTarget, this);\n  }\n  get cdpClient() {\n    return _classPrivateFieldGet(_cdpTarget, this).cdpClient;\n  }\n  isRedirecting() {\n    return Boolean(_classPrivateFieldGet(_request, this).info);\n  }\n  isDataUrl() {\n    return this.url.startsWith('data:');\n  }\n  handleRedirect(event) {\n    // TODO: use event.redirectResponse;\n    // Temporary workaround to emit ResponseCompleted event for redirects\n    _classPrivateFieldGet(_response, this).hasExtraInfo = false;\n    _classPrivateFieldGet(_response, this).info = event.redirectResponse;\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEventsIfReady).call(this, {\n      wasRedirected: true\n    });\n  }\n  onRequestWillBeSentEvent(event) {\n    _classPrivateFieldGet(_request, this).info = event;\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEventsIfReady).call(this);\n  }\n  onRequestWillBeSentExtraInfoEvent(event) {\n    _classPrivateFieldGet(_request, this).extraInfo = event;\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEventsIfReady).call(this);\n  }\n  onResponseReceivedExtraInfoEvent(event) {\n    if (event.statusCode >= 300 && event.statusCode <= 399 && _classPrivateFieldGet(_request, this).info && event.headers['location'] === _classPrivateFieldGet(_request, this).info.request.url) {\n      // We received the Response Extra info for the redirect\n      // Too late so we need to skip it as it will\n      // fire wrongly for the last one\n      return;\n    }\n    _classPrivateFieldGet(_response, this).extraInfo = event;\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEventsIfReady).call(this);\n  }\n  onResponseReceivedEvent(event) {\n    _classPrivateFieldGet(_response, this).hasExtraInfo = event.hasExtraInfo;\n    _classPrivateFieldGet(_response, this).info = event.response;\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEventsIfReady).call(this);\n  }\n  onServedFromCache() {\n    _classPrivateFieldSet(_servedFromCache, this, true);\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEventsIfReady).call(this);\n  }\n  onLoadingFailedEvent(event) {\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEventsIfReady).call(this, {\n      hasFailed: true\n    });\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEvent).call(this, () => {\n      return {\n        method: protocol_js_1.ChromiumBidi.Network.EventNames.FetchError,\n        params: {\n          ..._assertClassBrand(_NetworkRequest_brand, this, _getBaseEventParams).call(this),\n          errorText: event.errorText\n        }\n      };\n    });\n  }\n  /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-failRequest */\n  async failRequest(errorReason) {\n    (0, assert_js_1.assert)(_classPrivateFieldGet(_fetchId, this), 'Network Interception not set-up.');\n    await this.cdpClient.sendCommand('Fetch.failRequest', {\n      requestId: _classPrivateFieldGet(_fetchId, this),\n      errorReason\n    });\n    _classPrivateFieldSet(_interceptPhase, this, undefined);\n  }\n  onRequestPaused(event) {\n    _classPrivateFieldSet(_fetchId, this, event.requestId);\n    // CDP https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#event-requestPaused\n    if (event.responseStatusCode || event.responseErrorReason) {\n      _classPrivateFieldGet(_response, this).paused = event;\n      if (_assertClassBrand(_NetworkRequest_brand, this, _isBlockedInPhase).call(this, \"responseStarted\" /* Network.InterceptPhase.ResponseStarted */) &&\n      // CDP may emit multiple events for a single request\n      !_classPrivateFieldGet(_emittedEvents, this)[protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted] &&\n      // Continue all response that have not enabled Network domain\n      _classPrivateFieldGet(_fetchId, this) !== this.id) {\n        _classPrivateFieldSet(_interceptPhase, this, \"responseStarted\") /* Network.InterceptPhase.ResponseStarted */;\n      } else {\n        void this.continueResponse();\n      }\n    } else {\n      _classPrivateFieldGet(_request, this).paused = event;\n      if (_assertClassBrand(_NetworkRequest_brand, this, _isBlockedInPhase).call(this, \"beforeRequestSent\" /* Network.InterceptPhase.BeforeRequestSent */) &&\n      // CDP may emit multiple events for a single request\n      !_classPrivateFieldGet(_emittedEvents, this)[protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent] &&\n      // Continue all requests that have not enabled Network domain\n      _classPrivateFieldGet(_fetchId, this) !== this.id) {\n        _classPrivateFieldSet(_interceptPhase, this, \"beforeRequestSent\") /* Network.InterceptPhase.BeforeRequestSent */;\n      } else {\n        void this.continueRequest();\n      }\n    }\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEventsIfReady).call(this);\n  }\n  onAuthRequired(event) {\n    _classPrivateFieldSet(_fetchId, this, event.requestId);\n    _classPrivateFieldGet(_request, this).auth = event;\n    if (_assertClassBrand(_NetworkRequest_brand, this, _isBlockedInPhase).call(this, \"authRequired\" /* Network.InterceptPhase.AuthRequired */) &&\n    // Continue all auth requests that have not enabled Network domain\n    _classPrivateFieldGet(_fetchId, this) !== this.id) {\n      _classPrivateFieldSet(_interceptPhase, this, \"authRequired\") /* Network.InterceptPhase.AuthRequired */;\n    } else {\n      void this.continueWithAuth();\n    }\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEvent).call(this, () => {\n      return {\n        method: protocol_js_1.ChromiumBidi.Network.EventNames.AuthRequired,\n        params: {\n          ..._assertClassBrand(_NetworkRequest_brand, this, _getBaseEventParams).call(this, \"authRequired\" /* Network.InterceptPhase.AuthRequired */),\n          response: _assertClassBrand(_NetworkRequest_brand, this, _getResponseEventParams).call(this)\n        }\n      };\n    });\n  }\n  /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-continueRequest */\n  async continueRequest({\n    url,\n    method,\n    headers,\n    postData\n  } = {}) {\n    (0, assert_js_1.assert)(_classPrivateFieldGet(_fetchId, this), 'Network Interception not set-up.');\n    await this.cdpClient.sendCommand('Fetch.continueRequest', {\n      requestId: _classPrivateFieldGet(_fetchId, this),\n      url,\n      method,\n      headers,\n      postData\n    });\n    _classPrivateFieldSet(_interceptPhase, this, undefined);\n  }\n  /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-continueResponse */\n  async continueResponse({\n    responseCode,\n    responsePhrase,\n    responseHeaders\n  } = {}) {\n    (0, assert_js_1.assert)(_classPrivateFieldGet(_fetchId, this), 'Network Interception not set-up.');\n    await this.cdpClient.sendCommand('Fetch.continueResponse', {\n      requestId: _classPrivateFieldGet(_fetchId, this),\n      responseCode,\n      responsePhrase,\n      responseHeaders\n    });\n    _classPrivateFieldSet(_interceptPhase, this, undefined);\n  }\n  /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-continueWithAuth */\n  async continueWithAuth(authChallengeResponse = {\n    response: 'Default'\n  }) {\n    (0, assert_js_1.assert)(_classPrivateFieldGet(_fetchId, this), 'Network Interception not set-up.');\n    await this.cdpClient.sendCommand('Fetch.continueWithAuth', {\n      requestId: _classPrivateFieldGet(_fetchId, this),\n      authChallengeResponse\n    });\n    _classPrivateFieldSet(_interceptPhase, this, undefined);\n  }\n  /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-provideResponse */\n  async provideResponse({\n    responseCode,\n    responsePhrase,\n    responseHeaders,\n    body\n  }) {\n    (0, assert_js_1.assert)(_classPrivateFieldGet(_fetchId, this), 'Network Interception not set-up.');\n    await this.cdpClient.sendCommand('Fetch.fulfillRequest', {\n      requestId: _classPrivateFieldGet(_fetchId, this),\n      responseCode,\n      responsePhrase,\n      responseHeaders,\n      body\n    });\n    _classPrivateFieldSet(_interceptPhase, this, undefined);\n  }\n  /** Returns the HTTP status code associated with this request if any. */\n  get statusCode() {\n    return _classPrivateFieldGet(_response, this).paused?.responseStatusCode ?? _classPrivateFieldGet(_response, this).extraInfo?.statusCode ?? _classPrivateFieldGet(_response, this).info?.status;\n  }\n}\n_NetworkRequest = NetworkRequest;\nfunction _phaseChanged() {\n  this.waitNextPhase.resolve();\n  this.waitNextPhase = new Deferred_js_1.Deferred();\n}\nfunction _interceptsInPhase(phase) {\n  if (!_classPrivateFieldGet(_cdpTarget, this).isSubscribedTo(`network.${phase}`)) {\n    return new Set();\n  }\n  return _classPrivateFieldGet(_networkStorage, this).getInterceptsForPhase(this, phase);\n}\nfunction _isBlockedInPhase(phase) {\n  return _assertClassBrand(_NetworkRequest_brand, this, _interceptsInPhase).call(this, phase).size > 0;\n}\nfunction _emitEventsIfReady(options = {}) {\n  const requestExtraInfoCompleted =\n  // Flush redirects\n  options.wasRedirected || options.hasFailed || this.isDataUrl() || Boolean(_classPrivateFieldGet(_request, this).extraInfo) || // Requests from cache don't have extra info\n  _classPrivateFieldGet(_servedFromCache, this) ||\n  // Sometimes there is no extra info and the response\n  // is the only place we can find out\n  Boolean(_classPrivateFieldGet(_response, this).info && !_classPrivateFieldGet(_response, this).hasExtraInfo);\n  const noInterceptionExpected =\n  // We can't intercept data urls from CDP\n  this.isDataUrl() || // Cached requests never hit the network\n  _classPrivateFieldGet(_servedFromCache, this);\n  const requestInterceptionExpected = !noInterceptionExpected && _assertClassBrand(_NetworkRequest_brand, this, _isBlockedInPhase).call(this, \"beforeRequestSent\" /* Network.InterceptPhase.BeforeRequestSent */);\n  const requestInterceptionCompleted = !requestInterceptionExpected || requestInterceptionExpected && Boolean(_classPrivateFieldGet(_request, this).paused);\n  if (Boolean(_classPrivateFieldGet(_request, this).info) && (requestInterceptionExpected ? requestInterceptionCompleted : requestExtraInfoCompleted)) {\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEvent).call(this, _assertClassBrand(_NetworkRequest_brand, this, _getBeforeRequestEvent).bind(this));\n  }\n  const responseExtraInfoCompleted = Boolean(_classPrivateFieldGet(_response, this).extraInfo) || // Response from cache don't have extra info\n  _classPrivateFieldGet(_servedFromCache, this) ||\n  // Don't expect extra info if the flag is false\n  Boolean(_classPrivateFieldGet(_response, this).info && !_classPrivateFieldGet(_response, this).hasExtraInfo);\n  const responseInterceptionExpected = !noInterceptionExpected && _assertClassBrand(_NetworkRequest_brand, this, _isBlockedInPhase).call(this, \"responseStarted\" /* Network.InterceptPhase.ResponseStarted */);\n  if (_classPrivateFieldGet(_response, this).info || responseInterceptionExpected && Boolean(_classPrivateFieldGet(_response, this).paused)) {\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEvent).call(this, _assertClassBrand(_NetworkRequest_brand, this, _getResponseStartedEvent).bind(this));\n  }\n  const responseInterceptionCompleted = !responseInterceptionExpected || responseInterceptionExpected && Boolean(_classPrivateFieldGet(_response, this).paused);\n  if (Boolean(_classPrivateFieldGet(_response, this).info) && responseExtraInfoCompleted && responseInterceptionCompleted) {\n    _assertClassBrand(_NetworkRequest_brand, this, _emitEvent).call(this, _assertClassBrand(_NetworkRequest_brand, this, _getResponseReceivedEvent).bind(this));\n  }\n}\nfunction _get_context(_this) {\n  return _classPrivateFieldGet(_response, _this).paused?.frameId ?? _classPrivateFieldGet(_request, _this).info?.frameId ?? _classPrivateFieldGet(_request, _this).paused?.frameId ?? _classPrivateFieldGet(_request, _this).auth?.frameId ?? null;\n}\nfunction _emitEvent(getEvent) {\n  let event;\n  try {\n    event = getEvent();\n  } catch (error) {\n    _classPrivateFieldGet(_logger, this)?.call(this, log_js_1.LogType.debugError, error);\n    return;\n  }\n  if (_assertClassBrand(_NetworkRequest_brand, this, _isIgnoredEvent).call(this) || _classPrivateFieldGet(_emittedEvents, this)[event.method] &&\n  // Special case this event can be emitted multiple times\n  event.method !== protocol_js_1.ChromiumBidi.Network.EventNames.AuthRequired) {\n    return;\n  }\n  _assertClassBrand(_NetworkRequest_brand, this, _phaseChanged).call(this);\n  _classPrivateFieldGet(_emittedEvents, this)[event.method] = true;\n  _classPrivateFieldGet(_eventManager, this).registerEvent(Object.assign(event, {\n    type: 'event'\n  }), _classPrivateGetter(_NetworkRequest_brand, this, _get_context));\n}\nfunction _getBaseEventParams(phase) {\n  const interceptProps = {\n    isBlocked: false\n  };\n  if (phase) {\n    const blockedBy = _assertClassBrand(_NetworkRequest_brand, this, _interceptsInPhase).call(this, phase);\n    interceptProps.isBlocked = blockedBy.size > 0;\n    if (interceptProps.isBlocked) {\n      interceptProps.intercepts = [...blockedBy];\n    }\n  }\n  return {\n    context: _classPrivateGetter(_NetworkRequest_brand, this, _get_context),\n    navigation: _assertClassBrand(_NetworkRequest_brand, this, _getNavigationId).call(this),\n    redirectCount: _classPrivateFieldGet(_redirectCount, this),\n    request: _assertClassBrand(_NetworkRequest_brand, this, _getRequestData).call(this),\n    // Timestamp should be in milliseconds, while CDP provides it in seconds.\n    timestamp: Math.round((_classPrivateFieldGet(_request, this).info?.wallTime ?? 0) * 1000),\n    // Contains isBlocked and intercepts\n    ...interceptProps\n  };\n}\nfunction _getResponseEventParams() {\n  // Chromium sends wrong extraInfo events for responses served from cache.\n  // See https://github.com/puppeteer/puppeteer/issues/9965 and\n  // https://crbug.com/1340398.\n  if (_classPrivateFieldGet(_response, this).info?.fromDiskCache) {\n    _classPrivateFieldGet(_response, this).extraInfo = undefined;\n  }\n  // TODO: get headers from Fetch.requestPaused\n  const headers = (0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(_classPrivateFieldGet(_response, this).info?.headers);\n  // TODO: get headers from Fetch.requestPaused\n  const authChallenges = _assertClassBrand(_NetworkRequest_brand, this, _authChallenges).call(this, _classPrivateFieldGet(_response, this).info?.headers ?? {});\n  return {\n    url: this.url,\n    protocol: _classPrivateFieldGet(_response, this).info?.protocol ?? '',\n    status: this.statusCode ?? -1,\n    // TODO: Throw an exception or use some other status code?\n    statusText: _classPrivateFieldGet(_response, this).info?.statusText || _classPrivateFieldGet(_response, this).paused?.responseStatusText || '',\n    fromCache: _classPrivateFieldGet(_response, this).info?.fromDiskCache || _classPrivateFieldGet(_response, this).info?.fromPrefetchCache || _classPrivateFieldGet(_servedFromCache, this),\n    headers,\n    mimeType: _classPrivateFieldGet(_response, this).info?.mimeType || '',\n    bytesReceived: _classPrivateFieldGet(_response, this).info?.encodedDataLength || 0,\n    headersSize: (0, NetworkUtils_js_1.computeHeadersSize)(headers),\n    // TODO: consider removing from spec.\n    bodySize: 0,\n    content: {\n      // TODO: consider removing from spec.\n      size: 0\n    },\n    ...(authChallenges ? {\n      authChallenges\n    } : {})\n  };\n}\nfunction _getNavigationId() {\n  if (!_classPrivateFieldGet(_request, this).info || !_classPrivateFieldGet(_request, this).info.loaderId ||\n  // When we navigate all CDP network events have `loaderId`\n  // CDP's `loaderId` and `requestId` match when\n  // that request triggered the loading\n  _classPrivateFieldGet(_request, this).info.loaderId !== _classPrivateFieldGet(_request, this).info.requestId) {\n    return null;\n  }\n  return _classPrivateFieldGet(_request, this).info.loaderId;\n}\nfunction _getRequestData() {\n  const cookies = _classPrivateFieldGet(_request, this).extraInfo ? _getCookies.call(_NetworkRequest, _classPrivateFieldGet(_request, this).extraInfo.associatedCookies) : [];\n  const headers = (0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(_classPrivateFieldGet(_request, this).info?.request.headers);\n  return {\n    request: _classPrivateFieldGet(_id, this),\n    url: this.url,\n    method: this.method,\n    headers,\n    cookies,\n    headersSize: (0, NetworkUtils_js_1.computeHeadersSize)(headers),\n    // TODO: implement.\n    bodySize: 0,\n    timings: _assertClassBrand(_NetworkRequest_brand, this, _getTimings).call(this)\n  };\n}\n// TODO: implement.\nfunction _getTimings() {\n  return {\n    timeOrigin: 0,\n    requestTime: 0,\n    redirectStart: 0,\n    redirectEnd: 0,\n    fetchStart: 0,\n    dnsStart: 0,\n    dnsEnd: 0,\n    connectStart: 0,\n    connectEnd: 0,\n    tlsStart: 0,\n    requestStart: 0,\n    responseStart: 0,\n    responseEnd: 0\n  };\n}\nfunction _getBeforeRequestEvent() {\n  (0, assert_js_1.assert)(_classPrivateFieldGet(_request, this).info, 'RequestWillBeSentEvent is not set');\n  return {\n    method: protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent,\n    params: {\n      ..._assertClassBrand(_NetworkRequest_brand, this, _getBaseEventParams).call(this, \"beforeRequestSent\" /* Network.InterceptPhase.BeforeRequestSent */),\n      initiator: {\n        type: _getInitiatorType.call(_NetworkRequest, _classPrivateFieldGet(_request, this).info.initiator.type),\n        columnNumber: _classPrivateFieldGet(_request, this).info.initiator.columnNumber,\n        lineNumber: _classPrivateFieldGet(_request, this).info.initiator.lineNumber,\n        stackTrace: _classPrivateFieldGet(_request, this).info.initiator.stack,\n        request: _classPrivateFieldGet(_request, this).info.initiator.requestId\n      }\n    }\n  };\n}\nfunction _getResponseStartedEvent() {\n  (0, assert_js_1.assert)(_classPrivateFieldGet(_request, this).info, 'RequestWillBeSentEvent is not set');\n  (0, assert_js_1.assert)(\n  // The response paused comes before any data for the response\n  _classPrivateFieldGet(_response, this).paused || _classPrivateFieldGet(_response, this).info, 'ResponseReceivedEvent is not set');\n  return {\n    method: protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted,\n    params: {\n      ..._assertClassBrand(_NetworkRequest_brand, this, _getBaseEventParams).call(this, \"responseStarted\" /* Network.InterceptPhase.ResponseStarted */),\n      response: _assertClassBrand(_NetworkRequest_brand, this, _getResponseEventParams).call(this)\n    }\n  };\n}\nfunction _getResponseReceivedEvent() {\n  (0, assert_js_1.assert)(_classPrivateFieldGet(_request, this).info, 'RequestWillBeSentEvent is not set');\n  (0, assert_js_1.assert)(_classPrivateFieldGet(_response, this).info, 'ResponseReceivedEvent is not set');\n  return {\n    method: protocol_js_1.ChromiumBidi.Network.EventNames.ResponseCompleted,\n    params: {\n      ..._assertClassBrand(_NetworkRequest_brand, this, _getBaseEventParams).call(this),\n      response: _assertClassBrand(_NetworkRequest_brand, this, _getResponseEventParams).call(this)\n    }\n  };\n}\nfunction _isIgnoredEvent() {\n  const faviconUrl = '/favicon.ico';\n  return _classPrivateFieldGet(_request, this).paused?.request.url.endsWith(faviconUrl) ?? _classPrivateFieldGet(_request, this).info?.request.url.endsWith(faviconUrl) ?? false;\n}\nfunction _authChallenges(headers) {\n  if (!(this.statusCode === 401 || this.statusCode === 407)) {\n    return undefined;\n  }\n  const headerName = this.statusCode === 401 ? 'WWW-Authenticate' : 'Proxy-Authenticate';\n  const authChallenges = [];\n  for (const [header, value] of Object.entries(headers)) {\n    // TODO: Do a proper match based on https://httpwg.org/specs/rfc9110.html#credentials\n    // Or verify this works\n    if (header.localeCompare(headerName, undefined, {\n      sensitivity: 'base'\n    }) === 0) {\n      authChallenges.push({\n        scheme: value.split(' ').at(0) ?? '',\n        realm: value.match(REALM_REGEX)?.at(0) ?? ''\n      });\n    }\n  }\n  return authChallenges;\n}\nfunction _getInitiatorType(initiatorType) {\n  switch (initiatorType) {\n    case 'parser':\n    case 'script':\n    case 'preflight':\n      return initiatorType;\n    default:\n      return 'other';\n  }\n}\nfunction _getCookies(associatedCookies) {\n  return associatedCookies.filter(({\n    blockedReasons\n  }) => {\n    return !Array.isArray(blockedReasons) || blockedReasons.length === 0;\n  }).map(({\n    cookie\n  }) => (0, NetworkUtils_js_1.cdpToBiDiCookie)(cookie));\n}\n_defineProperty(NetworkRequest, \"unknownParameter\", 'UNKNOWN');\nexports.NetworkRequest = NetworkRequest;","map":{"version":3,"names":["_classPrivateMethodInitSpec","require","default","_classPrivateFieldInitSpec","_defineProperty","_classPrivateGetter","_assertClassBrand","_classPrivateFieldGet","_classPrivateFieldSet","_NetworkRequest","protocol_js_1","assert_js_1","Deferred_js_1","log_js_1","NetworkUtils_js_1","REALM_REGEX","_id","WeakMap","_fetchId","_interceptPhase","_servedFromCache","_redirectCount","_request","_response","_eventManager","_networkStorage","_cdpTarget","_logger","_emittedEvents","_NetworkRequest_brand","WeakSet","NetworkRequest","constructor","id","eventManager","networkStorage","cdpTarget","redirectCount","logger","ChromiumBidi","Network","EventNames","AuthRequired","BeforeRequestSent","FetchError","ResponseCompleted","ResponseStarted","Deferred","fetchId","interceptPhase","url","fragment","info","request","urlFragment","paused","auth","unknownParameter","method","cdpClient","isRedirecting","Boolean","isDataUrl","startsWith","handleRedirect","event","hasExtraInfo","redirectResponse","_emitEventsIfReady","call","wasRedirected","onRequestWillBeSentEvent","onRequestWillBeSentExtraInfoEvent","extraInfo","onResponseReceivedExtraInfoEvent","statusCode","headers","onResponseReceivedEvent","response","onServedFromCache","onLoadingFailedEvent","hasFailed","_emitEvent","params","_getBaseEventParams","errorText","failRequest","errorReason","assert","sendCommand","requestId","undefined","onRequestPaused","responseStatusCode","responseErrorReason","_isBlockedInPhase","continueResponse","continueRequest","onAuthRequired","continueWithAuth","_getResponseEventParams","postData","responseCode","responsePhrase","responseHeaders","authChallengeResponse","provideResponse","body","status","_phaseChanged","waitNextPhase","resolve","_interceptsInPhase","phase","isSubscribedTo","Set","getInterceptsForPhase","size","options","requestExtraInfoCompleted","noInterceptionExpected","requestInterceptionExpected","requestInterceptionCompleted","_getBeforeRequestEvent","bind","responseExtraInfoCompleted","responseInterceptionExpected","_getResponseStartedEvent","responseInterceptionCompleted","_getResponseReceivedEvent","_get_context","_this","frameId","getEvent","error","LogType","debugError","_isIgnoredEvent","registerEvent","Object","assign","type","interceptProps","isBlocked","blockedBy","intercepts","context","navigation","_getNavigationId","_getRequestData","timestamp","Math","round","wallTime","fromDiskCache","bidiNetworkHeadersFromCdpNetworkHeaders","authChallenges","_authChallenges","protocol","statusText","responseStatusText","fromCache","fromPrefetchCache","mimeType","bytesReceived","encodedDataLength","headersSize","computeHeadersSize","bodySize","content","loaderId","cookies","_getCookies","associatedCookies","timings","_getTimings","timeOrigin","requestTime","redirectStart","redirectEnd","fetchStart","dnsStart","dnsEnd","connectStart","connectEnd","tlsStart","requestStart","responseStart","responseEnd","initiator","_getInitiatorType","columnNumber","lineNumber","stackTrace","stack","faviconUrl","endsWith","headerName","header","value","entries","localeCompare","sensitivity","push","scheme","split","at","realm","match","initiatorType","filter","blockedReasons","Array","isArray","length","map","cookie","cdpToBiDiCookie","exports"],"sources":["../../../../../src/bidiMapper/modules/network/NetworkRequest.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}