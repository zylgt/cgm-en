{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateMethodInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nvar _assertClassBrand = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/assertClassBrand.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldSet2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CdpTargetManager = void 0;\nconst log_js_1 = require(\"../../../utils/log.js\");\nconst BrowsingContextImpl_js_1 = require(\"../context/BrowsingContextImpl.js\");\nconst WorkerRealm_js_1 = require(\"../script/WorkerRealm.js\");\nconst CdpTarget_js_1 = require(\"./CdpTarget.js\");\nconst cdpToBidiTargetTypes = {\n  service_worker: 'service-worker',\n  shared_worker: 'shared-worker',\n  worker: 'dedicated-worker'\n};\nvar _browserCdpClient = /*#__PURE__*/new WeakMap();\nvar _cdpConnection = /*#__PURE__*/new WeakMap();\nvar _selfTargetId = /*#__PURE__*/new WeakMap();\nvar _eventManager = /*#__PURE__*/new WeakMap();\nvar _browsingContextStorage = /*#__PURE__*/new WeakMap();\nvar _networkStorage = /*#__PURE__*/new WeakMap();\nvar _acceptInsecureCerts = /*#__PURE__*/new WeakMap();\nvar _preloadScriptStorage = /*#__PURE__*/new WeakMap();\nvar _realmStorage = /*#__PURE__*/new WeakMap();\nvar _defaultUserContextId = /*#__PURE__*/new WeakMap();\nvar _logger = /*#__PURE__*/new WeakMap();\nvar _CdpTargetManager_brand = /*#__PURE__*/new WeakSet();\nvar _workers = /*#__PURE__*/new WeakMap();\nclass CdpTargetManager {\n  constructor(cdpConnection, browserCdpClient, selfTargetId, eventManager, browsingContextStorage, realmStorage, networkStorage, preloadScriptStorage, acceptInsecureCerts, defaultUserContextId, logger) {\n    /**\n     * This method is called for each CDP session, since this class is responsible\n     * for creating and destroying all targets and browsing contexts.\n     */\n    _classPrivateMethodInitSpec(this, _CdpTargetManager_brand);\n    _classPrivateFieldInitSpec(this, _browserCdpClient, void 0);\n    _classPrivateFieldInitSpec(this, _cdpConnection, void 0);\n    _classPrivateFieldInitSpec(this, _selfTargetId, void 0);\n    _classPrivateFieldInitSpec(this, _eventManager, void 0);\n    _classPrivateFieldInitSpec(this, _browsingContextStorage, void 0);\n    _classPrivateFieldInitSpec(this, _networkStorage, void 0);\n    _classPrivateFieldInitSpec(this, _acceptInsecureCerts, void 0);\n    _classPrivateFieldInitSpec(this, _preloadScriptStorage, void 0);\n    _classPrivateFieldInitSpec(this, _realmStorage, void 0);\n    _classPrivateFieldInitSpec(this, _defaultUserContextId, void 0);\n    _classPrivateFieldInitSpec(this, _logger, void 0);\n    _classPrivateFieldInitSpec(this, _workers, new Map());\n    _classPrivateFieldSet(_acceptInsecureCerts, this, acceptInsecureCerts);\n    _classPrivateFieldSet(_cdpConnection, this, cdpConnection);\n    _classPrivateFieldSet(_browserCdpClient, this, browserCdpClient);\n    _classPrivateFieldSet(_selfTargetId, this, selfTargetId);\n    _classPrivateFieldSet(_eventManager, this, eventManager);\n    _classPrivateFieldSet(_browsingContextStorage, this, browsingContextStorage);\n    _classPrivateFieldSet(_preloadScriptStorage, this, preloadScriptStorage);\n    _classPrivateFieldSet(_networkStorage, this, networkStorage);\n    _classPrivateFieldSet(_realmStorage, this, realmStorage);\n    _classPrivateFieldSet(_defaultUserContextId, this, defaultUserContextId);\n    _classPrivateFieldSet(_logger, this, logger);\n    _assertClassBrand(_CdpTargetManager_brand, this, _setEventListeners).call(this, browserCdpClient);\n  }\n}\nfunction _setEventListeners(cdpClient) {\n  cdpClient.on('Target.attachedToTarget', params => {\n    _assertClassBrand(_CdpTargetManager_brand, this, _handleAttachedToTargetEvent).call(this, params, cdpClient);\n  });\n  cdpClient.on('Target.detachedFromTarget', _assertClassBrand(_CdpTargetManager_brand, this, _handleDetachedFromTargetEvent).bind(this));\n  cdpClient.on('Target.targetInfoChanged', _assertClassBrand(_CdpTargetManager_brand, this, _handleTargetInfoChangedEvent).bind(this));\n  cdpClient.on('Inspector.targetCrashed', () => {\n    _assertClassBrand(_CdpTargetManager_brand, this, _handleTargetCrashedEvent).call(this, cdpClient);\n  });\n  cdpClient.on('Page.frameAttached', _assertClassBrand(_CdpTargetManager_brand, this, _handleFrameAttachedEvent).bind(this));\n  cdpClient.on('Page.frameDetached', _assertClassBrand(_CdpTargetManager_brand, this, _handleFrameDetachedEvent).bind(this));\n}\nfunction _handleFrameAttachedEvent(params) {\n  const parentBrowsingContext = _classPrivateFieldGet(_browsingContextStorage, this).findContext(params.parentFrameId);\n  if (parentBrowsingContext !== undefined) {\n    BrowsingContextImpl_js_1.BrowsingContextImpl.create(params.frameId, params.parentFrameId, parentBrowsingContext.userContext, parentBrowsingContext.cdpTarget, _classPrivateFieldGet(_eventManager, this), _classPrivateFieldGet(_browsingContextStorage, this), _classPrivateFieldGet(_realmStorage, this), _classPrivateFieldGet(_logger, this));\n  }\n}\nfunction _handleFrameDetachedEvent(params) {\n  // In case of OOPiF no need in deleting BrowsingContext.\n  if (params.reason === 'swap') {\n    return;\n  }\n  _classPrivateFieldGet(_browsingContextStorage, this).findContext(params.frameId)?.dispose();\n}\nfunction _handleAttachedToTargetEvent(params, parentSessionCdpClient) {\n  const {\n    sessionId,\n    targetInfo\n  } = params;\n  const targetCdpClient = _classPrivateFieldGet(_cdpConnection, this).getCdpClient(sessionId);\n  switch (targetInfo.type) {\n    case 'page':\n    case 'iframe':\n      {\n        if (targetInfo.targetId === _classPrivateFieldGet(_selfTargetId, this)) {\n          break;\n        }\n        const cdpTarget = _assertClassBrand(_CdpTargetManager_brand, this, _createCdpTarget).call(this, targetCdpClient, targetInfo);\n        const maybeContext = _classPrivateFieldGet(_browsingContextStorage, this).findContext(targetInfo.targetId);\n        if (maybeContext) {\n          // OOPiF.\n          maybeContext.updateCdpTarget(cdpTarget);\n        } else {\n          const userContext = targetInfo.browserContextId && targetInfo.browserContextId !== _classPrivateFieldGet(_defaultUserContextId, this) ? targetInfo.browserContextId : 'default';\n          // New context.\n          BrowsingContextImpl_js_1.BrowsingContextImpl.create(targetInfo.targetId, null, userContext, cdpTarget, _classPrivateFieldGet(_eventManager, this), _classPrivateFieldGet(_browsingContextStorage, this), _classPrivateFieldGet(_realmStorage, this), _classPrivateFieldGet(_logger, this));\n        }\n        return;\n      }\n    case 'service_worker':\n    case 'worker':\n      {\n        const realm = _classPrivateFieldGet(_realmStorage, this).findRealm({\n          cdpSessionId: parentSessionCdpClient.sessionId\n        });\n        // If there is no browsing context, this worker is already terminated.\n        if (!realm) {\n          break;\n        }\n        const cdpTarget = _assertClassBrand(_CdpTargetManager_brand, this, _createCdpTarget).call(this, targetCdpClient, targetInfo);\n        _assertClassBrand(_CdpTargetManager_brand, this, _handleWorkerTarget).call(this, cdpToBidiTargetTypes[targetInfo.type], cdpTarget, realm);\n        return;\n      }\n    // In CDP, we only emit shared workers on the browser and not the set of\n    // frames that use the shared worker. If we change this in the future to\n    // behave like service workers (emits on both browser and frame targets),\n    // we can remove this block and merge service workers with the above one.\n    case 'shared_worker':\n      {\n        const cdpTarget = _assertClassBrand(_CdpTargetManager_brand, this, _createCdpTarget).call(this, targetCdpClient, targetInfo);\n        _assertClassBrand(_CdpTargetManager_brand, this, _handleWorkerTarget).call(this, cdpToBidiTargetTypes[targetInfo.type], cdpTarget);\n        return;\n      }\n  }\n  // DevTools or some other not supported by BiDi target. Just release\n  // debugger and ignore them.\n  targetCdpClient.sendCommand('Runtime.runIfWaitingForDebugger').then(() => parentSessionCdpClient.sendCommand('Target.detachFromTarget', params)).catch(error => _classPrivateFieldGet(_logger, this)?.call(this, log_js_1.LogType.debugError, error));\n}\nfunction _createCdpTarget(targetCdpClient, targetInfo) {\n  _assertClassBrand(_CdpTargetManager_brand, this, _setEventListeners).call(this, targetCdpClient);\n  const target = CdpTarget_js_1.CdpTarget.create(targetInfo.targetId, targetCdpClient, _classPrivateFieldGet(_browserCdpClient, this), _classPrivateFieldGet(_realmStorage, this), _classPrivateFieldGet(_eventManager, this), _classPrivateFieldGet(_preloadScriptStorage, this), _classPrivateFieldGet(_browsingContextStorage, this), _classPrivateFieldGet(_networkStorage, this), _classPrivateFieldGet(_acceptInsecureCerts, this), _classPrivateFieldGet(_logger, this));\n  _classPrivateFieldGet(_networkStorage, this).onCdpTargetCreated(target);\n  return target;\n}\nfunction _handleWorkerTarget(realmType, cdpTarget, ownerRealm) {\n  cdpTarget.cdpClient.on('Runtime.executionContextCreated', params => {\n    const {\n      uniqueId,\n      id,\n      origin\n    } = params.context;\n    const workerRealm = new WorkerRealm_js_1.WorkerRealm(cdpTarget.cdpClient, _classPrivateFieldGet(_eventManager, this), id, _classPrivateFieldGet(_logger, this), (0, BrowsingContextImpl_js_1.serializeOrigin)(origin), ownerRealm ? [ownerRealm] : [], uniqueId, _classPrivateFieldGet(_realmStorage, this), realmType);\n    _classPrivateFieldGet(_workers, this).set(cdpTarget.cdpSessionId, workerRealm);\n  });\n}\nfunction _handleDetachedFromTargetEvent({\n  sessionId,\n  targetId\n}) {\n  if (targetId) {\n    _classPrivateFieldGet(_preloadScriptStorage, this).find({\n      targetId\n    }).map(preloadScript => {\n      preloadScript.dispose(targetId);\n    });\n  }\n  const context = _classPrivateFieldGet(_browsingContextStorage, this).findContextBySession(sessionId);\n  if (context) {\n    context.dispose();\n    return;\n  }\n  const worker = _classPrivateFieldGet(_workers, this).get(sessionId);\n  if (worker) {\n    _classPrivateFieldGet(_realmStorage, this).deleteRealms({\n      cdpSessionId: worker.cdpClient.sessionId\n    });\n  }\n}\nfunction _handleTargetInfoChangedEvent(params) {\n  const context = _classPrivateFieldGet(_browsingContextStorage, this).findContext(params.targetInfo.targetId);\n  if (context) {\n    context.onTargetInfoChanged(params);\n  }\n}\nfunction _handleTargetCrashedEvent(cdpClient) {\n  // This is primarily used for service and shared workers. CDP tends to not\n  // signal they closed gracefully and instead says they crashed to signal\n  // they are closed.\n  const realms = _classPrivateFieldGet(_realmStorage, this).findRealms({\n    cdpSessionId: cdpClient.sessionId\n  });\n  for (const realm of realms) {\n    realm.dispose();\n  }\n}\nexports.CdpTargetManager = CdpTargetManager;","map":{"version":3,"names":["log_js_1","require","BrowsingContextImpl_js_1","WorkerRealm_js_1","CdpTarget_js_1","cdpToBidiTargetTypes","service_worker","shared_worker","worker","_browserCdpClient","WeakMap","_cdpConnection","_selfTargetId","_eventManager","_browsingContextStorage","_networkStorage","_acceptInsecureCerts","_preloadScriptStorage","_realmStorage","_defaultUserContextId","_logger","_CdpTargetManager_brand","WeakSet","_workers","CdpTargetManager","constructor","cdpConnection","browserCdpClient","selfTargetId","eventManager","browsingContextStorage","realmStorage","networkStorage","preloadScriptStorage","acceptInsecureCerts","defaultUserContextId","logger","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","Map","_classPrivateFieldSet","_assertClassBrand","_setEventListeners","call","cdpClient","on","params","_handleAttachedToTargetEvent","_handleDetachedFromTargetEvent","bind","_handleTargetInfoChangedEvent","_handleTargetCrashedEvent","_handleFrameAttachedEvent","_handleFrameDetachedEvent","parentBrowsingContext","_classPrivateFieldGet","findContext","parentFrameId","undefined","BrowsingContextImpl","create","frameId","userContext","cdpTarget","reason","dispose","parentSessionCdpClient","sessionId","targetInfo","targetCdpClient","getCdpClient","type","targetId","_createCdpTarget","maybeContext","updateCdpTarget","browserContextId","realm","findRealm","cdpSessionId","_handleWorkerTarget","sendCommand","then","catch","error","LogType","debugError","target","CdpTarget","onCdpTargetCreated","realmType","ownerRealm","uniqueId","id","origin","context","workerRealm","WorkerRealm","serializeOrigin","set","find","map","preloadScript","findContextBySession","get","deleteRealms","onTargetInfoChanged","realms","findRealms","exports"],"sources":["../../../../../src/bidiMapper/modules/cdp/CdpTargetManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}