{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2022 Google LLC.\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _classPrivateMethodInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _assertClassBrand = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/assertClassBrand.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldSet2.js\").default;\nvar _EventManager;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventManager = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst Buffer_js_1 = require(\"../../../utils/Buffer.js\");\nconst DefaultMap_js_1 = require(\"../../../utils/DefaultMap.js\");\nconst EventEmitter_js_1 = require(\"../../../utils/EventEmitter.js\");\nconst IdWrapper_js_1 = require(\"../../../utils/IdWrapper.js\");\nconst OutgoingMessage_js_1 = require(\"../../OutgoingMessage.js\");\nconst events_js_1 = require(\"./events.js\");\nconst SubscriptionManager_js_1 = require(\"./SubscriptionManager.js\");\nvar _idWrapper = /*#__PURE__*/new WeakMap();\nvar _contextId2 = /*#__PURE__*/new WeakMap();\nvar _event = /*#__PURE__*/new WeakMap();\nclass EventWrapper {\n  constructor(event, contextId) {\n    _classPrivateFieldInitSpec(this, _idWrapper, new IdWrapper_js_1.IdWrapper());\n    _classPrivateFieldInitSpec(this, _contextId2, void 0);\n    _classPrivateFieldInitSpec(this, _event, void 0);\n    _classPrivateFieldSet(_event, this, event);\n    _classPrivateFieldSet(_contextId2, this, contextId);\n  }\n  get id() {\n    return _classPrivateFieldGet(_idWrapper, this).id;\n  }\n  get contextId() {\n    return _classPrivateFieldGet(_contextId2, this);\n  }\n  get event() {\n    return _classPrivateFieldGet(_event, this);\n  }\n}\n/**\n * Maps event name to a desired buffer length.\n */\nconst eventBufferLength = new Map([[protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded, 100]]);\nvar _eventToContextsMap = /*#__PURE__*/new WeakMap();\nvar _eventBuffers = /*#__PURE__*/new WeakMap();\nvar _lastMessageSent = /*#__PURE__*/new WeakMap();\nvar _subscriptionManager = /*#__PURE__*/new WeakMap();\nvar _browsingContextStorage = /*#__PURE__*/new WeakMap();\nvar _EventManager_brand = /*#__PURE__*/new WeakSet();\nclass EventManager extends EventEmitter_js_1.EventEmitter {\n  constructor(browsingContextStorage) {\n    super();\n    /**\n     * If the event is buffer-able, put it in the buffer.\n     */\n    _classPrivateMethodInitSpec(this, _EventManager_brand);\n    /**\n     * Maps event name to a set of contexts where this event already happened.\n     * Needed for getting buffered events from all the contexts in case of\n     * subscripting to all contexts.\n     */\n    _classPrivateFieldInitSpec(this, _eventToContextsMap, new DefaultMap_js_1.DefaultMap(() => new Set()));\n    /**\n     * Maps `eventName` + `browsingContext` to buffer. Used to get buffered events\n     * during subscription. Channel-agnostic.\n     */\n    _classPrivateFieldInitSpec(this, _eventBuffers, new Map());\n    /**\n     * Maps `eventName` + `browsingContext` + `channel` to last sent event id.\n     * Used to avoid sending duplicated events when user\n     * subscribes -> unsubscribes -> subscribes.\n     */\n    _classPrivateFieldInitSpec(this, _lastMessageSent, new Map());\n    _classPrivateFieldInitSpec(this, _subscriptionManager, void 0);\n    _classPrivateFieldInitSpec(this, _browsingContextStorage, void 0);\n    _classPrivateFieldSet(_browsingContextStorage, this, browsingContextStorage);\n    _classPrivateFieldSet(_subscriptionManager, this, new SubscriptionManager_js_1.SubscriptionManager(browsingContextStorage));\n  }\n  get subscriptionManager() {\n    return _classPrivateFieldGet(_subscriptionManager, this);\n  }\n  /**\n   * Returns consistent key to be used to access value maps.\n   */\n\n  registerEvent(event, contextId) {\n    this.registerPromiseEvent(Promise.resolve({\n      kind: 'success',\n      value: event\n    }), contextId, event.method);\n  }\n  registerPromiseEvent(event, contextId, eventName) {\n    const eventWrapper = new EventWrapper(event, contextId);\n    const sortedChannels = _classPrivateFieldGet(_subscriptionManager, this).getChannelsSubscribedToEvent(eventName, contextId);\n    _assertClassBrand(_EventManager_brand, this, _bufferEvent).call(this, eventWrapper, eventName);\n    // Send events to channels in the subscription priority.\n    for (const channel of sortedChannels) {\n      this.emit(\"event\" /* EventManagerEvents.Event */, {\n        message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(event, channel),\n        event: eventName\n      });\n      _assertClassBrand(_EventManager_brand, this, _markEventSent).call(this, eventWrapper, channel, eventName);\n    }\n  }\n  async subscribe(eventNames, contextIds, channel) {\n    for (const name of eventNames) {\n      (0, events_js_1.assertSupportedEvent)(name);\n    }\n    // First check if all the contexts are known.\n    for (const contextId of contextIds) {\n      if (contextId !== null) {\n        // Assert the context is known. Throw exception otherwise.\n        _classPrivateFieldGet(_browsingContextStorage, this).getContext(contextId);\n      }\n    }\n    for (const eventName of eventNames) {\n      for (const contextId of contextIds) {\n        _classPrivateFieldGet(_subscriptionManager, this).subscribe(eventName, contextId, channel);\n        for (const eventWrapper of _assertClassBrand(_EventManager_brand, this, _getBufferedEvents).call(this, eventName, contextId, channel)) {\n          // The order of the events is important.\n          this.emit(\"event\" /* EventManagerEvents.Event */, {\n            message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(eventWrapper.event, channel),\n            event: eventName\n          });\n          _assertClassBrand(_EventManager_brand, this, _markEventSent).call(this, eventWrapper, channel, eventName);\n        }\n      }\n    }\n    await this.toggleModulesIfNeeded();\n  }\n  async unsubscribe(eventNames, contextIds, channel) {\n    for (const name of eventNames) {\n      (0, events_js_1.assertSupportedEvent)(name);\n    }\n    _classPrivateFieldGet(_subscriptionManager, this).unsubscribeAll(eventNames, contextIds, channel);\n    await this.toggleModulesIfNeeded();\n  }\n  async toggleModulesIfNeeded() {\n    // TODO(1): Only update changed subscribers\n    // TODO(2): Enable for Worker Targets\n    await Promise.all(_classPrivateFieldGet(_browsingContextStorage, this).getAllContexts().map(async context => {\n      return await context.toggleModulesIfNeeded();\n    }));\n  }\n}\n_EventManager = EventManager;\nfunction _getMapKey(eventName, browsingContext, channel) {\n  return JSON.stringify({\n    eventName,\n    browsingContext,\n    channel\n  });\n}\nfunction _bufferEvent(eventWrapper, eventName) {\n  if (!eventBufferLength.has(eventName)) {\n    // Do nothing if the event is no buffer-able.\n    return;\n  }\n  const bufferMapKey = _getMapKey.call(_EventManager, eventName, eventWrapper.contextId);\n  if (!_classPrivateFieldGet(_eventBuffers, this).has(bufferMapKey)) {\n    _classPrivateFieldGet(_eventBuffers, this).set(bufferMapKey, new Buffer_js_1.Buffer(eventBufferLength.get(eventName)));\n  }\n  _classPrivateFieldGet(_eventBuffers, this).get(bufferMapKey).add(eventWrapper);\n  // Add the context to the list of contexts having `eventName` events.\n  _classPrivateFieldGet(_eventToContextsMap, this).get(eventName).add(eventWrapper.contextId);\n}\n/**\n * If the event is buffer-able, mark it as sent to the given contextId and channel.\n */\nfunction _markEventSent(eventWrapper, channel, eventName) {\n  if (!eventBufferLength.has(eventName)) {\n    // Do nothing if the event is no buffer-able.\n    return;\n  }\n  const lastSentMapKey = _getMapKey.call(_EventManager, eventName, eventWrapper.contextId, channel);\n  _classPrivateFieldGet(_lastMessageSent, this).set(lastSentMapKey, Math.max(_classPrivateFieldGet(_lastMessageSent, this).get(lastSentMapKey) ?? 0, eventWrapper.id));\n}\n/**\n * Returns events which are buffered and not yet sent to the given channel events.\n */\nfunction _getBufferedEvents(eventName, contextId, channel) {\n  const bufferMapKey = _getMapKey.call(_EventManager, eventName, contextId);\n  const lastSentMapKey = _getMapKey.call(_EventManager, eventName, contextId, channel);\n  const lastSentMessageId = _classPrivateFieldGet(_lastMessageSent, this).get(lastSentMapKey) ?? -Infinity;\n  const result = _classPrivateFieldGet(_eventBuffers, this).get(bufferMapKey)?.get().filter(wrapper => wrapper.id > lastSentMessageId) ?? [];\n  if (contextId === null) {\n    // For global subscriptions, events buffered in each context should be sent back.\n    Array.from(_classPrivateFieldGet(_eventToContextsMap, this).get(eventName).keys()).filter(_contextId =>\n    // Events without context are already in the result.\n    _contextId !== null &&\n    // Events from deleted contexts should not be sent.\n    _classPrivateFieldGet(_browsingContextStorage, this).hasContext(_contextId)).map(_contextId => _assertClassBrand(_EventManager_brand, this, _getBufferedEvents).call(this, eventName, _contextId, channel)).forEach(events => result.push(...events));\n  }\n  return result.sort((e1, e2) => e1.id - e2.id);\n}\nexports.EventManager = EventManager;","map":{"version":3,"names":["_classPrivateMethodInitSpec","require","default","_assertClassBrand","_classPrivateFieldInitSpec","_classPrivateFieldGet","_classPrivateFieldSet","_EventManager","protocol_js_1","Buffer_js_1","DefaultMap_js_1","EventEmitter_js_1","IdWrapper_js_1","OutgoingMessage_js_1","events_js_1","SubscriptionManager_js_1","_idWrapper","WeakMap","_contextId2","_event","EventWrapper","constructor","event","contextId","IdWrapper","id","eventBufferLength","Map","ChromiumBidi","Log","EventNames","LogEntryAdded","_eventToContextsMap","_eventBuffers","_lastMessageSent","_subscriptionManager","_browsingContextStorage","_EventManager_brand","WeakSet","EventManager","EventEmitter","browsingContextStorage","DefaultMap","Set","SubscriptionManager","subscriptionManager","registerEvent","registerPromiseEvent","Promise","resolve","kind","value","method","eventName","eventWrapper","sortedChannels","getChannelsSubscribedToEvent","_bufferEvent","call","channel","emit","message","OutgoingMessage","createFromPromise","_markEventSent","subscribe","eventNames","contextIds","name","assertSupportedEvent","getContext","_getBufferedEvents","toggleModulesIfNeeded","unsubscribe","unsubscribeAll","all","getAllContexts","map","context","_getMapKey","browsingContext","JSON","stringify","has","bufferMapKey","set","Buffer","get","add","lastSentMapKey","Math","max","lastSentMessageId","Infinity","result","filter","wrapper","Array","from","keys","_contextId","hasContext","forEach","events","push","sort","e1","e2","exports"],"sources":["../../../../../src/bidiMapper/modules/session/EventManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}