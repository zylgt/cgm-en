{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeDataUriToBuffer = void 0;\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n */\nconst makeDataUriToBuffer = convert => uri => {\n  uri = String(uri);\n  if (!/^data:/i.test(uri)) {\n    throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n  }\n  // strip newlines\n  uri = uri.replace(/\\r?\\n/g, '');\n  // split the URI up into the \"metadata\" and the \"data\" portions\n  const firstComma = uri.indexOf(',');\n  if (firstComma === -1 || firstComma <= 4) {\n    throw new TypeError('malformed data: URI');\n  }\n  // remove the \"data:\" scheme and parse the metadata\n  const meta = uri.substring(5, firstComma).split(';');\n  let charset = '';\n  let base64 = false;\n  const type = meta[0] || 'text/plain';\n  let typeFull = type;\n  for (let i = 1; i < meta.length; i++) {\n    if (meta[i] === 'base64') {\n      base64 = true;\n    } else if (meta[i]) {\n      typeFull += `;${meta[i]}`;\n      if (meta[i].indexOf('charset=') === 0) {\n        charset = meta[i].substring(8);\n      }\n    }\n  }\n  // defaults to US-ASCII only if type is not provided\n  if (!meta[0] && !charset.length) {\n    typeFull += ';charset=US-ASCII';\n    charset = 'US-ASCII';\n  }\n  // get the encoded data portion and decode URI-encoded chars\n  const data = unescape(uri.substring(firstComma + 1));\n  const buffer = base64 ? convert.base64ToArrayBuffer(data) : convert.stringToBuffer(data);\n  return {\n    type,\n    typeFull,\n    charset,\n    buffer\n  };\n};\nexports.makeDataUriToBuffer = makeDataUriToBuffer;","map":{"version":3,"names":["makeDataUriToBuffer","convert","uri","String","test","TypeError","replace","firstComma","indexOf","meta","substring","split","charset","base64","type","typeFull","i","length","data","unescape","buffer","base64ToArrayBuffer","stringToBuffer","exports"],"sources":["../src/common.ts"],"sourcesContent":[null],"mappings":";;;;;;AAYA;;;;;AAKO,MAAMA,mBAAmB,GAAIC,OAA2B,IAAMC,GAAiB,IAAmB;EACxGA,GAAG,GAAGC,MAAM,CAACD,GAAG,CAAC;EAEjB,IAAI,CAAC,SAAS,CAACE,IAAI,CAACF,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIG,SAAS,CAClB,kEAAkE,CAClE;;EAGF;EACAH,GAAG,GAAGA,GAAG,CAACI,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAE/B;EACA,MAAMC,UAAU,GAAGL,GAAG,CAACM,OAAO,CAAC,GAAG,CAAC;EACnC,IAAID,UAAU,KAAK,CAAC,CAAC,IAAIA,UAAU,IAAI,CAAC,EAAE;IACzC,MAAM,IAAIF,SAAS,CAAC,qBAAqB,CAAC;;EAG3C;EACA,MAAMI,IAAI,GAAGP,GAAG,CAACQ,SAAS,CAAC,CAAC,EAAEH,UAAU,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;EAEpD,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,MAAM,GAAG,KAAK;EAClB,MAAMC,IAAI,GAAGL,IAAI,CAAC,CAAC,CAAC,IAAI,YAAY;EACpC,IAAIM,QAAQ,GAAGD,IAAI;EACnB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIP,IAAI,CAACO,CAAC,CAAC,KAAK,QAAQ,EAAE;MACzBH,MAAM,GAAG,IAAI;KACb,MAAM,IAAIJ,IAAI,CAACO,CAAC,CAAC,EAAE;MACnBD,QAAQ,IAAI,IAAIN,IAAI,CAACO,CAAC,CAAC,EAAE;MACzB,IAAIP,IAAI,CAACO,CAAC,CAAC,CAACR,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;QACtCI,OAAO,GAAGH,IAAI,CAACO,CAAC,CAAC,CAACN,SAAS,CAAC,CAAC,CAAC;;;;EAIjC;EACA,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC,IAAI,CAACG,OAAO,CAACK,MAAM,EAAE;IAChCF,QAAQ,IAAI,mBAAmB;IAC/BH,OAAO,GAAG,UAAU;;EAGrB;EACA,MAAMM,IAAI,GAAGC,QAAQ,CAACjB,GAAG,CAACQ,SAAS,CAACH,UAAU,GAAG,CAAC,CAAC,CAAC;EACpD,MAAMa,MAAM,GAAGP,MAAM,GAAGZ,OAAO,CAACoB,mBAAmB,CAACH,IAAI,CAAC,GAAGjB,OAAO,CAACqB,cAAc,CAACJ,IAAI,CAAC;EAExF,OAAO;IACNJ,IAAI;IACJC,QAAQ;IACRH,OAAO;IACPQ;GACA;AACF,CAAC;AAnDYG,OAAA,CAAAvB,mBAAmB,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}