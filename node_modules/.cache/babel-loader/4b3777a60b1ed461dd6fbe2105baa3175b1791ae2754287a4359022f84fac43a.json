{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _assertClassBrand from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CDPSessionEvent } from '../api/CDPSession.js';\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { NetworkManagerEvent } from '../common/NetworkManagerEvents.js';\nimport { debugError, isString } from '../common/util.js';\nimport { assert } from '../util/assert.js';\nimport { DisposableStack } from '../util/disposable.js';\nimport { CdpHTTPRequest } from './HTTPRequest.js';\nimport { CdpHTTPResponse } from './HTTPResponse.js';\nimport { NetworkEventManager } from './NetworkEventManager.js';\n/**\n * @internal\n */\nvar _frameManager = /*#__PURE__*/new WeakMap();\nvar _networkEventManager = /*#__PURE__*/new WeakMap();\nvar _extraHTTPHeaders = /*#__PURE__*/new WeakMap();\nvar _credentials = /*#__PURE__*/new WeakMap();\nvar _attemptedAuthentications = /*#__PURE__*/new WeakMap();\nvar _userRequestInterceptionEnabled = /*#__PURE__*/new WeakMap();\nvar _protocolRequestInterceptionEnabled = /*#__PURE__*/new WeakMap();\nvar _userCacheDisabled = /*#__PURE__*/new WeakMap();\nvar _emulatedNetworkConditions = /*#__PURE__*/new WeakMap();\nvar _userAgent = /*#__PURE__*/new WeakMap();\nvar _userAgentMetadata = /*#__PURE__*/new WeakMap();\nvar _handlers = /*#__PURE__*/new WeakMap();\nvar _clients = /*#__PURE__*/new WeakMap();\nvar _NetworkManager_brand = /*#__PURE__*/new WeakSet();\nexport class NetworkManager extends EventEmitter {\n  constructor(frameManager) {\n    super();\n    _classPrivateMethodInitSpec(this, _NetworkManager_brand);\n    _classPrivateFieldInitSpec(this, _frameManager, void 0);\n    _classPrivateFieldInitSpec(this, _networkEventManager, new NetworkEventManager());\n    _classPrivateFieldInitSpec(this, _extraHTTPHeaders, void 0);\n    _classPrivateFieldInitSpec(this, _credentials, null);\n    _classPrivateFieldInitSpec(this, _attemptedAuthentications, new Set());\n    _classPrivateFieldInitSpec(this, _userRequestInterceptionEnabled, false);\n    _classPrivateFieldInitSpec(this, _protocolRequestInterceptionEnabled, false);\n    _classPrivateFieldInitSpec(this, _userCacheDisabled, void 0);\n    _classPrivateFieldInitSpec(this, _emulatedNetworkConditions, void 0);\n    _classPrivateFieldInitSpec(this, _userAgent, void 0);\n    _classPrivateFieldInitSpec(this, _userAgentMetadata, void 0);\n    _classPrivateFieldInitSpec(this, _handlers, [['Fetch.requestPaused', _assertClassBrand(_NetworkManager_brand, this, _onRequestPaused)], ['Fetch.authRequired', _assertClassBrand(_NetworkManager_brand, this, _onAuthRequired)], ['Network.requestWillBeSent', _assertClassBrand(_NetworkManager_brand, this, _onRequestWillBeSent)], ['Network.requestServedFromCache', _assertClassBrand(_NetworkManager_brand, this, _onRequestServedFromCache)], ['Network.responseReceived', _assertClassBrand(_NetworkManager_brand, this, _onResponseReceived)], ['Network.loadingFinished', _assertClassBrand(_NetworkManager_brand, this, _onLoadingFinished)], ['Network.loadingFailed', _assertClassBrand(_NetworkManager_brand, this, _onLoadingFailed)], ['Network.responseReceivedExtraInfo', _assertClassBrand(_NetworkManager_brand, this, _onResponseReceivedExtraInfo)], [CDPSessionEvent.Disconnected, _assertClassBrand(_NetworkManager_brand, this, _removeClient)]]);\n    _classPrivateFieldInitSpec(this, _clients, new Map());\n    _classPrivateFieldSet(_frameManager, this, frameManager);\n  }\n  async addClient(client) {\n    if (_classPrivateFieldGet(_clients, this).has(client)) {\n      return;\n    }\n    const subscriptions = new DisposableStack();\n    _classPrivateFieldGet(_clients, this).set(client, subscriptions);\n    const clientEmitter = subscriptions.use(new EventEmitter(client));\n    for (const [event, handler] of _classPrivateFieldGet(_handlers, this)) {\n      clientEmitter.on(event, arg => {\n        return handler.bind(this)(client, arg);\n      });\n    }\n    await Promise.all([client.send('Network.enable'), _assertClassBrand(_NetworkManager_brand, this, _applyExtraHTTPHeaders).call(this, client), _assertClassBrand(_NetworkManager_brand, this, _applyNetworkConditions).call(this, client), _assertClassBrand(_NetworkManager_brand, this, _applyProtocolCacheDisabled).call(this, client), _assertClassBrand(_NetworkManager_brand, this, _applyProtocolRequestInterception).call(this, client), _assertClassBrand(_NetworkManager_brand, this, _applyUserAgent).call(this, client)]);\n  }\n  async authenticate(credentials) {\n    _classPrivateFieldSet(_credentials, this, credentials);\n    const enabled = _classPrivateFieldGet(_userRequestInterceptionEnabled, this) || !!_classPrivateFieldGet(_credentials, this);\n    if (enabled === _classPrivateFieldGet(_protocolRequestInterceptionEnabled, this)) {\n      return;\n    }\n    _classPrivateFieldSet(_protocolRequestInterceptionEnabled, this, enabled);\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyProtocolRequestInterception).bind(this));\n  }\n  async setExtraHTTPHeaders(headers) {\n    const extraHTTPHeaders = {};\n    for (const [key, value] of Object.entries(headers)) {\n      assert(isString(value), `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`);\n      extraHTTPHeaders[key.toLowerCase()] = value;\n    }\n    _classPrivateFieldSet(_extraHTTPHeaders, this, extraHTTPHeaders);\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyExtraHTTPHeaders).bind(this));\n  }\n  extraHTTPHeaders() {\n    return Object.assign({}, _classPrivateFieldGet(_extraHTTPHeaders, this));\n  }\n  inFlightRequestsCount() {\n    return _classPrivateFieldGet(_networkEventManager, this).inFlightRequestsCount();\n  }\n  async setOfflineMode(value) {\n    if (!_classPrivateFieldGet(_emulatedNetworkConditions, this)) {\n      _classPrivateFieldSet(_emulatedNetworkConditions, this, {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0\n      });\n    }\n    _classPrivateFieldGet(_emulatedNetworkConditions, this).offline = value;\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyNetworkConditions).bind(this));\n  }\n  async emulateNetworkConditions(networkConditions) {\n    if (!_classPrivateFieldGet(_emulatedNetworkConditions, this)) {\n      _classPrivateFieldSet(_emulatedNetworkConditions, this, {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0\n      });\n    }\n    _classPrivateFieldGet(_emulatedNetworkConditions, this).upload = networkConditions ? networkConditions.upload : -1;\n    _classPrivateFieldGet(_emulatedNetworkConditions, this).download = networkConditions ? networkConditions.download : -1;\n    _classPrivateFieldGet(_emulatedNetworkConditions, this).latency = networkConditions ? networkConditions.latency : 0;\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyNetworkConditions).bind(this));\n  }\n  async setUserAgent(userAgent, userAgentMetadata) {\n    _classPrivateFieldSet(_userAgent, this, userAgent);\n    _classPrivateFieldSet(_userAgentMetadata, this, userAgentMetadata);\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyUserAgent).bind(this));\n  }\n  async setCacheEnabled(enabled) {\n    _classPrivateFieldSet(_userCacheDisabled, this, !enabled);\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyProtocolCacheDisabled).bind(this));\n  }\n  async setRequestInterception(value) {\n    _classPrivateFieldSet(_userRequestInterceptionEnabled, this, value);\n    const enabled = _classPrivateFieldGet(_userRequestInterceptionEnabled, this) || !!_classPrivateFieldGet(_credentials, this);\n    if (enabled === _classPrivateFieldGet(_protocolRequestInterceptionEnabled, this)) {\n      return;\n    }\n    _classPrivateFieldSet(_protocolRequestInterceptionEnabled, this, enabled);\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyProtocolRequestInterception).bind(this));\n  }\n}\nasync function _removeClient(client) {\n  _classPrivateFieldGet(_clients, this).get(client)?.dispose();\n  _classPrivateFieldGet(_clients, this).delete(client);\n}\nasync function _applyExtraHTTPHeaders(client) {\n  if (_classPrivateFieldGet(_extraHTTPHeaders, this) === undefined) {\n    return;\n  }\n  await client.send('Network.setExtraHTTPHeaders', {\n    headers: _classPrivateFieldGet(_extraHTTPHeaders, this)\n  });\n}\nasync function _applyToAllClients(fn) {\n  await Promise.all(Array.from(_classPrivateFieldGet(_clients, this).keys()).map(client => {\n    return fn(client);\n  }));\n}\nasync function _applyNetworkConditions(client) {\n  if (_classPrivateFieldGet(_emulatedNetworkConditions, this) === undefined) {\n    return;\n  }\n  await client.send('Network.emulateNetworkConditions', {\n    offline: _classPrivateFieldGet(_emulatedNetworkConditions, this).offline,\n    latency: _classPrivateFieldGet(_emulatedNetworkConditions, this).latency,\n    uploadThroughput: _classPrivateFieldGet(_emulatedNetworkConditions, this).upload,\n    downloadThroughput: _classPrivateFieldGet(_emulatedNetworkConditions, this).download\n  });\n}\nasync function _applyUserAgent(client) {\n  if (_classPrivateFieldGet(_userAgent, this) === undefined) {\n    return;\n  }\n  await client.send('Network.setUserAgentOverride', {\n    userAgent: _classPrivateFieldGet(_userAgent, this),\n    userAgentMetadata: _classPrivateFieldGet(_userAgentMetadata, this)\n  });\n}\nasync function _applyProtocolRequestInterception(client) {\n  if (_classPrivateFieldGet(_userCacheDisabled, this) === undefined) {\n    _classPrivateFieldSet(_userCacheDisabled, this, false);\n  }\n  if (_classPrivateFieldGet(_protocolRequestInterceptionEnabled, this)) {\n    await Promise.all([_assertClassBrand(_NetworkManager_brand, this, _applyProtocolCacheDisabled).call(this, client), client.send('Fetch.enable', {\n      handleAuthRequests: true,\n      patterns: [{\n        urlPattern: '*'\n      }]\n    })]);\n  } else {\n    await Promise.all([_assertClassBrand(_NetworkManager_brand, this, _applyProtocolCacheDisabled).call(this, client), client.send('Fetch.disable')]);\n  }\n}\nasync function _applyProtocolCacheDisabled(client) {\n  if (_classPrivateFieldGet(_userCacheDisabled, this) === undefined) {\n    return;\n  }\n  await client.send('Network.setCacheDisabled', {\n    cacheDisabled: _classPrivateFieldGet(_userCacheDisabled, this)\n  });\n}\nfunction _onRequestWillBeSent(client, event) {\n  // Request interception doesn't happen for data URLs with Network Service.\n  if (_classPrivateFieldGet(_userRequestInterceptionEnabled, this) && !event.request.url.startsWith('data:')) {\n    const {\n      requestId: networkRequestId\n    } = event;\n    _classPrivateFieldGet(_networkEventManager, this).storeRequestWillBeSent(networkRequestId, event);\n    /**\n     * CDP may have sent a Fetch.requestPaused event already. Check for it.\n     */\n    const requestPausedEvent = _classPrivateFieldGet(_networkEventManager, this).getRequestPaused(networkRequestId);\n    if (requestPausedEvent) {\n      const {\n        requestId: fetchRequestId\n      } = requestPausedEvent;\n      _assertClassBrand(_NetworkManager_brand, this, _patchRequestEventHeaders).call(this, event, requestPausedEvent);\n      _assertClassBrand(_NetworkManager_brand, this, _onRequest).call(this, client, event, fetchRequestId);\n      _classPrivateFieldGet(_networkEventManager, this).forgetRequestPaused(networkRequestId);\n    }\n    return;\n  }\n  _assertClassBrand(_NetworkManager_brand, this, _onRequest).call(this, client, event, undefined);\n}\nfunction _onAuthRequired(client, event) {\n  let response = 'Default';\n  if (_classPrivateFieldGet(_attemptedAuthentications, this).has(event.requestId)) {\n    response = 'CancelAuth';\n  } else if (_classPrivateFieldGet(_credentials, this)) {\n    response = 'ProvideCredentials';\n    _classPrivateFieldGet(_attemptedAuthentications, this).add(event.requestId);\n  }\n  const {\n    username,\n    password\n  } = _classPrivateFieldGet(_credentials, this) || {\n    username: undefined,\n    password: undefined\n  };\n  client.send('Fetch.continueWithAuth', {\n    requestId: event.requestId,\n    authChallengeResponse: {\n      response,\n      username,\n      password\n    }\n  }).catch(debugError);\n}\n/**\n * CDP may send a Fetch.requestPaused without or before a\n * Network.requestWillBeSent\n *\n * CDP may send multiple Fetch.requestPaused\n * for the same Network.requestWillBeSent.\n */\nfunction _onRequestPaused(client, event) {\n  if (!_classPrivateFieldGet(_userRequestInterceptionEnabled, this) && _classPrivateFieldGet(_protocolRequestInterceptionEnabled, this)) {\n    client.send('Fetch.continueRequest', {\n      requestId: event.requestId\n    }).catch(debugError);\n  }\n  const {\n    networkId: networkRequestId,\n    requestId: fetchRequestId\n  } = event;\n  if (!networkRequestId) {\n    _assertClassBrand(_NetworkManager_brand, this, _onRequestWithoutNetworkInstrumentation).call(this, client, event);\n    return;\n  }\n  const requestWillBeSentEvent = (() => {\n    const requestWillBeSentEvent = _classPrivateFieldGet(_networkEventManager, this).getRequestWillBeSent(networkRequestId);\n    // redirect requests have the same `requestId`,\n    if (requestWillBeSentEvent && (requestWillBeSentEvent.request.url !== event.request.url || requestWillBeSentEvent.request.method !== event.request.method)) {\n      _classPrivateFieldGet(_networkEventManager, this).forgetRequestWillBeSent(networkRequestId);\n      return;\n    }\n    return requestWillBeSentEvent;\n  })();\n  if (requestWillBeSentEvent) {\n    _assertClassBrand(_NetworkManager_brand, this, _patchRequestEventHeaders).call(this, requestWillBeSentEvent, event);\n    _assertClassBrand(_NetworkManager_brand, this, _onRequest).call(this, client, requestWillBeSentEvent, fetchRequestId);\n  } else {\n    _classPrivateFieldGet(_networkEventManager, this).storeRequestPaused(networkRequestId, event);\n  }\n}\nfunction _patchRequestEventHeaders(requestWillBeSentEvent, requestPausedEvent) {\n  requestWillBeSentEvent.request.headers = {\n    ...requestWillBeSentEvent.request.headers,\n    // includes extra headers, like: Accept, Origin\n    ...requestPausedEvent.request.headers\n  };\n}\nfunction _onRequestWithoutNetworkInstrumentation(client, event) {\n  // If an event has no networkId it should not have any network events. We\n  // still want to dispatch it for the interception by the user.\n  const frame = event.frameId ? _classPrivateFieldGet(_frameManager, this).frame(event.frameId) : null;\n  const request = new CdpHTTPRequest(client, frame, event.requestId, _classPrivateFieldGet(_userRequestInterceptionEnabled, this), event, []);\n  this.emit(NetworkManagerEvent.Request, request);\n  void request.finalizeInterceptions();\n}\nfunction _onRequest(client, event, fetchRequestId) {\n  let redirectChain = [];\n  if (event.redirectResponse) {\n    // We want to emit a response and requestfinished for the\n    // redirectResponse, but we can't do so unless we have a\n    // responseExtraInfo ready to pair it up with. If we don't have any\n    // responseExtraInfos saved in our queue, they we have to wait until\n    // the next one to emit response and requestfinished, *and* we should\n    // also wait to emit this Request too because it should come after the\n    // response/requestfinished.\n    let redirectResponseExtraInfo = null;\n    if (event.redirectHasExtraInfo) {\n      redirectResponseExtraInfo = _classPrivateFieldGet(_networkEventManager, this).responseExtraInfo(event.requestId).shift();\n      if (!redirectResponseExtraInfo) {\n        _classPrivateFieldGet(_networkEventManager, this).queueRedirectInfo(event.requestId, {\n          event,\n          fetchRequestId\n        });\n        return;\n      }\n    }\n    const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(event.requestId);\n    // If we connect late to the target, we could have missed the\n    // requestWillBeSent event.\n    if (request) {\n      _assertClassBrand(_NetworkManager_brand, this, _handleRequestRedirect).call(this, client, request, event.redirectResponse, redirectResponseExtraInfo);\n      redirectChain = request._redirectChain;\n    }\n  }\n  const frame = event.frameId ? _classPrivateFieldGet(_frameManager, this).frame(event.frameId) : null;\n  const request = new CdpHTTPRequest(client, frame, fetchRequestId, _classPrivateFieldGet(_userRequestInterceptionEnabled, this), event, redirectChain);\n  _classPrivateFieldGet(_networkEventManager, this).storeRequest(event.requestId, request);\n  this.emit(NetworkManagerEvent.Request, request);\n  void request.finalizeInterceptions();\n}\nfunction _onRequestServedFromCache(_client, event) {\n  const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(event.requestId);\n  if (request) {\n    request._fromMemoryCache = true;\n  }\n  this.emit(NetworkManagerEvent.RequestServedFromCache, request);\n}\nfunction _handleRequestRedirect(client, request, responsePayload, extraInfo) {\n  const response = new CdpHTTPResponse(client, request, responsePayload, extraInfo);\n  request._response = response;\n  request._redirectChain.push(request);\n  response._resolveBody(new Error('Response body is unavailable for redirect responses'));\n  _assertClassBrand(_NetworkManager_brand, this, _forgetRequest).call(this, request, false);\n  this.emit(NetworkManagerEvent.Response, response);\n  this.emit(NetworkManagerEvent.RequestFinished, request);\n}\nfunction _emitResponseEvent(client, responseReceived, extraInfo) {\n  const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(responseReceived.requestId);\n  // FileUpload sends a response without a matching request.\n  if (!request) {\n    return;\n  }\n  const extraInfos = _classPrivateFieldGet(_networkEventManager, this).responseExtraInfo(responseReceived.requestId);\n  if (extraInfos.length) {\n    debugError(new Error('Unexpected extraInfo events for request ' + responseReceived.requestId));\n  }\n  // Chromium sends wrong extraInfo events for responses served from cache.\n  // See https://github.com/puppeteer/puppeteer/issues/9965 and\n  // https://crbug.com/1340398.\n  if (responseReceived.response.fromDiskCache) {\n    extraInfo = null;\n  }\n  const response = new CdpHTTPResponse(client, request, responseReceived.response, extraInfo);\n  request._response = response;\n  this.emit(NetworkManagerEvent.Response, response);\n}\nfunction _onResponseReceived(client, event) {\n  const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(event.requestId);\n  let extraInfo = null;\n  if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n    extraInfo = _classPrivateFieldGet(_networkEventManager, this).responseExtraInfo(event.requestId).shift();\n    if (!extraInfo) {\n      // Wait until we get the corresponding ExtraInfo event.\n      _classPrivateFieldGet(_networkEventManager, this).queueEventGroup(event.requestId, {\n        responseReceivedEvent: event\n      });\n      return;\n    }\n  }\n  _assertClassBrand(_NetworkManager_brand, this, _emitResponseEvent).call(this, client, event, extraInfo);\n}\nfunction _onResponseReceivedExtraInfo(client, event) {\n  // We may have skipped a redirect response/request pair due to waiting for\n  // this ExtraInfo event. If so, continue that work now that we have the\n  // request.\n  const redirectInfo = _classPrivateFieldGet(_networkEventManager, this).takeQueuedRedirectInfo(event.requestId);\n  if (redirectInfo) {\n    _classPrivateFieldGet(_networkEventManager, this).responseExtraInfo(event.requestId).push(event);\n    _assertClassBrand(_NetworkManager_brand, this, _onRequest).call(this, client, redirectInfo.event, redirectInfo.fetchRequestId);\n    return;\n  }\n  // We may have skipped response and loading events because we didn't have\n  // this ExtraInfo event yet. If so, emit those events now.\n  const queuedEvents = _classPrivateFieldGet(_networkEventManager, this).getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    _classPrivateFieldGet(_networkEventManager, this).forgetQueuedEventGroup(event.requestId);\n    _assertClassBrand(_NetworkManager_brand, this, _emitResponseEvent).call(this, client, queuedEvents.responseReceivedEvent, event);\n    if (queuedEvents.loadingFinishedEvent) {\n      _assertClassBrand(_NetworkManager_brand, this, _emitLoadingFinished).call(this, queuedEvents.loadingFinishedEvent);\n    }\n    if (queuedEvents.loadingFailedEvent) {\n      _assertClassBrand(_NetworkManager_brand, this, _emitLoadingFailed).call(this, queuedEvents.loadingFailedEvent);\n    }\n    return;\n  }\n  // Wait until we get another event that can use this ExtraInfo event.\n  _classPrivateFieldGet(_networkEventManager, this).responseExtraInfo(event.requestId).push(event);\n}\nfunction _forgetRequest(request, events) {\n  const requestId = request.id;\n  const interceptionId = request._interceptionId;\n  _classPrivateFieldGet(_networkEventManager, this).forgetRequest(requestId);\n  interceptionId !== undefined && _classPrivateFieldGet(_attemptedAuthentications, this).delete(interceptionId);\n  if (events) {\n    _classPrivateFieldGet(_networkEventManager, this).forget(requestId);\n  }\n}\nfunction _onLoadingFinished(_client, event) {\n  // If the response event for this request is still waiting on a\n  // corresponding ExtraInfo event, then wait to emit this event too.\n  const queuedEvents = _classPrivateFieldGet(_networkEventManager, this).getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    queuedEvents.loadingFinishedEvent = event;\n  } else {\n    _assertClassBrand(_NetworkManager_brand, this, _emitLoadingFinished).call(this, event);\n  }\n}\nfunction _emitLoadingFinished(event) {\n  const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(event.requestId);\n  // For certain requestIds we never receive requestWillBeSent event.\n  // @see https://crbug.com/750469\n  if (!request) {\n    return;\n  }\n  // Under certain conditions we never get the Network.responseReceived\n  // event from protocol. @see https://crbug.com/883475\n  if (request.response()) {\n    request.response()?._resolveBody();\n  }\n  _assertClassBrand(_NetworkManager_brand, this, _forgetRequest).call(this, request, true);\n  this.emit(NetworkManagerEvent.RequestFinished, request);\n}\nfunction _onLoadingFailed(_client, event) {\n  // If the response event for this request is still waiting on a\n  // corresponding ExtraInfo event, then wait to emit this event too.\n  const queuedEvents = _classPrivateFieldGet(_networkEventManager, this).getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    queuedEvents.loadingFailedEvent = event;\n  } else {\n    _assertClassBrand(_NetworkManager_brand, this, _emitLoadingFailed).call(this, event);\n  }\n}\nfunction _emitLoadingFailed(event) {\n  const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(event.requestId);\n  // For certain requestIds we never receive requestWillBeSent event.\n  // @see https://crbug.com/750469\n  if (!request) {\n    return;\n  }\n  request._failureText = event.errorText;\n  const response = request.response();\n  if (response) {\n    response._resolveBody();\n  }\n  _assertClassBrand(_NetworkManager_brand, this, _forgetRequest).call(this, request, true);\n  this.emit(NetworkManagerEvent.RequestFailed, request);\n}","map":{"version":3,"names":["CDPSessionEvent","EventEmitter","NetworkManagerEvent","debugError","isString","assert","DisposableStack","CdpHTTPRequest","CdpHTTPResponse","NetworkEventManager","_frameManager","WeakMap","_networkEventManager","_extraHTTPHeaders","_credentials","_attemptedAuthentications","_userRequestInterceptionEnabled","_protocolRequestInterceptionEnabled","_userCacheDisabled","_emulatedNetworkConditions","_userAgent","_userAgentMetadata","_handlers","_clients","_NetworkManager_brand","WeakSet","NetworkManager","constructor","frameManager","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","Set","_assertClassBrand","_onRequestPaused","_onAuthRequired","_onRequestWillBeSent","_onRequestServedFromCache","_onResponseReceived","_onLoadingFinished","_onLoadingFailed","_onResponseReceivedExtraInfo","Disconnected","_removeClient","Map","_classPrivateFieldSet","addClient","client","_classPrivateFieldGet","has","subscriptions","set","clientEmitter","use","event","handler","on","arg","bind","Promise","all","send","_applyExtraHTTPHeaders","call","_applyNetworkConditions","_applyProtocolCacheDisabled","_applyProtocolRequestInterception","_applyUserAgent","authenticate","credentials","enabled","_applyToAllClients","setExtraHTTPHeaders","headers","extraHTTPHeaders","key","value","Object","entries","toLowerCase","assign","inFlightRequestsCount","setOfflineMode","offline","upload","download","latency","emulateNetworkConditions","networkConditions","setUserAgent","userAgent","userAgentMetadata","setCacheEnabled","setRequestInterception","get","dispose","delete","undefined","fn","Array","from","keys","map","uploadThroughput","downloadThroughput","handleAuthRequests","patterns","urlPattern","cacheDisabled","request","url","startsWith","requestId","networkRequestId","storeRequestWillBeSent","requestPausedEvent","getRequestPaused","fetchRequestId","_patchRequestEventHeaders","_onRequest","forgetRequestPaused","response","add","username","password","authChallengeResponse","catch","networkId","_onRequestWithoutNetworkInstrumentation","requestWillBeSentEvent","getRequestWillBeSent","method","forgetRequestWillBeSent","storeRequestPaused","frame","frameId","emit","Request","finalizeInterceptions","redirectChain","redirectResponse","redirectResponseExtraInfo","redirectHasExtraInfo","responseExtraInfo","shift","queueRedirectInfo","getRequest","_handleRequestRedirect","_redirectChain","storeRequest","_client","_fromMemoryCache","RequestServedFromCache","responsePayload","extraInfo","_response","push","_resolveBody","Error","_forgetRequest","Response","RequestFinished","_emitResponseEvent","responseReceived","extraInfos","length","fromDiskCache","hasExtraInfo","queueEventGroup","responseReceivedEvent","redirectInfo","takeQueuedRedirectInfo","queuedEvents","getQueuedEventGroup","forgetQueuedEventGroup","loadingFinishedEvent","_emitLoadingFinished","loadingFailedEvent","_emitLoadingFailed","events","id","interceptionId","_interceptionId","forgetRequest","forget","_failureText","errorText","RequestFailed"],"sources":["../../../../src/cdp/NetworkManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}