{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _defineProperty from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateFieldGet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\n/**\n * @license\n * Copyright 2018 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { UnsupportedOperation } from '../common/Errors.js';\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { TimeoutSettings } from '../common/TimeoutSettings.js';\nimport { withSourcePuppeteerURLIfNone } from '../common/util.js';\n/**\n * This class represents a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker}.\n *\n * @remarks\n * The events `workercreated` and `workerdestroyed` are emitted on the page\n * object to signal the worker lifecycle.\n *\n * @example\n *\n * ```ts\n * page.on('workercreated', worker =>\n *   console.log('Worker created: ' + worker.url())\n * );\n * page.on('workerdestroyed', worker =>\n *   console.log('Worker destroyed: ' + worker.url())\n * );\n *\n * console.log('Current workers:');\n * for (const worker of page.workers()) {\n *   console.log('  ' + worker.url());\n * }\n * ```\n *\n * @public\n */\nvar _url = /*#__PURE__*/new WeakMap();\nexport class WebWorker extends EventEmitter {\n  /**\n   * @internal\n   */\n  constructor(url) {\n    super();\n    /**\n     * @internal\n     */\n    _defineProperty(this, \"timeoutSettings\", new TimeoutSettings());\n    _classPrivateFieldInitSpec(this, _url, void 0);\n    _classPrivateFieldSet(_url, this, url);\n  }\n  /**\n   * The URL of this web worker.\n   */\n  url() {\n    return _classPrivateFieldGet(_url, this);\n  }\n  /**\n   * Evaluates a given function in the {@link WebWorker | worker}.\n   *\n   * @remarks If the given function returns a promise,\n   * {@link WebWorker.evaluate | evaluate} will wait for the promise to resolve.\n   *\n   * As a rule of thumb, if the return value of the given function is more\n   * complicated than a JSON object (e.g. most classes), then\n   * {@link WebWorker.evaluate | evaluate} will _likely_ return some truncated\n   * value (or `{}`). This is because we are not returning the actual return\n   * value, but a deserialized version as a result of transferring the return\n   * value through a protocol to Puppeteer.\n   *\n   * In general, you should use\n   * {@link WebWorker.evaluateHandle | evaluateHandle} if\n   * {@link WebWorker.evaluate | evaluate} cannot serialize the return value\n   * properly or you need a mutable {@link JSHandle | handle} to the return\n   * object.\n   *\n   * @param func - Function to be evaluated.\n   * @param args - Arguments to pass into `func`.\n   * @returns The result of `func`.\n   */\n  async evaluate(func, ...args) {\n    func = withSourcePuppeteerURLIfNone(this.evaluate.name, func);\n    return await this.mainRealm().evaluate(func, ...args);\n  }\n  /**\n   * Evaluates a given function in the {@link WebWorker | worker}.\n   *\n   * @remarks If the given function returns a promise,\n   * {@link WebWorker.evaluate | evaluate} will wait for the promise to resolve.\n   *\n   * In general, you should use\n   * {@link WebWorker.evaluateHandle | evaluateHandle} if\n   * {@link WebWorker.evaluate | evaluate} cannot serialize the return value\n   * properly or you need a mutable {@link JSHandle | handle} to the return\n   * object.\n   *\n   * @param func - Function to be evaluated.\n   * @param args - Arguments to pass into `func`.\n   * @returns A {@link JSHandle | handle} to the return value of `func`.\n   */\n  async evaluateHandle(func, ...args) {\n    func = withSourcePuppeteerURLIfNone(this.evaluateHandle.name, func);\n    return await this.mainRealm().evaluateHandle(func, ...args);\n  }\n  async close() {\n    throw new UnsupportedOperation('WebWorker.close() is not supported');\n  }\n}","map":{"version":3,"names":["UnsupportedOperation","EventEmitter","TimeoutSettings","withSourcePuppeteerURLIfNone","_url","WeakMap","WebWorker","constructor","url","_defineProperty","_classPrivateFieldInitSpec","_classPrivateFieldSet","_classPrivateFieldGet","evaluate","func","args","name","mainRealm","evaluateHandle","close"],"sources":["../../../../src/api/WebWorker.ts"],"sourcesContent":[null],"mappings":";;;;AAAA;;;;;AAMA,SAAQA,oBAAoB,QAAO,qBAAqB;AACxD,SAAQC,YAAY,QAAuB,2BAA2B;AACtE,SAAQC,eAAe,QAAO,8BAA8B;AAE5D,SAAQC,4BAA4B,QAAO,mBAAmB;AAK9D;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAC,IAAA,oBAAAC,OAAA;AA0BA,OAAM,MAAgBC,SAAU,SAAQL,YAEvC;EAQC;;;EAGAM,YAAYC,GAAW;IACrB,KAAK,EAAE;IAXT;;;IAAAC,eAAA,0BAG2B,IAAIP,eAAe,EAAE;IAAAQ,0BAAA,OAAAN,IAAA;IAU9CO,qBAAA,CAAAP,IAAA,MAAI,EAAQI,GAAG;EACjB;EAOA;;;EAGAA,GAAGA,CAAA;IACD,OAAAI,qBAAA,CAAAR,IAAA,EAAO,IAAI;EACb;EAOA;;;;;;;;;;;;;;;;;;;;;;;EAuBA,MAAMS,QAAQA,CAGZC,IAAmB,EAAE,GAAGC,IAAY;IACpCD,IAAI,GAAGX,4BAA4B,CAAC,IAAI,CAACU,QAAQ,CAACG,IAAI,EAAEF,IAAI,CAAC;IAC7D,OAAO,MAAM,IAAI,CAACG,SAAS,EAAE,CAACJ,QAAQ,CAACC,IAAI,EAAE,GAAGC,IAAI,CAAC;EACvD;EAEA;;;;;;;;;;;;;;;;EAgBA,MAAMG,cAAcA,CAIlBJ,IAAmB,EACnB,GAAGC,IAAY;IAEfD,IAAI,GAAGX,4BAA4B,CAAC,IAAI,CAACe,cAAc,CAACF,IAAI,EAAEF,IAAI,CAAC;IACnE,OAAO,MAAM,IAAI,CAACG,SAAS,EAAE,CAACC,cAAc,CAACJ,IAAI,EAAE,GAAGC,IAAI,CAAC;EAC7D;EAEA,MAAMI,KAAKA,CAAA;IACT,MAAM,IAAInB,oBAAoB,CAAC,oCAAoC,CAAC;EACtE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}