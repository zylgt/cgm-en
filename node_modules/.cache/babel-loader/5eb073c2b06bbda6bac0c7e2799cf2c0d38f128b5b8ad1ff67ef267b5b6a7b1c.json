{"ast":null,"code":"import axios from 'axios';\nimport { Message, MessageBox, Notification } from 'element-ui';\nimport signature from '@/utils/signature';\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8';\n// 创建axios实例\nconst request = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  //baseURL: process.env['VUE_APP_API_ROOT'],\n  // 超时\n  timeout: 60000\n});\n// request拦截器\nrequest.interceptors.request.use(config => {\n  // get请求映射params参数\n  console.log(process.env);\n  if (config.method === 'get' && config.params) {\n    let url = config.url + '?';\n    for (const propName of Object.keys(config.params)) {\n      const value = config.params[propName];\n      var part = encodeURIComponent(propName) + '=';\n      if (value !== null && typeof value !== 'undefined') {\n        if (typeof value === 'object') {\n          for (const key of Object.keys(value)) {\n            let params = propName + '[' + key + ']';\n            var subPart = encodeURIComponent(params) + '=';\n            url += subPart + encodeURIComponent(value[key]) + '&';\n          }\n        } else {\n          url += part + encodeURIComponent(value) + '&';\n        }\n      }\n    }\n    url = url.slice(0, -1);\n    config.params = {};\n    config.url = url;\n  }\n  config.headers = {\n    ...config.headers,\n    ...signature(config.data)\n  };\n  return config;\n}, error => {\n  console.log(error);\n  Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(async res => {\n  console.log(res);\n  // 未设置状态码则默认成功状态\n  // const code = res.data.code || 200\n  // // 获取错误信息\n  // const msg = errorCode[code] || res.data.msg || errorCode['default']\n  // if (code === 401) {\n  //   MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n  //       confirmButtonText: '重新登录',\n  //       cancelButtonText: '取消',\n  //       type: 'warning'\n  //     }\n  //   ).then(() => {\n  //     store.dispatch('LogOut').then(() => {\n  //       location.href = '/login'\n  //     })\n  //   }).catch(() => {\n  //   })\n  // } else if (code === 500) {\n  //   Message({\n  //     message: msg,\n  //     type: 'error'\n  //   })\n  //   return Promise.reject(new Error(msg))\n  // } else if (code === 416) {\n  //   // 需要滑动验证\n  //   let result = {}\n  //   await Verification().then(async value => {\n  //     if (!res.config.params) {\n  //       res.config.params = {}\n  //     }\n  //     res.config.params.slideCode = value\n  //     if (res.config.data) {\n  //       res.config.data = JSON.parse(res.config.data)\n  //     }\n  //     result = await request.request(res.config)\n  //   }, error => {\n  //     console.log(error)\n  //     return Promise.reject('error')\n  //   })\n  //   return Promise.resolve(result)\n  // } else if (code !== 200) {\n  //   Notification.error({\n  //     title: msg\n  //   })\n  //   return Promise.reject('error')\n  // } else {\n  //   return res.data\n  // }\n}, error => {\n  console.log('err' + error);\n  let {\n    message\n  } = error;\n  if (message == 'Network Error') {\n    message = '后端接口连接异常';\n  } else if (message.includes('timeout')) {\n    message = '系统接口请求超时';\n  } else if (message.includes('Request failed with status code')) {\n    message = '系统接口' + message.substr(message.length - 3) + '异常';\n  }\n  Message({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","Message","MessageBox","Notification","signature","defaults","headers","request","create","timeout","interceptors","use","config","console","log","process","env","method","params","url","propName","Object","keys","value","part","encodeURIComponent","key","subPart","slice","data","error","Promise","reject","response","res","message","includes","substr","length","type","duration"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGM3Admin/src/api/index.js"],"sourcesContent":["import axios from 'axios'\nimport {Message, MessageBox, Notification} from 'element-ui'\nimport signature from '@/utils/signature'\n\n\n\naxios.defaults.headers['Content-Type'] = 'application/json;charset=utf-8'\n// 创建axios实例\nconst request = axios.create({\n  // axios中请求配置有baseURL选项，表示请求URL公共部分\n  //baseURL: process.env['VUE_APP_API_ROOT'],\n  // 超时\n  timeout: 60000\n})\n// request拦截器\nrequest.interceptors.request.use(config => {\n     // get请求映射params参数\n     console.log(process.env)\n  if (config.method === 'get' && config.params) {\n    let url = config.url + '?'\n    for (const propName of Object.keys(config.params)) {\n      const value = config.params[propName]\n      var part = encodeURIComponent(propName) + '='\n      if (value !== null && typeof (value) !== 'undefined') {\n        if (typeof value === 'object') {\n          for (const key of Object.keys(value)) {\n            let params = propName + '[' + key + ']'\n            var subPart = encodeURIComponent(params) + '='\n            url += subPart + encodeURIComponent(value[key]) + '&'\n          }\n        } else {\n          url += part + encodeURIComponent(value) + '&'\n        }\n      }\n    }\n    url = url.slice(0, -1)\n    config.params = {}\n    config.url = url\n  }\n  config.headers = {...config.headers,...signature(config.data)}\n  return config\n}, error => {\n  console.log(error)\n  Promise.reject(error)\n})\n\n// 响应拦截器\nrequest.interceptors.response.use(async res => {\n    console.log(res)\n    // 未设置状态码则默认成功状态\n    // const code = res.data.code || 200\n    // // 获取错误信息\n    // const msg = errorCode[code] || res.data.msg || errorCode['default']\n    // if (code === 401) {\n    //   MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n    //       confirmButtonText: '重新登录',\n    //       cancelButtonText: '取消',\n    //       type: 'warning'\n    //     }\n    //   ).then(() => {\n    //     store.dispatch('LogOut').then(() => {\n    //       location.href = '/login'\n    //     })\n    //   }).catch(() => {\n    //   })\n    // } else if (code === 500) {\n    //   Message({\n    //     message: msg,\n    //     type: 'error'\n    //   })\n    //   return Promise.reject(new Error(msg))\n    // } else if (code === 416) {\n    //   // 需要滑动验证\n    //   let result = {}\n    //   await Verification().then(async value => {\n    //     if (!res.config.params) {\n    //       res.config.params = {}\n    //     }\n    //     res.config.params.slideCode = value\n    //     if (res.config.data) {\n    //       res.config.data = JSON.parse(res.config.data)\n    //     }\n    //     result = await request.request(res.config)\n    //   }, error => {\n    //     console.log(error)\n    //     return Promise.reject('error')\n    //   })\n    //   return Promise.resolve(result)\n    // } else if (code !== 200) {\n    //   Notification.error({\n    //     title: msg\n    //   })\n    //   return Promise.reject('error')\n    // } else {\n    //   return res.data\n    // }\n  },\n  error => {\n    console.log('err' + error)\n    let {message} = error\n    if (message == 'Network Error') {\n      message = '后端接口连接异常'\n    } else if (message.includes('timeout')) {\n      message = '系统接口请求超时'\n    } else if (message.includes('Request failed with status code')) {\n      message = '系统接口' + message.substr(message.length - 3) + '异常'\n    }\n    Message({\n      message: message,\n      type: 'error',\n      duration: 5 * 1000\n    })\n    return Promise.reject(error)\n  }\n)\n\nexport default request\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}