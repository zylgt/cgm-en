{"ast":null,"code":"export class GlucoseUtils {\n  /**\n   * 计算葡萄糖的平均值mean、变异系数CV、预估HbA1c（GMI）\n   *\n   * @static\n   * @param {*} dataArray\n   * @return {*} example: {\n      mean: 120, // 单位：mg/dL\n      CV: 22.1, // 单位：%\n      CMI: 7.6, // 单位：%\n    }\n   * @memberof GlucoseUtils\n   */\n  static calculateMeanCvGmi(dataArray) {\n    // 检查dataArray是否是数组且不为空\n    if (!Array.isArray(dataArray) || dataArray.length === 0) {\n      return null;\n    }\n\n    // 检查dataArray的所有元素是否都是数值\n    if (!dataArray.every(element => typeof element === 'number')) {\n      return null;\n    }\n\n    // 过滤出数组中属于40到400之间的数值\n    let filteredArray = dataArray.filter(val => val >= 40 && val <= 400);\n    if (filteredArray.length === 0) {\n      return null;\n    }\n    let sum = filteredArray.reduce((acc, val) => acc + val, 0);\n    const mean = parseFloat(sum / filteredArray.length);\n    let variance = filteredArray.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / filteredArray.length;\n    const SD = Math.sqrt(variance);\n    const CV = parseFloat((100 * SD / mean).toFixed(1));\n\n    /*  */\n    const GMI = parseFloat((3.31 + 0.02392 * mean).toFixed(1));\n    return {\n      mean: mean,\n      // 单位：mg/dL\n      SDBG: SD,\n      CV: CV,\n      // 单位：%\n      GMI: GMI // 单位：%\n    };\n  }\n\n  // mmol/l 转 mg/dl\n  static mmolToMgdl(mmolValue) {\n    const v = mmolValue * 18;\n    return Math.round(v);\n  }\n\n  //mg/dl 转  mmol/l\n  static mgdlToMmol(mgdlValue) {\n    return Math.round(mgdlValue * 10 / 18) / 10;\n  }\n  static isValidGlucoseValue(value) {\n    return value >= 40 && value <= 400;\n  }\n}","map":{"version":3,"names":["GlucoseUtils","calculateMeanCvGmi","dataArray","Array","isArray","length","every","element","filteredArray","filter","val","sum","reduce","acc","mean","parseFloat","variance","Math","pow","SD","sqrt","CV","toFixed","GMI","SDBG","mmolToMgdl","mmolValue","v","round","mgdlToMmol","mgdlValue","isValidGlucoseValue","value"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/algorithm/Glucose.js"],"sourcesContent":["export class GlucoseUtils {\n  /**\n   * 计算葡萄糖的平均值mean、变异系数CV、预估HbA1c（GMI）\n   *\n   * @static\n   * @param {*} dataArray\n   * @return {*} example: {\n      mean: 120, // 单位：mg/dL\n      CV: 22.1, // 单位：%\n      CMI: 7.6, // 单位：%\n    }\n   * @memberof GlucoseUtils\n   */\n  static calculateMeanCvGmi(dataArray) {\n    // 检查dataArray是否是数组且不为空\n    if (!Array.isArray(dataArray) || dataArray.length === 0) {\n      return null;\n    }\n\n    // 检查dataArray的所有元素是否都是数值\n    if (!dataArray.every(element => typeof element === 'number')) {\n      return null;\n    }\n\n    // 过滤出数组中属于40到400之间的数值\n    let filteredArray = dataArray.filter(val => val >= 40 && val <= 400);\n    if (filteredArray.length === 0) {\n      return null;\n    }\n\n    let sum = filteredArray.reduce((acc, val) => acc + val, 0);\n    const mean = parseFloat(sum / filteredArray.length);\n    let variance =\n      filteredArray.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) /\n      filteredArray.length;\n    const SD = Math.sqrt(variance);\n    const CV = parseFloat(((100 * SD) / mean).toFixed(1));\n\n    /*  */\n    const GMI = parseFloat((3.31 + 0.02392 * mean).toFixed(1));\n    return {\n      mean: mean, // 单位：mg/dL\n      SDBG: SD,\n      CV: CV, // 单位：%\n      GMI: GMI, // 单位：%\n    };\n  }\n\n  // mmol/l 转 mg/dl\n  static mmolToMgdl(mmolValue) {\n    const v = mmolValue * 18;\n    return Math.round(v);\n  }\n\n  //mg/dl 转  mmol/l\n  static mgdlToMmol(mgdlValue) {\n    return Math.round((mgdlValue * 10) / 18) / 10;\n  }\n\n  static isValidGlucoseValue(value) {\n    return value >= 40 && value <= 400;\n  }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,CAAC;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,kBAAkBA,CAACC,SAAS,EAAE;IACnC;IACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,IAAIA,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;MACvD,OAAO,IAAI;IACb;;IAEA;IACA,IAAI,CAACH,SAAS,CAACI,KAAK,CAACC,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,CAAC,EAAE;MAC5D,OAAO,IAAI;IACb;;IAEA;IACA,IAAIC,aAAa,GAAGN,SAAS,CAACO,MAAM,CAACC,GAAG,IAAIA,GAAG,IAAI,EAAE,IAAIA,GAAG,IAAI,GAAG,CAAC;IACpE,IAAIF,aAAa,CAACH,MAAM,KAAK,CAAC,EAAE;MAC9B,OAAO,IAAI;IACb;IAEA,IAAIM,GAAG,GAAGH,aAAa,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEH,GAAG,KAAKG,GAAG,GAAGH,GAAG,EAAE,CAAC,CAAC;IAC1D,MAAMI,IAAI,GAAGC,UAAU,CAACJ,GAAG,GAAGH,aAAa,CAACH,MAAM,CAAC;IACnD,IAAIW,QAAQ,GACVR,aAAa,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEH,GAAG,KAAKG,GAAG,GAAGI,IAAI,CAACC,GAAG,CAACR,GAAG,GAAGI,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GACpEN,aAAa,CAACH,MAAM;IACtB,MAAMc,EAAE,GAAGF,IAAI,CAACG,IAAI,CAACJ,QAAQ,CAAC;IAC9B,MAAMK,EAAE,GAAGN,UAAU,CAAC,CAAE,GAAG,GAAGI,EAAE,GAAIL,IAAI,EAAEQ,OAAO,CAAC,CAAC,CAAC,CAAC;;IAErD;IACA,MAAMC,GAAG,GAAGR,UAAU,CAAC,CAAC,IAAI,GAAG,OAAO,GAAGD,IAAI,EAAEQ,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1D,OAAO;MACLR,IAAI,EAAEA,IAAI;MAAE;MACZU,IAAI,EAAEL,EAAE;MACRE,EAAE,EAAEA,EAAE;MAAE;MACRE,GAAG,EAAEA,GAAG,CAAE;IACZ,CAAC;EACH;;EAEA;EACA,OAAOE,UAAUA,CAACC,SAAS,EAAE;IAC3B,MAAMC,CAAC,GAAGD,SAAS,GAAG,EAAE;IACxB,OAAOT,IAAI,CAACW,KAAK,CAACD,CAAC,CAAC;EACtB;;EAEA;EACA,OAAOE,UAAUA,CAACC,SAAS,EAAE;IAC3B,OAAOb,IAAI,CAACW,KAAK,CAAEE,SAAS,GAAG,EAAE,GAAI,EAAE,CAAC,GAAG,EAAE;EAC/C;EAEA,OAAOC,mBAAmBA,CAACC,KAAK,EAAE;IAChC,OAAOA,KAAK,IAAI,EAAE,IAAIA,KAAK,IAAI,GAAG;EACpC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}