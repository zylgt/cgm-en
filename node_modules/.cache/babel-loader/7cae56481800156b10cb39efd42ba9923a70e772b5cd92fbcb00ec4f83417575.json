{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkEventManager = void 0;\n/**\n * Helper class to track network events by request ID\n *\n * @internal\n */\nvar _requestWillBeSentMap = /*#__PURE__*/new WeakMap();\nvar _requestPausedMap = /*#__PURE__*/new WeakMap();\nvar _httpRequestsMap = /*#__PURE__*/new WeakMap();\nvar _responseReceivedExtraInfoMap = /*#__PURE__*/new WeakMap();\nvar _queuedRedirectInfoMap = /*#__PURE__*/new WeakMap();\nvar _queuedEventGroupMap = /*#__PURE__*/new WeakMap();\nclass NetworkEventManager {\n  constructor() {\n    /**\n     * There are four possible orders of events:\n     * A. `_onRequestWillBeSent`\n     * B. `_onRequestWillBeSent`, `_onRequestPaused`\n     * C. `_onRequestPaused`, `_onRequestWillBeSent`\n     * D. `_onRequestPaused`, `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestWillBeSent`, `_onRequestPaused`, `_onRequestPaused`\n     * (see crbug.com/1196004)\n     *\n     * For `_onRequest` we need the event from `_onRequestWillBeSent` and\n     * optionally the `interceptionId` from `_onRequestPaused`.\n     *\n     * If request interception is disabled, call `_onRequest` once per call to\n     * `_onRequestWillBeSent`.\n     * If request interception is enabled, call `_onRequest` once per call to\n     * `_onRequestPaused` (once per `interceptionId`).\n     *\n     * Events are stored to allow for subsequent events to call `_onRequest`.\n     *\n     * Note that (chains of) redirect requests have the same `requestId` (!) as\n     * the original request. We have to anticipate series of events like these:\n     * A. `_onRequestWillBeSent`,\n     * `_onRequestWillBeSent`, ...\n     * B. `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestWillBeSent`, `_onRequestPaused`, ...\n     * C. `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestPaused`, `_onRequestWillBeSent`, ...\n     * D. `_onRequestPaused`, `_onRequestWillBeSent`,\n     * `_onRequestPaused`, `_onRequestWillBeSent`, `_onRequestPaused`,\n     * `_onRequestWillBeSent`, `_onRequestPaused`, `_onRequestPaused`, ...\n     * (see crbug.com/1196004)\n     */\n    _classPrivateFieldInitSpec(this, _requestWillBeSentMap, new Map());\n    _classPrivateFieldInitSpec(this, _requestPausedMap, new Map());\n    _classPrivateFieldInitSpec(this, _httpRequestsMap, new Map());\n    /*\n     * The below maps are used to reconcile Network.responseReceivedExtraInfo\n     * events with their corresponding request. Each response and redirect\n     * response gets an ExtraInfo event, and we don't know which will come first.\n     * This means that we have to store a Response or an ExtraInfo for each\n     * response, and emit the event when we get both of them. In addition, to\n     * handle redirects, we have to make them Arrays to represent the chain of\n     * events.\n     */\n    _classPrivateFieldInitSpec(this, _responseReceivedExtraInfoMap, new Map());\n    _classPrivateFieldInitSpec(this, _queuedRedirectInfoMap, new Map());\n    _classPrivateFieldInitSpec(this, _queuedEventGroupMap, new Map());\n  }\n  forget(networkRequestId) {\n    _classPrivateFieldGet(_requestWillBeSentMap, this).delete(networkRequestId);\n    _classPrivateFieldGet(_requestPausedMap, this).delete(networkRequestId);\n    _classPrivateFieldGet(_queuedEventGroupMap, this).delete(networkRequestId);\n    _classPrivateFieldGet(_queuedRedirectInfoMap, this).delete(networkRequestId);\n    _classPrivateFieldGet(_responseReceivedExtraInfoMap, this).delete(networkRequestId);\n  }\n  responseExtraInfo(networkRequestId) {\n    if (!_classPrivateFieldGet(_responseReceivedExtraInfoMap, this).has(networkRequestId)) {\n      _classPrivateFieldGet(_responseReceivedExtraInfoMap, this).set(networkRequestId, []);\n    }\n    return _classPrivateFieldGet(_responseReceivedExtraInfoMap, this).get(networkRequestId);\n  }\n  queuedRedirectInfo(fetchRequestId) {\n    if (!_classPrivateFieldGet(_queuedRedirectInfoMap, this).has(fetchRequestId)) {\n      _classPrivateFieldGet(_queuedRedirectInfoMap, this).set(fetchRequestId, []);\n    }\n    return _classPrivateFieldGet(_queuedRedirectInfoMap, this).get(fetchRequestId);\n  }\n  queueRedirectInfo(fetchRequestId, redirectInfo) {\n    this.queuedRedirectInfo(fetchRequestId).push(redirectInfo);\n  }\n  takeQueuedRedirectInfo(fetchRequestId) {\n    return this.queuedRedirectInfo(fetchRequestId).shift();\n  }\n  inFlightRequestsCount() {\n    let inFlightRequestCounter = 0;\n    for (const request of _classPrivateFieldGet(_httpRequestsMap, this).values()) {\n      if (!request.response()) {\n        inFlightRequestCounter++;\n      }\n    }\n    return inFlightRequestCounter;\n  }\n  storeRequestWillBeSent(networkRequestId, event) {\n    _classPrivateFieldGet(_requestWillBeSentMap, this).set(networkRequestId, event);\n  }\n  getRequestWillBeSent(networkRequestId) {\n    return _classPrivateFieldGet(_requestWillBeSentMap, this).get(networkRequestId);\n  }\n  forgetRequestWillBeSent(networkRequestId) {\n    _classPrivateFieldGet(_requestWillBeSentMap, this).delete(networkRequestId);\n  }\n  getRequestPaused(networkRequestId) {\n    return _classPrivateFieldGet(_requestPausedMap, this).get(networkRequestId);\n  }\n  forgetRequestPaused(networkRequestId) {\n    _classPrivateFieldGet(_requestPausedMap, this).delete(networkRequestId);\n  }\n  storeRequestPaused(networkRequestId, event) {\n    _classPrivateFieldGet(_requestPausedMap, this).set(networkRequestId, event);\n  }\n  getRequest(networkRequestId) {\n    return _classPrivateFieldGet(_httpRequestsMap, this).get(networkRequestId);\n  }\n  storeRequest(networkRequestId, request) {\n    _classPrivateFieldGet(_httpRequestsMap, this).set(networkRequestId, request);\n  }\n  forgetRequest(networkRequestId) {\n    _classPrivateFieldGet(_httpRequestsMap, this).delete(networkRequestId);\n  }\n  getQueuedEventGroup(networkRequestId) {\n    return _classPrivateFieldGet(_queuedEventGroupMap, this).get(networkRequestId);\n  }\n  queueEventGroup(networkRequestId, event) {\n    _classPrivateFieldGet(_queuedEventGroupMap, this).set(networkRequestId, event);\n  }\n  forgetQueuedEventGroup(networkRequestId) {\n    _classPrivateFieldGet(_queuedEventGroupMap, this).delete(networkRequestId);\n  }\n}\nexports.NetworkEventManager = NetworkEventManager;","map":{"version":3,"names":["_classPrivateFieldInitSpec","require","default","_classPrivateFieldGet","_requestWillBeSentMap","WeakMap","_requestPausedMap","_httpRequestsMap","_responseReceivedExtraInfoMap","_queuedRedirectInfoMap","_queuedEventGroupMap","NetworkEventManager","constructor","Map","forget","networkRequestId","delete","responseExtraInfo","has","set","get","queuedRedirectInfo","fetchRequestId","queueRedirectInfo","redirectInfo","push","takeQueuedRedirectInfo","shift","inFlightRequestsCount","inFlightRequestCounter","request","values","response","storeRequestWillBeSent","event","getRequestWillBeSent","forgetRequestWillBeSent","getRequestPaused","forgetRequestPaused","storeRequestPaused","getRequest","storeRequest","forgetRequest","getQueuedEventGroup","queueEventGroup","forgetQueuedEventGroup","exports"],"sources":["../../../../src/cdp/NetworkEventManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}