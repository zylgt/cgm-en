{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateMethodInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _assertClassBrand = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/assertClassBrand.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Explorer = void 0;\nconst promises_1 = __importDefault(require(\"fs/promises\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst defaults_1 = require(\"./defaults\");\nconst ExplorerBase_js_1 = require(\"./ExplorerBase.js\");\nconst merge_1 = require(\"./merge\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nvar _Explorer_brand = /*#__PURE__*/new WeakSet();\nclass Explorer extends ExplorerBase_js_1.ExplorerBase {\n  constructor(...args) {\n    super(...args);\n    _classPrivateMethodInitSpec(this, _Explorer_brand);\n  }\n  async load(filepath) {\n    filepath = path_1.default.resolve(filepath);\n    const load = async () => {\n      return await this.config.transform(await _assertClassBrand(_Explorer_brand, this, _readConfiguration).call(this, filepath));\n    };\n    if (this.loadCache) {\n      return await (0, util_js_1.emplace)(this.loadCache, filepath, load);\n    }\n    return await load();\n  }\n  async search(from = '') {\n    if (this.config.metaConfigFilePath) {\n      this.loadingMetaConfig = true;\n      const config = await this.load(this.config.metaConfigFilePath);\n      this.loadingMetaConfig = false;\n      if (config && !config.isEmpty) {\n        return config;\n      }\n    }\n    from = path_1.default.resolve(from);\n    const dirs = _assertClassBrand(_Explorer_brand, this, _getDirs).call(this, from);\n    const firstDirIter = await dirs.next();\n    /* istanbul ignore if -- @preserve */\n    if (firstDirIter.done) {\n      // this should never happen\n      throw new Error(`Could not find any folders to iterate through (start from ${from})`);\n    }\n    let currentDir = firstDirIter.value;\n    const search = async () => {\n      /* istanbul ignore if -- @preserve */\n      if (await (0, util_js_1.isDirectory)(currentDir.path)) {\n        for (const filepath of this.getSearchPlacesForDir(currentDir, defaults_1.globalConfigSearchPlaces)) {\n          try {\n            const result = await _assertClassBrand(_Explorer_brand, this, _readConfiguration).call(this, filepath);\n            if (result !== null && !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {\n              return await this.config.transform(result);\n            }\n          } catch (error) {\n            if (error.code === 'ENOENT' || error.code === 'EISDIR' || error.code === 'ENOTDIR' || error.code === 'EACCES') {\n              continue;\n            }\n            throw error;\n          }\n        }\n      }\n      const nextDirIter = await dirs.next();\n      if (!nextDirIter.done) {\n        currentDir = nextDirIter.value;\n        if (this.searchCache) {\n          return await (0, util_js_1.emplace)(this.searchCache, currentDir.path, search);\n        }\n        return await search();\n      }\n      return await this.config.transform(null);\n    };\n    if (this.searchCache) {\n      return await (0, util_js_1.emplace)(this.searchCache, from, search);\n    }\n    return await search();\n  }\n}\nasync function _readConfiguration(filepath, importStack = []) {\n  const contents = await promises_1.default.readFile(filepath, {\n    encoding: 'utf-8'\n  });\n  return this.toCosmiconfigResult(filepath, await _assertClassBrand(_Explorer_brand, this, _loadConfigFileWithImports).call(this, filepath, contents, importStack));\n}\nasync function _loadConfigFileWithImports(filepath, contents, importStack) {\n  const loadedContent = await _assertClassBrand(_Explorer_brand, this, _loadConfiguration).call(this, filepath, contents);\n  if (!loadedContent || !(0, merge_1.hasOwn)(loadedContent, '$import')) {\n    return loadedContent;\n  }\n  const fileDirectory = path_1.default.dirname(filepath);\n  const {\n    $import: imports,\n    ...ownContent\n  } = loadedContent;\n  const importPaths = Array.isArray(imports) ? imports : [imports];\n  const newImportStack = [...importStack, filepath];\n  this.validateImports(filepath, importPaths, newImportStack);\n  const importedConfigs = await Promise.all(importPaths.map(async importPath => {\n    const fullPath = path_1.default.resolve(fileDirectory, importPath);\n    const result = await _assertClassBrand(_Explorer_brand, this, _readConfiguration).call(this, fullPath, newImportStack);\n    return result?.config;\n  }));\n  return (0, merge_1.mergeAll)([...importedConfigs, ownContent], {\n    mergeArrays: this.config.mergeImportArrays\n  });\n}\nasync function _loadConfiguration(filepath, contents) {\n  if (contents.trim() === '') {\n    return;\n  }\n  const extension = path_1.default.extname(filepath);\n  const loader = this.config.loaders[extension || 'noExt'] ?? this.config.loaders['default'];\n  if (!loader) {\n    throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);\n  }\n  try {\n    const loadedContents = await loader(filepath, contents);\n    if (path_1.default.basename(filepath, extension) !== 'package') {\n      return loadedContents;\n    }\n    return (0, util_js_1.getPropertyByPath)(loadedContents, this.config.packageProp ?? this.config.moduleName) ?? null;\n  } catch (error) {\n    error.filepath = filepath;\n    throw error;\n  }\n}\nasync function _fileExists(path) {\n  try {\n    await promises_1.default.stat(path);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nasync function* _getDirs(startDir) {\n  switch (this.config.searchStrategy) {\n    case 'none':\n      {\n        // only check in the passed directory (defaults to working directory)\n        yield {\n          path: startDir,\n          isGlobalConfig: false\n        };\n        return;\n      }\n    case 'project':\n      {\n        let currentDir = startDir;\n        while (true) {\n          yield {\n            path: currentDir,\n            isGlobalConfig: false\n          };\n          for (const ext of ['json', 'yaml']) {\n            const packageFile = path_1.default.join(currentDir, `package.${ext}`);\n            if (await _assertClassBrand(_Explorer_brand, this, _fileExists).call(this, packageFile)) {\n              break;\n            }\n          }\n          const parentDir = path_1.default.dirname(currentDir);\n          /* istanbul ignore if -- @preserve */\n          if (parentDir === currentDir) {\n            // we're probably at the root of the directory structure\n            break;\n          }\n          currentDir = parentDir;\n        }\n        return;\n      }\n    case 'global':\n      {\n        yield* this.getGlobalDirs(startDir);\n      }\n  }\n}\nexports.Explorer = Explorer;","map":{"version":3,"names":["promises_1","__importDefault","require","path_1","defaults_1","ExplorerBase_js_1","merge_1","util_js_1","_Explorer_brand","WeakSet","Explorer","ExplorerBase","constructor","args","_classPrivateMethodInitSpec","load","filepath","default","resolve","config","transform","_assertClassBrand","_readConfiguration","call","loadCache","emplace","search","from","metaConfigFilePath","loadingMetaConfig","isEmpty","dirs","_getDirs","firstDirIter","next","done","Error","currentDir","value","isDirectory","path","getSearchPlacesForDir","globalConfigSearchPlaces","result","ignoreEmptySearchPlaces","error","code","nextDirIter","searchCache","importStack","contents","readFile","encoding","toCosmiconfigResult","_loadConfigFileWithImports","loadedContent","_loadConfiguration","hasOwn","fileDirectory","dirname","$import","imports","ownContent","importPaths","Array","isArray","newImportStack","validateImports","importedConfigs","Promise","all","map","importPath","fullPath","mergeAll","mergeArrays","mergeImportArrays","trim","extension","extname","loader","loaders","getExtensionDescription","loadedContents","basename","getPropertyByPath","packageProp","moduleName","_fileExists","stat","e","startDir","searchStrategy","isGlobalConfig","ext","packageFile","join","parentDir","getGlobalDirs","exports"],"sources":["../src/Explorer.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}