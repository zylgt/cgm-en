{"ast":null,"code":"import { Message } from \"element-ui\";\nimport { eventBus } from '@/utils/eventBus';\nvar socket = null; //实例对象\nvar lockReconnect = false; //是否真正建立连接\nvar timeoutnum = null; //重连倒计时\nvar port = [8971, 8972, 8973, 8974, 8975, 8976, 8977, 8978, 8979, 8980]; //端口号\nvar port_index = 0; //端口号下标\nvar repeat = 0; //重连次数\nvar status = 0; //连接状态 0开始建立连接 1连接成功 2交换秘钥成功 3连接失败 \n\nconst initwebSocket = async () => {\n  if (\"WebSocket\" in window) {\n    var wsUrl = 'ws://ivd.cgm3.com:' + port[port_index] + '/uploader';\n    console.log(wsUrl, '连接地址');\n    socket = new WebSocket(wsUrl);\n    status = 0;\n    socket.onerror = webSocketOnError;\n    socket.onmessage = webSocketOnMessage;\n    socket.onclose = closeWebsocket;\n    socket.onopen = openWebsocket;\n  } else {\n    Message.error({\n      showClose: true,\n      message: '您的浏览器不支持websocket，请更换Chrome或者Firefox'\n    });\n  }\n};\n\n//重置\nconst reset = () => {\n  repeat = 0;\n  status = 0;\n  port_index = 0;\n};\n//建立连接\nconst openWebsocket = e => {\n  console.log(e, '已连接');\n  lockReconnect = true;\n  status = 1;\n};\n// 重新连接\nconst reconnect = () => {\n  if (lockReconnect) {\n    return;\n  }\n  console.log(port_index, '端口下标');\n  port_index++;\n  if (port_index > 9) {\n    port_index = 0;\n    repeat++;\n    if (repeat > 2) {\n      status = 3;\n      eventBus.$emit('socketStatusChange', status);\n      console.log('WebSocket 连接失败，端口都不被连接');\n      return;\n    }\n    console.log(`正在尝试第 ${repeat} 次重连...`);\n  }\n  initwebSocket();\n  // if(repeat>2){\n  //     status = 3\n  //     eventBus.$emit('socketStatusChange',status)\n  //     console.log('WebSocket 连接失败，端口都不被连接');\n  // }else{\n  //     console.log(port_index,'端口下标')\n\n  //     timeoutnum && clearTimeout(timeoutnum);\n  //     timeoutnum = setTimeout(function(){\n  //         if(port_index>=9){\n  //             port_index = 0\n  //             repeat++\n  //             console.log(`正在尝试第 ${repeat} 次重连...`);\n  //         }\n  //         initwebSocket()\n  //     },500)\n  // }\n};\nconst sendWebsocket = e => {\n  socket.send(`我发消息了`);\n};\nconst webSocketOnError = e => {\n  console.log('发生错误', e);\n  reconnect();\n};\nconst webSocketOnMessage = e => {\n  console.log('收到消息', e);\n};\nconst closeWebsocket = e => {\n  console.log('连接已关闭', e);\n  lockReconnect = false;\n};\n//断开连接\nconst close = () => {\n  //WebSocket对象也有发送和关闭的两个方法，只需要在自定义方法中分别调用send()和close()即可实现。\n  socket.close();\n};\nexport default {\n  initwebSocket,\n  reset\n};","map":{"version":3,"names":["Message","eventBus","socket","lockReconnect","timeoutnum","port","port_index","repeat","status","initwebSocket","window","wsUrl","console","log","WebSocket","onerror","webSocketOnError","onmessage","webSocketOnMessage","onclose","closeWebsocket","onopen","openWebsocket","error","showClose","message","reset","e","reconnect","$emit","sendWebsocket","send","close"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/webSocket.js"],"sourcesContent":["\nimport { Message } from \"element-ui\";\nimport {eventBus} from '@/utils/eventBus'\n\nvar socket = null; //实例对象\nvar lockReconnect = false; //是否真正建立连接\nvar timeoutnum = null; //重连倒计时\nvar port = [8971,8972,8973,8974,8975,8976,8977,8978,8979,8980]; //端口号\nvar port_index = 0; //端口号下标\nvar repeat = 0; //重连次数\nvar status = 0; //连接状态 0开始建立连接 1连接成功 2交换秘钥成功 3连接失败 \n\nconst initwebSocket = async()=>{\n    if(\"WebSocket\" in window){\n        var wsUrl = 'ws://ivd.cgm3.com:'+port[port_index]+'/uploader'\n        console.log(wsUrl,'连接地址')\n        socket = new WebSocket(wsUrl);\n        status = 0\n        socket.onerror = webSocketOnError;\n        socket.onmessage = webSocketOnMessage;\n        socket.onclose = closeWebsocket;\n        socket.onopen = openWebsocket;\n    }else{\n        Message.error({\n            showClose: true,\n            message: '您的浏览器不支持websocket，请更换Chrome或者Firefox'\n        });\n    }\n}\n\n\n//重置\nconst reset =() => {\n    repeat=0\n    status=0\n    port_index = 0\n\n}\n//建立连接\nconst openWebsocket = (e) => {\n    console.log(e,'已连接')\n    lockReconnect = true\n    status = 1\n   \n}\n// 重新连接\nconst reconnect = () =>{\n    if(lockReconnect){\n        return ;\n    }\n    console.log(port_index,'端口下标')\n    port_index++\n    if(port_index>9){\n        port_index = 0\n        repeat++\n        if(repeat>2){\n            status = 3\n            eventBus.$emit('socketStatusChange',status)\n            console.log('WebSocket 连接失败，端口都不被连接');\n            return;\n        }\n        console.log(`正在尝试第 ${repeat} 次重连...`);\n    }\n    initwebSocket()\n    // if(repeat>2){\n    //     status = 3\n    //     eventBus.$emit('socketStatusChange',status)\n    //     console.log('WebSocket 连接失败，端口都不被连接');\n    // }else{\n    //     console.log(port_index,'端口下标')\n       \n    //     timeoutnum && clearTimeout(timeoutnum);\n    //     timeoutnum = setTimeout(function(){\n    //         if(port_index>=9){\n    //             port_index = 0\n    //             repeat++\n    //             console.log(`正在尝试第 ${repeat} 次重连...`);\n    //         }\n    //         initwebSocket()\n    //     },500)\n    // }\n}\n\n\nconst sendWebsocket =(e) =>{\n    socket.send(`我发消息了`);\n}\n   \n\nconst webSocketOnError =(e) => {\n    console.log('发生错误',e)\n    reconnect();\n    \n}  \n\nconst webSocketOnMessage=(e) => {\n    console.log('收到消息',e)\n}\n\nconst closeWebsocket=(e) => {\n    console.log('连接已关闭',e)\n    lockReconnect = false\n} \n//断开连接\nconst close =() => {\n    //WebSocket对象也有发送和关闭的两个方法，只需要在自定义方法中分别调用send()和close()即可实现。\n      socket.close();\n}    \n\nexport default{initwebSocket,reset}"],"mappings":"AACA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAAQC,QAAQ,QAAO,kBAAkB;AAEzC,IAAIC,MAAM,GAAG,IAAI,CAAC,CAAC;AACnB,IAAIC,aAAa,GAAG,KAAK,CAAC,CAAC;AAC3B,IAAIC,UAAU,GAAG,IAAI,CAAC,CAAC;AACvB,IAAIC,IAAI,GAAG,CAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,CAAC,CAAC,CAAC;AAChE,IAAIC,UAAU,GAAG,CAAC,CAAC,CAAC;AACpB,IAAIC,MAAM,GAAG,CAAC,CAAC,CAAC;AAChB,IAAIC,MAAM,GAAG,CAAC,CAAC,CAAC;;AAEhB,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAS;EAC3B,IAAG,WAAW,IAAIC,MAAM,EAAC;IACrB,IAAIC,KAAK,GAAG,oBAAoB,GAACN,IAAI,CAACC,UAAU,CAAC,GAAC,WAAW;IAC7DM,OAAO,CAACC,GAAG,CAACF,KAAK,EAAC,MAAM,CAAC;IACzBT,MAAM,GAAG,IAAIY,SAAS,CAACH,KAAK,CAAC;IAC7BH,MAAM,GAAG,CAAC;IACVN,MAAM,CAACa,OAAO,GAAGC,gBAAgB;IACjCd,MAAM,CAACe,SAAS,GAAGC,kBAAkB;IACrChB,MAAM,CAACiB,OAAO,GAAGC,cAAc;IAC/BlB,MAAM,CAACmB,MAAM,GAAGC,aAAa;EACjC,CAAC,MAAI;IACDtB,OAAO,CAACuB,KAAK,CAAC;MACVC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;IACb,CAAC,CAAC;EACN;AACJ,CAAC;;AAGD;AACA,MAAMC,KAAK,GAAEA,CAAA,KAAM;EACfnB,MAAM,GAAC,CAAC;EACRC,MAAM,GAAC,CAAC;EACRF,UAAU,GAAG,CAAC;AAElB,CAAC;AACD;AACA,MAAMgB,aAAa,GAAIK,CAAC,IAAK;EACzBf,OAAO,CAACC,GAAG,CAACc,CAAC,EAAC,KAAK,CAAC;EACpBxB,aAAa,GAAG,IAAI;EACpBK,MAAM,GAAG,CAAC;AAEd,CAAC;AACD;AACA,MAAMoB,SAAS,GAAGA,CAAA,KAAK;EACnB,IAAGzB,aAAa,EAAC;IACb;EACJ;EACAS,OAAO,CAACC,GAAG,CAACP,UAAU,EAAC,MAAM,CAAC;EAC9BA,UAAU,EAAE;EACZ,IAAGA,UAAU,GAAC,CAAC,EAAC;IACZA,UAAU,GAAG,CAAC;IACdC,MAAM,EAAE;IACR,IAAGA,MAAM,GAAC,CAAC,EAAC;MACRC,MAAM,GAAG,CAAC;MACVP,QAAQ,CAAC4B,KAAK,CAAC,oBAAoB,EAACrB,MAAM,CAAC;MAC3CI,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC;IACJ;IACAD,OAAO,CAACC,GAAG,CAAE,SAAQN,MAAO,SAAQ,CAAC;EACzC;EACAE,aAAa,CAAC,CAAC;EACf;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC;AAGD,MAAMqB,aAAa,GAAGH,CAAC,IAAI;EACvBzB,MAAM,CAAC6B,IAAI,CAAE,OAAM,CAAC;AACxB,CAAC;AAGD,MAAMf,gBAAgB,GAAGW,CAAC,IAAK;EAC3Bf,OAAO,CAACC,GAAG,CAAC,MAAM,EAACc,CAAC,CAAC;EACrBC,SAAS,CAAC,CAAC;AAEf,CAAC;AAED,MAAMV,kBAAkB,GAAES,CAAC,IAAK;EAC5Bf,OAAO,CAACC,GAAG,CAAC,MAAM,EAACc,CAAC,CAAC;AACzB,CAAC;AAED,MAAMP,cAAc,GAAEO,CAAC,IAAK;EACxBf,OAAO,CAACC,GAAG,CAAC,OAAO,EAACc,CAAC,CAAC;EACtBxB,aAAa,GAAG,KAAK;AACzB,CAAC;AACD;AACA,MAAM6B,KAAK,GAAEA,CAAA,KAAM;EACf;EACE9B,MAAM,CAAC8B,KAAK,CAAC,CAAC;AACpB,CAAC;AAED,eAAc;EAACvB,aAAa;EAACiB;AAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}