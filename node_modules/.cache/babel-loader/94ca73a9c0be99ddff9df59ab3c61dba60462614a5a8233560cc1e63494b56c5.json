{"ast":null,"code":"/*\n * 年(Y) 可用1-4个占位符\n * 月(m)、日(d)、小时(H)、分(M)、秒(S) 可用1-2个占位符\n * 星期(W) 可用1-3个占位符\n * 季度(q为阿拉伯数字，Q为中文数字)可用1或4个占位符\n *\n * let date = new Date()\n * formatDate(date, \"YYYY-mm-dd HH:MM:SS\")           // 2020-02-09 14:04:23\n * formatDate(date, \"YYYY-mm-dd HH:MM:SS Q\")         // 2020-02-09 14:09:03 一\n * formatDate(date, \"YYYY-mm-dd HH:MM:SS WWW\")       // 2020-02-09 14:45:12 星期日\n * formatDate(date, \"YYYY-mm-dd HH:MM:SS QQQQ\")      // 2020-02-09 14:09:36 第一季度\n * formatDate(date, \"YYYY-mm-dd HH:MM:SS WWW QQQQ\")  // 2020-02-09 14:46:12 星期日 第一季度\n */\nexport function formatDate(date, format) {\n  date = new Date(date);\n  let we = date.getDay(); // 星期\n  let qut = Math.floor((date.getMonth() + 3) / 3).toString(); // 季度\n  const opt = {\n    'Y+': date.getFullYear().toString(),\n    // 年\n    'm+': (date.getMonth() + 1).toString(),\n    // 月(月份从0开始，要+1)\n    'd+': date.getDate().toString(),\n    // 日\n    'H+': date.getHours().toString(),\n    // 时\n    'M+': date.getMinutes().toString(),\n    // 分\n    'S+': date.getSeconds().toString(),\n    // 秒\n    'q+': qut // 季度\n  };\n  const week = {\n    // 中文数字 (星期)\n    '0': '日',\n    '1': '一',\n    '2': '二',\n    '3': '三',\n    '4': '四',\n    '5': '五',\n    '6': '六'\n  };\n  const quarter = {\n    // 中文数字（季度）\n    '1': '一',\n    '2': '二',\n    '3': '三',\n    '4': '四'\n  };\n  if (/(W+)/.test(format)) {\n    format = format.replace(RegExp.$1, RegExp.$1.length > 1 ? RegExp.$1.length > 2 ? '星期' + week[we] : '周' + week[we] : week[we]);\n  }\n  if (/(Q+)/.test(format)) {\n    // 输入一个Q，只输出一个中文数字，输入4个Q，则拼接上字符串\n    format = format.replace(RegExp.$1, RegExp.$1.length == 4 ? '第' + quarter[qut] + '季度' : quarter[qut]);\n  }\n  for (let k in opt) {\n    let r = new RegExp('(' + k + ')').exec(format);\n    if (r) {\n      // 若输入的长度不为1，则前面补零\n      format = format.replace(r[1], RegExp.$1.length == 1 ? opt[k] : opt[k].padStart(RegExp.$1.length, '0'));\n    }\n  }\n  return format;\n}\n\n/**\n * 10秒：  10 * 1000\n * 1分：   60 * 1000\n * 1小时： 60 * 60 * 1000\n * 24小时：60 * 60 * 24 * 1000\n * 3天：   60 * 60* 24 * 1000 * 3\n *\n * let data = new Date()\n * formatPast(data)                                           // 刚刚\n * formatPast(data - 11 * 1000)                               // 11秒前\n * formatPast(data - 2 * 60 * 1000)                           // 2分钟前\n * formatPast(data - 60 * 60 * 2 * 1000)                      // 2小时前\n * formatPast(data - 60 * 60 * 2 * 1000)                      // 2小时前\n * formatPast(data - 60 * 60 * 71 * 1000)                     // 2天前\n * formatPast(\"2020-06-01\")                                   // 2020-06-01\n * formatPast(\"2020-06-01\", \"YYYY-mm-dd HH:MM:SS WWW QQQQ\")   // 2020-06-01 08:00:00 星期一 第二季度\n */\nexport function formatPast(param, format = 'YYYY-mm-dd') {\n  // 传入格式处理、存储转换值\n  let t, s;\n  // 获取js 时间戳\n  let time = new Date().getTime();\n  // 是否是对象\n  typeof param === 'string' || 'object' ? t = new Date(param).getTime() : t = param;\n  // 当前时间戳 - 传入时间戳\n  time = Number.parseInt(time - t);\n  if (time < 10000) {\n    // 10秒内\n    return '刚刚';\n  } else if (time < 60000 && time >= 10000) {\n    // 超过10秒少于1分钟内\n    s = Math.floor(time / 1000);\n    return `${s}秒前`;\n  } else if (time < 3600000 && time >= 60000) {\n    // 超过1分钟少于1小时\n    s = Math.floor(time / 60000);\n    return `${s}分钟前`;\n  } else if (time < 86400000 && time >= 3600000) {\n    // 超过1小时少于24小时\n    s = Math.floor(time / 3600000);\n    return `${s}小时前`;\n  } else if (time < 259200000 && time >= 86400000) {\n    // 超过1天少于3天内\n    s = Math.floor(time / 86400000);\n    return `${s}天前`;\n  } else {\n    // 超过3天\n    let date = typeof param === 'string' || 'object' ? new Date(param) : param;\n    return formatDate(date, format);\n  }\n}\n\n/**\n * formatAxis(new Date())   // 上午好\n */\nexport function formatAxis(param) {\n  let hour = new Date(param).getHours();\n  if (hour < 6) {\n    return '凌晨好';\n  } else if (hour < 9) {\n    return '早上好';\n  } else if (hour < 12) {\n    return '上午好';\n  } else if (hour < 14) {\n    return '中午好';\n  } else if (hour < 17) {\n    return '下午好';\n  } else if (hour < 19) {\n    return '傍晚好';\n  } else if (hour < 22) {\n    return '晚上好';\n  } else {\n    return '夜里好';\n  }\n}","map":{"version":3,"names":["formatDate","date","format","Date","we","getDay","qut","Math","floor","getMonth","toString","opt","getFullYear","getDate","getHours","getMinutes","getSeconds","week","quarter","test","replace","RegExp","$1","length","k","r","exec","padStart","formatPast","param","t","s","time","getTime","Number","parseInt","formatAxis","hour"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/formatTime.js"],"sourcesContent":["/*\n * 年(Y) 可用1-4个占位符\n * 月(m)、日(d)、小时(H)、分(M)、秒(S) 可用1-2个占位符\n * 星期(W) 可用1-3个占位符\n * 季度(q为阿拉伯数字，Q为中文数字)可用1或4个占位符\n *\n * let date = new Date()\n * formatDate(date, \"YYYY-mm-dd HH:MM:SS\")           // 2020-02-09 14:04:23\n * formatDate(date, \"YYYY-mm-dd HH:MM:SS Q\")         // 2020-02-09 14:09:03 一\n * formatDate(date, \"YYYY-mm-dd HH:MM:SS WWW\")       // 2020-02-09 14:45:12 星期日\n * formatDate(date, \"YYYY-mm-dd HH:MM:SS QQQQ\")      // 2020-02-09 14:09:36 第一季度\n * formatDate(date, \"YYYY-mm-dd HH:MM:SS WWW QQQQ\")  // 2020-02-09 14:46:12 星期日 第一季度\n */\nexport function formatDate(date, format) {\n\tdate  = new Date(date)\n\tlet we = date.getDay() // 星期\n\tlet qut = Math.floor((date.getMonth() + 3) / 3).toString() // 季度\n\tconst opt = {\n\t\t'Y+': date.getFullYear().toString(), // 年\n\t\t'm+': (date.getMonth() + 1).toString(), // 月(月份从0开始，要+1)\n\t\t'd+': date.getDate().toString(), // 日\n\t\t'H+': date.getHours().toString(), // 时\n\t\t'M+': date.getMinutes().toString(), // 分\n\t\t'S+': date.getSeconds().toString(), // 秒\n\t\t'q+': qut // 季度\n\t}\n\tconst week = {\n\t\t// 中文数字 (星期)\n\t\t'0': '日',\n\t\t'1': '一',\n\t\t'2': '二',\n\t\t'3': '三',\n\t\t'4': '四',\n\t\t'5': '五',\n\t\t'6': '六'\n\t}\n\tconst quarter = {\n\t\t// 中文数字（季度）\n\t\t'1': '一',\n\t\t'2': '二',\n\t\t'3': '三',\n\t\t'4': '四'\n\t}\n\tif (/(W+)/.test(format)) {\n\t\tformat = format.replace(RegExp.$1, RegExp.$1.length > 1 ? (RegExp.$1.length > 2 ? '星期' + week[we] : '周' + week[we]) : week[we])\n\t}\n\tif (/(Q+)/.test(format)) {\n\t\t// 输入一个Q，只输出一个中文数字，输入4个Q，则拼接上字符串\n\t\tformat = format.replace(RegExp.$1, RegExp.$1.length == 4 ? '第' + quarter[qut] + '季度' : quarter[qut])\n\t}\n\tfor (let k in opt) {\n\t\tlet r = new RegExp('(' + k + ')').exec(format)\n\t\tif (r) {\n\t\t\t// 若输入的长度不为1，则前面补零\n\t\t\tformat = format.replace(r[1], RegExp.$1.length == 1 ? opt[k] : opt[k].padStart(RegExp.$1.length, '0'))\n\t\t}\n\t}\n\treturn format\n}\n\n/**\n * 10秒：  10 * 1000\n * 1分：   60 * 1000\n * 1小时： 60 * 60 * 1000\n * 24小时：60 * 60 * 24 * 1000\n * 3天：   60 * 60* 24 * 1000 * 3\n *\n * let data = new Date()\n * formatPast(data)                                           // 刚刚\n * formatPast(data - 11 * 1000)                               // 11秒前\n * formatPast(data - 2 * 60 * 1000)                           // 2分钟前\n * formatPast(data - 60 * 60 * 2 * 1000)                      // 2小时前\n * formatPast(data - 60 * 60 * 2 * 1000)                      // 2小时前\n * formatPast(data - 60 * 60 * 71 * 1000)                     // 2天前\n * formatPast(\"2020-06-01\")                                   // 2020-06-01\n * formatPast(\"2020-06-01\", \"YYYY-mm-dd HH:MM:SS WWW QQQQ\")   // 2020-06-01 08:00:00 星期一 第二季度\n */\nexport function formatPast(param, format = 'YYYY-mm-dd') {\n\t// 传入格式处理、存储转换值\n\tlet t, s\n\t// 获取js 时间戳\n\tlet time = new Date().getTime()\n\t// 是否是对象\n\ttypeof param === 'string' || 'object' ? (t = new Date(param).getTime()) : (t = param)\n\t// 当前时间戳 - 传入时间戳\n\ttime = Number.parseInt(time - t)\n\tif (time < 10000) {\n\t\t// 10秒内\n\t\treturn '刚刚'\n\t} else if (time < 60000 && time >= 10000) {\n\t\t// 超过10秒少于1分钟内\n\t\ts = Math.floor(time / 1000)\n\t\treturn `${s}秒前`\n\t} else if (time < 3600000 && time >= 60000) {\n\t\t// 超过1分钟少于1小时\n\t\ts = Math.floor(time / 60000)\n\t\treturn `${s}分钟前`\n\t} else if (time < 86400000 && time >= 3600000) {\n\t\t// 超过1小时少于24小时\n\t\ts = Math.floor(time / 3600000)\n\t\treturn `${s}小时前`\n\t} else if (time < 259200000 && time >= 86400000) {\n\t\t// 超过1天少于3天内\n\t\ts = Math.floor(time / 86400000)\n\t\treturn `${s}天前`\n\t} else {\n\t\t// 超过3天\n\t\tlet date = typeof param === 'string' || 'object' ? new Date(param) : param\n\t\treturn formatDate(date, format)\n\t}\n}\n\n/**\n * formatAxis(new Date())   // 上午好\n */\nexport function formatAxis(param) {\n\tlet hour = new Date(param).getHours()\n\tif (hour < 6) {\n\t\treturn '凌晨好'\n\t} else if (hour < 9) {\n\t\treturn '早上好'\n\t} else if (hour < 12) {\n\t\treturn '上午好'\n\t} else if (hour < 14) {\n\t\treturn '中午好'\n\t} else if (hour < 17) {\n\t\treturn '下午好'\n\t} else if (hour < 19) {\n\t\treturn '傍晚好'\n\t} else if (hour < 22) {\n\t\treturn '晚上好'\n\t} else {\n\t\treturn '夜里好'\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}