{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\n/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CDPSession, CDPSessionEvent } from '../api/CDPSession.js';\nimport { EventEmitter } from '../common/EventEmitter.js';\nimport { debugError } from '../common/util.js';\nimport { assert } from '../util/assert.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { CdpTarget, InitializationStatus } from './Target.js';\nfunction isPageTargetBecomingPrimary(target, newTargetInfo) {\n  return Boolean(target._subtype()) && !newTargetInfo.subtype;\n}\n/**\n * ChromeTargetManager uses the CDP's auto-attach mechanism to intercept\n * new targets and allow the rest of Puppeteer to configure listeners while\n * the target is paused.\n *\n * @internal\n */\nvar _connection = /*#__PURE__*/new WeakMap();\nvar _discoveredTargetsByTargetId = /*#__PURE__*/new WeakMap();\nvar _attachedTargetsByTargetId = /*#__PURE__*/new WeakMap();\nvar _attachedTargetsBySessionId = /*#__PURE__*/new WeakMap();\nvar _ignoredTargets = /*#__PURE__*/new WeakMap();\nvar _targetFilterCallback = /*#__PURE__*/new WeakMap();\nvar _targetFactory = /*#__PURE__*/new WeakMap();\nvar _attachedToTargetListenersBySession = /*#__PURE__*/new WeakMap();\nvar _detachedFromTargetListenersBySession = /*#__PURE__*/new WeakMap();\nvar _initializeDeferred = /*#__PURE__*/new WeakMap();\nvar _targetsIdsForInit = /*#__PURE__*/new WeakMap();\nvar _waitForInitiallyDiscoveredTargets = /*#__PURE__*/new WeakMap();\nvar _discoveryFilter = /*#__PURE__*/new WeakMap();\nvar _storeExistingTargetsForInit = /*#__PURE__*/new WeakMap();\nvar _ChromeTargetManager_brand = /*#__PURE__*/new WeakSet();\nvar _onSessionDetached = /*#__PURE__*/new WeakMap();\nvar _onTargetCreated = /*#__PURE__*/new WeakMap();\nvar _onTargetDestroyed = /*#__PURE__*/new WeakMap();\nvar _onTargetInfoChanged = /*#__PURE__*/new WeakMap();\nvar _onAttachedToTarget = /*#__PURE__*/new WeakMap();\nvar _onDetachedFromTarget = /*#__PURE__*/new WeakMap();\nexport class ChromeTargetManager extends EventEmitter {\n  constructor(connection, targetFactory, targetFilterCallback, waitForInitiallyDiscoveredTargets = true) {\n    super();\n    _classPrivateMethodInitSpec(this, _ChromeTargetManager_brand);\n    _classPrivateFieldInitSpec(this, _connection, void 0);\n    /**\n     * Keeps track of the following events: 'Target.targetCreated',\n     * 'Target.targetDestroyed', 'Target.targetInfoChanged'.\n     *\n     * A target becomes discovered when 'Target.targetCreated' is received.\n     * A target is removed from this map once 'Target.targetDestroyed' is\n     * received.\n     *\n     * `targetFilterCallback` has no effect on this map.\n     */\n    _classPrivateFieldInitSpec(this, _discoveredTargetsByTargetId, new Map());\n    /**\n     * A target is added to this map once ChromeTargetManager has created\n     * a Target and attached at least once to it.\n     */\n    _classPrivateFieldInitSpec(this, _attachedTargetsByTargetId, new Map());\n    /**\n     * Tracks which sessions attach to which target.\n     */\n    _classPrivateFieldInitSpec(this, _attachedTargetsBySessionId, new Map());\n    /**\n     * If a target was filtered out by `targetFilterCallback`, we still receive\n     * events about it from CDP, but we don't forward them to the rest of Puppeteer.\n     */\n    _classPrivateFieldInitSpec(this, _ignoredTargets, new Set());\n    _classPrivateFieldInitSpec(this, _targetFilterCallback, void 0);\n    _classPrivateFieldInitSpec(this, _targetFactory, void 0);\n    _classPrivateFieldInitSpec(this, _attachedToTargetListenersBySession, new WeakMap());\n    _classPrivateFieldInitSpec(this, _detachedFromTargetListenersBySession, new WeakMap());\n    _classPrivateFieldInitSpec(this, _initializeDeferred, Deferred.create());\n    _classPrivateFieldInitSpec(this, _targetsIdsForInit, new Set());\n    _classPrivateFieldInitSpec(this, _waitForInitiallyDiscoveredTargets, true);\n    _classPrivateFieldInitSpec(this, _discoveryFilter, [{}]);\n    _classPrivateFieldInitSpec(this, _storeExistingTargetsForInit, () => {\n      if (!_classPrivateFieldGet(_waitForInitiallyDiscoveredTargets, this)) {\n        return;\n      }\n      for (const [targetId, targetInfo] of _classPrivateFieldGet(_discoveredTargetsByTargetId, this).entries()) {\n        const targetForFilter = new CdpTarget(targetInfo, undefined, undefined, this, undefined);\n        if ((!_classPrivateFieldGet(_targetFilterCallback, this) || _classPrivateFieldGet(_targetFilterCallback, this).call(this, targetForFilter)) && targetInfo.type !== 'browser') {\n          _classPrivateFieldGet(_targetsIdsForInit, this).add(targetId);\n        }\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onSessionDetached, session => {\n      _assertClassBrand(_ChromeTargetManager_brand, this, _removeAttachmentListeners).call(this, session);\n    });\n    _classPrivateFieldInitSpec(this, _onTargetCreated, async event => {\n      _classPrivateFieldGet(_discoveredTargetsByTargetId, this).set(event.targetInfo.targetId, event.targetInfo);\n      this.emit(\"targetDiscovered\" /* TargetManagerEvent.TargetDiscovered */, event.targetInfo);\n      // The connection is already attached to the browser target implicitly,\n      // therefore, no new CDPSession is created and we have special handling\n      // here.\n      if (event.targetInfo.type === 'browser' && event.targetInfo.attached) {\n        if (_classPrivateFieldGet(_attachedTargetsByTargetId, this).has(event.targetInfo.targetId)) {\n          return;\n        }\n        const target = _classPrivateFieldGet(_targetFactory, this).call(this, event.targetInfo, undefined);\n        target._initialize();\n        _classPrivateFieldGet(_attachedTargetsByTargetId, this).set(event.targetInfo.targetId, target);\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onTargetDestroyed, event => {\n      const targetInfo = _classPrivateFieldGet(_discoveredTargetsByTargetId, this).get(event.targetId);\n      _classPrivateFieldGet(_discoveredTargetsByTargetId, this).delete(event.targetId);\n      _assertClassBrand(_ChromeTargetManager_brand, this, _finishInitializationIfReady).call(this, event.targetId);\n      if (targetInfo?.type === 'service_worker' && _classPrivateFieldGet(_attachedTargetsByTargetId, this).has(event.targetId)) {\n        // Special case for service workers: report TargetGone event when\n        // the worker is destroyed.\n        const target = _classPrivateFieldGet(_attachedTargetsByTargetId, this).get(event.targetId);\n        if (target) {\n          this.emit(\"targetGone\" /* TargetManagerEvent.TargetGone */, target);\n          _classPrivateFieldGet(_attachedTargetsByTargetId, this).delete(event.targetId);\n        }\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onTargetInfoChanged, event => {\n      _classPrivateFieldGet(_discoveredTargetsByTargetId, this).set(event.targetInfo.targetId, event.targetInfo);\n      if (_classPrivateFieldGet(_ignoredTargets, this).has(event.targetInfo.targetId) || !_classPrivateFieldGet(_attachedTargetsByTargetId, this).has(event.targetInfo.targetId) || !event.targetInfo.attached) {\n        return;\n      }\n      const target = _classPrivateFieldGet(_attachedTargetsByTargetId, this).get(event.targetInfo.targetId);\n      if (!target) {\n        return;\n      }\n      const previousURL = target.url();\n      const wasInitialized = target._initializedDeferred.value() === InitializationStatus.SUCCESS;\n      if (isPageTargetBecomingPrimary(target, event.targetInfo)) {\n        const session = target?._session();\n        assert(session, 'Target that is being activated is missing a CDPSession.');\n        session.parentSession()?.emit(CDPSessionEvent.Swapped, session);\n      }\n      target._targetInfoChanged(event.targetInfo);\n      if (wasInitialized && previousURL !== target.url()) {\n        this.emit(\"targetChanged\" /* TargetManagerEvent.TargetChanged */, {\n          target,\n          wasInitialized,\n          previousURL\n        });\n      }\n    });\n    _classPrivateFieldInitSpec(this, _onAttachedToTarget, async (parentSession, event) => {\n      const targetInfo = event.targetInfo;\n      const session = _classPrivateFieldGet(_connection, this).session(event.sessionId);\n      if (!session) {\n        throw new Error(`Session ${event.sessionId} was not created.`);\n      }\n      const silentDetach = async () => {\n        await session.send('Runtime.runIfWaitingForDebugger').catch(debugError);\n        // We don't use `session.detach()` because that dispatches all commands on\n        // the connection instead of the parent session.\n        await parentSession.send('Target.detachFromTarget', {\n          sessionId: session.id()\n        }).catch(debugError);\n      };\n      if (!_classPrivateFieldGet(_connection, this).isAutoAttached(targetInfo.targetId)) {\n        return;\n      }\n      // Special case for service workers: being attached to service workers will\n      // prevent them from ever being destroyed. Therefore, we silently detach\n      // from service workers unless the connection was manually created via\n      // `page.worker()`. To determine this, we use\n      // `this.#connection.isAutoAttached(targetInfo.targetId)`. In the future, we\n      // should determine if a target is auto-attached or not with the help of\n      // CDP.\n      if (targetInfo.type === 'service_worker') {\n        _assertClassBrand(_ChromeTargetManager_brand, this, _finishInitializationIfReady).call(this, targetInfo.targetId);\n        await silentDetach();\n        if (_classPrivateFieldGet(_attachedTargetsByTargetId, this).has(targetInfo.targetId)) {\n          return;\n        }\n        const target = _classPrivateFieldGet(_targetFactory, this).call(this, targetInfo);\n        target._initialize();\n        _classPrivateFieldGet(_attachedTargetsByTargetId, this).set(targetInfo.targetId, target);\n        this.emit(\"targetAvailable\" /* TargetManagerEvent.TargetAvailable */, target);\n        return;\n      }\n      const isExistingTarget = _classPrivateFieldGet(_attachedTargetsByTargetId, this).has(targetInfo.targetId);\n      const target = isExistingTarget ? _classPrivateFieldGet(_attachedTargetsByTargetId, this).get(targetInfo.targetId) : _classPrivateFieldGet(_targetFactory, this).call(this, targetInfo, session, parentSession instanceof CDPSession ? parentSession : undefined);\n      if (_classPrivateFieldGet(_targetFilterCallback, this) && !_classPrivateFieldGet(_targetFilterCallback, this).call(this, target)) {\n        _classPrivateFieldGet(_ignoredTargets, this).add(targetInfo.targetId);\n        _assertClassBrand(_ChromeTargetManager_brand, this, _finishInitializationIfReady).call(this, targetInfo.targetId);\n        await silentDetach();\n        return;\n      }\n      _assertClassBrand(_ChromeTargetManager_brand, this, _setupAttachmentListeners).call(this, session);\n      if (isExistingTarget) {\n        session._setTarget(target);\n        _classPrivateFieldGet(_attachedTargetsBySessionId, this).set(session.id(), _classPrivateFieldGet(_attachedTargetsByTargetId, this).get(targetInfo.targetId));\n      } else {\n        target._initialize();\n        _classPrivateFieldGet(_attachedTargetsByTargetId, this).set(targetInfo.targetId, target);\n        _classPrivateFieldGet(_attachedTargetsBySessionId, this).set(session.id(), target);\n      }\n      parentSession.emit(CDPSessionEvent.Ready, session);\n      _classPrivateFieldGet(_targetsIdsForInit, this).delete(target._targetId);\n      if (!isExistingTarget) {\n        this.emit(\"targetAvailable\" /* TargetManagerEvent.TargetAvailable */, target);\n      }\n      _assertClassBrand(_ChromeTargetManager_brand, this, _finishInitializationIfReady).call(this);\n      // TODO: the browser might be shutting down here. What do we do with the\n      // error?\n      await Promise.all([session.send('Target.setAutoAttach', {\n        waitForDebuggerOnStart: true,\n        flatten: true,\n        autoAttach: true,\n        filter: _classPrivateFieldGet(_discoveryFilter, this)\n      }), session.send('Runtime.runIfWaitingForDebugger')]).catch(debugError);\n    });\n    _classPrivateFieldInitSpec(this, _onDetachedFromTarget, (_parentSession, event) => {\n      const target = _classPrivateFieldGet(_attachedTargetsBySessionId, this).get(event.sessionId);\n      _classPrivateFieldGet(_attachedTargetsBySessionId, this).delete(event.sessionId);\n      if (!target) {\n        return;\n      }\n      _classPrivateFieldGet(_attachedTargetsByTargetId, this).delete(target._targetId);\n      this.emit(\"targetGone\" /* TargetManagerEvent.TargetGone */, target);\n    });\n    _classPrivateFieldSet(_connection, this, connection);\n    _classPrivateFieldSet(_targetFilterCallback, this, targetFilterCallback);\n    _classPrivateFieldSet(_targetFactory, this, targetFactory);\n    _classPrivateFieldSet(_waitForInitiallyDiscoveredTargets, this, waitForInitiallyDiscoveredTargets);\n    _classPrivateFieldGet(_connection, this).on('Target.targetCreated', _classPrivateFieldGet(_onTargetCreated, this));\n    _classPrivateFieldGet(_connection, this).on('Target.targetDestroyed', _classPrivateFieldGet(_onTargetDestroyed, this));\n    _classPrivateFieldGet(_connection, this).on('Target.targetInfoChanged', _classPrivateFieldGet(_onTargetInfoChanged, this));\n    _classPrivateFieldGet(_connection, this).on(CDPSessionEvent.SessionDetached, _classPrivateFieldGet(_onSessionDetached, this));\n    _assertClassBrand(_ChromeTargetManager_brand, this, _setupAttachmentListeners).call(this, _classPrivateFieldGet(_connection, this));\n  }\n  async initialize() {\n    await _classPrivateFieldGet(_connection, this).send('Target.setDiscoverTargets', {\n      discover: true,\n      filter: _classPrivateFieldGet(_discoveryFilter, this)\n    });\n    _classPrivateFieldGet(_storeExistingTargetsForInit, this).call(this);\n    await _classPrivateFieldGet(_connection, this).send('Target.setAutoAttach', {\n      waitForDebuggerOnStart: true,\n      flatten: true,\n      autoAttach: true,\n      filter: [{\n        type: 'page',\n        exclude: true\n      }, ..._classPrivateFieldGet(_discoveryFilter, this)]\n    });\n    _assertClassBrand(_ChromeTargetManager_brand, this, _finishInitializationIfReady).call(this);\n    await _classPrivateFieldGet(_initializeDeferred, this).valueOrThrow();\n  }\n  dispose() {\n    _classPrivateFieldGet(_connection, this).off('Target.targetCreated', _classPrivateFieldGet(_onTargetCreated, this));\n    _classPrivateFieldGet(_connection, this).off('Target.targetDestroyed', _classPrivateFieldGet(_onTargetDestroyed, this));\n    _classPrivateFieldGet(_connection, this).off('Target.targetInfoChanged', _classPrivateFieldGet(_onTargetInfoChanged, this));\n    _classPrivateFieldGet(_connection, this).off(CDPSessionEvent.SessionDetached, _classPrivateFieldGet(_onSessionDetached, this));\n    _assertClassBrand(_ChromeTargetManager_brand, this, _removeAttachmentListeners).call(this, _classPrivateFieldGet(_connection, this));\n  }\n  getAvailableTargets() {\n    return _classPrivateFieldGet(_attachedTargetsByTargetId, this);\n  }\n}\nfunction _setupAttachmentListeners(session) {\n  const listener = event => {\n    void _classPrivateFieldGet(_onAttachedToTarget, this).call(this, session, event);\n  };\n  assert(!_classPrivateFieldGet(_attachedToTargetListenersBySession, this).has(session));\n  _classPrivateFieldGet(_attachedToTargetListenersBySession, this).set(session, listener);\n  session.on('Target.attachedToTarget', listener);\n  const detachedListener = event => {\n    return _classPrivateFieldGet(_onDetachedFromTarget, this).call(this, session, event);\n  };\n  assert(!_classPrivateFieldGet(_detachedFromTargetListenersBySession, this).has(session));\n  _classPrivateFieldGet(_detachedFromTargetListenersBySession, this).set(session, detachedListener);\n  session.on('Target.detachedFromTarget', detachedListener);\n}\nfunction _removeAttachmentListeners(session) {\n  const listener = _classPrivateFieldGet(_attachedToTargetListenersBySession, this).get(session);\n  if (listener) {\n    session.off('Target.attachedToTarget', listener);\n    _classPrivateFieldGet(_attachedToTargetListenersBySession, this).delete(session);\n  }\n  if (_classPrivateFieldGet(_detachedFromTargetListenersBySession, this).has(session)) {\n    session.off('Target.detachedFromTarget', _classPrivateFieldGet(_detachedFromTargetListenersBySession, this).get(session));\n    _classPrivateFieldGet(_detachedFromTargetListenersBySession, this).delete(session);\n  }\n}\nfunction _finishInitializationIfReady(targetId) {\n  targetId !== undefined && _classPrivateFieldGet(_targetsIdsForInit, this).delete(targetId);\n  if (_classPrivateFieldGet(_targetsIdsForInit, this).size === 0) {\n    _classPrivateFieldGet(_initializeDeferred, this).resolve();\n  }\n}","map":{"version":3,"names":["CDPSession","CDPSessionEvent","EventEmitter","debugError","assert","Deferred","CdpTarget","InitializationStatus","isPageTargetBecomingPrimary","target","newTargetInfo","Boolean","_subtype","subtype","_connection","WeakMap","_discoveredTargetsByTargetId","_attachedTargetsByTargetId","_attachedTargetsBySessionId","_ignoredTargets","_targetFilterCallback","_targetFactory","_attachedToTargetListenersBySession","_detachedFromTargetListenersBySession","_initializeDeferred","_targetsIdsForInit","_waitForInitiallyDiscoveredTargets","_discoveryFilter","_storeExistingTargetsForInit","_ChromeTargetManager_brand","WeakSet","_onSessionDetached","_onTargetCreated","_onTargetDestroyed","_onTargetInfoChanged","_onAttachedToTarget","_onDetachedFromTarget","ChromeTargetManager","constructor","connection","targetFactory","targetFilterCallback","waitForInitiallyDiscoveredTargets","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","Map","Set","create","_classPrivateFieldGet","targetId","targetInfo","entries","targetForFilter","undefined","call","type","add","session","_assertClassBrand","_removeAttachmentListeners","event","set","emit","attached","has","_initialize","get","delete","_finishInitializationIfReady","previousURL","url","wasInitialized","_initializedDeferred","value","SUCCESS","_session","parentSession","Swapped","_targetInfoChanged","sessionId","Error","silentDetach","send","catch","id","isAutoAttached","isExistingTarget","_setupAttachmentListeners","_setTarget","Ready","_targetId","Promise","all","waitForDebuggerOnStart","flatten","autoAttach","filter","_parentSession","_classPrivateFieldSet","on","SessionDetached","initialize","discover","exclude","valueOrThrow","dispose","off","getAvailableTargets","listener","detachedListener","size","resolve"],"sources":["../../../../src/cdp/ChromeTargetManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}