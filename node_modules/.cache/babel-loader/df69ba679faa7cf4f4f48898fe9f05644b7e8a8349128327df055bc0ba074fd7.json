{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n/**\n * ArrayBuffer转Base64\n */\nexport function arrayBufferToBase64(buffer) {\n  let binaryStr = \"\";\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binaryStr += String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(binaryStr);\n}\n\n/**\n * base64转ArrayBuffer\n */\nexport function base64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\\\-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\n/**\n * 生成ecdh公钥和私钥\n */\nexport async function generateKeys() {\n  const ec = await window.crypto.subtle.generateKey({\n    name: \"ECDH\",\n    namedCurve: \"P-256\" // 使用 P-256 曲线\n  }, true, [\"deriveBits\"] // 用于生成共享秘钥\n  );\n  return ec;\n}\n\n/**\n * 计算共享秘钥\n */\nexport async function calShareKey(private_key, public_key) {\n  let bobPublicKeyBytes = base64ToUint8Array(public_key);\n  const publicKey = await window.crypto.subtle.importKey(\"raw\", bobPublicKeyBytes, {\n    name: \"ECDH\",\n    namedCurve: \"P-256\"\n  }, true, []);\n\n  //计算共享秘钥\n  const aliceSharedSecret = await window.crypto.subtle.deriveBits({\n    name: \"ECDH\",\n    public: publicKey\n  }, private_key, 256 // 256位共享秘钥\n  );\n  console.log(\"aliceSharedSecret:\", aliceSharedSecret);\n  return aliceSharedSecret;\n}","map":{"version":3,"names":["arrayBufferToBase64","buffer","binaryStr","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","window","btoa","base64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","charCodeAt","generateKeys","ec","crypto","subtle","generateKey","name","namedCurve","calShareKey","private_key","public_key","bobPublicKeyBytes","publicKey","importKey","aliceSharedSecret","deriveBits","public","console","log"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/ecdh.js"],"sourcesContent":["  /**\n   * ArrayBuffer转Base64\n   */\n   export function arrayBufferToBase64(buffer){\n    let binaryStr = \"\";\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    for(let i=0;i<len;i++){\n        binaryStr +=String.fromCharCode(bytes [i]);    \n    }\n    return window.btoa(binaryStr );\n  }\n\n  /**\n   * base64转ArrayBuffer\n   */\n export function base64ToUint8Array(base64String) {\n       const padding = '='.repeat((4 - base64String.length % 4) % 4);\n       const base64 = (base64String + padding)\n                    .replace(/\\\\-/g, '+')\n                    .replace(/_/g, '/');\n       const rawData = window.atob(base64);\n       const outputArray = new Uint8Array(rawData.length);\n\n       for (let i = 0; i < rawData.length; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n       }\n       return outputArray;\n}\n\n/**\n * 生成ecdh公钥和私钥\n */\nexport async function generateKeys(){\n    const ec = await window.crypto.subtle.generateKey(\n      {\n        name: \"ECDH\",\n        namedCurve: \"P-256\", // 使用 P-256 曲线\n      },\n      true, \n      [\"deriveBits\"] // 用于生成共享秘钥\n    );\n    return ec\n  }\n\n/**\n * 计算共享秘钥\n */\nexport async function calShareKey(private_key, public_key){\n     let bobPublicKeyBytes = base64ToUint8Array(public_key)\n     const publicKey = await window.crypto.subtle.importKey(\n       \"raw\",\n       bobPublicKeyBytes,\n       {\n         name: \"ECDH\",\n         namedCurve: \"P-256\"\n       },\n       true,\n       []\n     );\n\n     //计算共享秘钥\n     const aliceSharedSecret = await window.crypto.subtle.deriveBits(\n       {\n         name: \"ECDH\",\n         public: publicKey, \n       },\n       private_key,\n       256 // 256位共享秘钥\n     );\n     console.log(\"aliceSharedSecret:\",aliceSharedSecret);\n     return aliceSharedSecret\n}"],"mappings":";;;;;;;AAAE;AACF;AACA;AACG,OAAO,SAASA,mBAAmBA,CAACC,MAAM,EAAC;EAC1C,IAAIC,SAAS,GAAG,EAAE;EAClB,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACH,MAAM,CAAC;EACpC,MAAMI,GAAG,GAAGF,KAAK,CAACG,UAAU;EAC5B,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACF,GAAG,EAACE,CAAC,EAAE,EAAC;IAClBL,SAAS,IAAGM,MAAM,CAACC,YAAY,CAACN,KAAK,CAAEI,CAAC,CAAC,CAAC;EAC9C;EACA,OAAOG,MAAM,CAACC,IAAI,CAACT,SAAU,CAAC;AAChC;;AAEA;AACF;AACA;AACC,OAAO,SAASU,kBAAkBA,CAACC,YAAY,EAAE;EAC3C,MAAMC,OAAO,GAAG,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,GAAGF,YAAY,CAACG,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;EAC7D,MAAMC,MAAM,GAAG,CAACJ,YAAY,GAAGC,OAAO,EACxBI,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAChC,MAAMC,OAAO,GAAGT,MAAM,CAACU,IAAI,CAACH,MAAM,CAAC;EACnC,MAAMI,WAAW,GAAG,IAAIjB,UAAU,CAACe,OAAO,CAACH,MAAM,CAAC;EAElD,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,OAAO,CAACH,MAAM,EAAE,EAAET,CAAC,EAAE;IACpCc,WAAW,CAACd,CAAC,CAAC,GAAGY,OAAO,CAACG,UAAU,CAACf,CAAC,CAAC;EAC3C;EACA,OAAOc,WAAW;AACzB;;AAEA;AACA;AACA;AACA,OAAO,eAAeE,YAAYA,CAAA,EAAE;EAChC,MAAMC,EAAE,GAAG,MAAMd,MAAM,CAACe,MAAM,CAACC,MAAM,CAACC,WAAW,CAC/C;IACEC,IAAI,EAAE,MAAM;IACZC,UAAU,EAAE,OAAO,CAAE;EACvB,CAAC,EACD,IAAI,EACJ,CAAC,YAAY,CAAC,CAAC;EACjB,CAAC;EACD,OAAOL,EAAE;AACX;;AAEF;AACA;AACA;AACA,OAAO,eAAeM,WAAWA,CAACC,WAAW,EAAEC,UAAU,EAAC;EACrD,IAAIC,iBAAiB,GAAGrB,kBAAkB,CAACoB,UAAU,CAAC;EACtD,MAAME,SAAS,GAAG,MAAMxB,MAAM,CAACe,MAAM,CAACC,MAAM,CAACS,SAAS,CACpD,KAAK,EACLF,iBAAiB,EACjB;IACEL,IAAI,EAAE,MAAM;IACZC,UAAU,EAAE;EACd,CAAC,EACD,IAAI,EACJ,EACF,CAAC;;EAED;EACA,MAAMO,iBAAiB,GAAG,MAAM1B,MAAM,CAACe,MAAM,CAACC,MAAM,CAACW,UAAU,CAC7D;IACET,IAAI,EAAE,MAAM;IACZU,MAAM,EAAEJ;EACV,CAAC,EACDH,WAAW,EACX,GAAG,CAAC;EACN,CAAC;EACDQ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAACJ,iBAAiB,CAAC;EACnD,OAAOA,iBAAiB;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}