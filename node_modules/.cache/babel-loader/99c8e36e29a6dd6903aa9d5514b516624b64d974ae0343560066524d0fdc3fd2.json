{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateMethodInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _assertClassBrand = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/assertClassBrand.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExplorerSync = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst defaults_1 = require(\"./defaults\");\nconst ExplorerBase_js_1 = require(\"./ExplorerBase.js\");\nconst merge_1 = require(\"./merge\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nvar _ExplorerSync_brand = /*#__PURE__*/new WeakSet();\nclass ExplorerSync extends ExplorerBase_js_1.ExplorerBase {\n  constructor(...args) {\n    super(...args);\n    _classPrivateMethodInitSpec(this, _ExplorerSync_brand);\n  }\n  load(filepath) {\n    filepath = path_1.default.resolve(filepath);\n    const load = () => {\n      return this.config.transform(_assertClassBrand(_ExplorerSync_brand, this, _readConfiguration).call(this, filepath));\n    };\n    if (this.loadCache) {\n      return (0, util_js_1.emplace)(this.loadCache, filepath, load);\n    }\n    return load();\n  }\n  search(from = '') {\n    if (this.config.metaConfigFilePath) {\n      this.loadingMetaConfig = true;\n      const config = this.load(this.config.metaConfigFilePath);\n      this.loadingMetaConfig = false;\n      if (config && !config.isEmpty) {\n        return config;\n      }\n    }\n    from = path_1.default.resolve(from);\n    const dirs = _assertClassBrand(_ExplorerSync_brand, this, _getDirs).call(this, from);\n    const firstDirIter = dirs.next();\n    /* istanbul ignore if -- @preserve */\n    if (firstDirIter.done) {\n      // this should never happen\n      throw new Error(`Could not find any folders to iterate through (start from ${from})`);\n    }\n    let currentDir = firstDirIter.value;\n    const search = () => {\n      /* istanbul ignore if -- @preserve */\n      if ((0, util_js_1.isDirectorySync)(currentDir.path)) {\n        for (const filepath of this.getSearchPlacesForDir(currentDir, defaults_1.globalConfigSearchPlacesSync)) {\n          try {\n            const result = _assertClassBrand(_ExplorerSync_brand, this, _readConfiguration).call(this, filepath);\n            if (result !== null && !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {\n              return this.config.transform(result);\n            }\n          } catch (error) {\n            if (error.code === 'ENOENT' || error.code === 'EISDIR' || error.code === 'ENOTDIR' || error.code === 'EACCES') {\n              continue;\n            }\n            throw error;\n          }\n        }\n      }\n      const nextDirIter = dirs.next();\n      if (!nextDirIter.done) {\n        currentDir = nextDirIter.value;\n        if (this.searchCache) {\n          return (0, util_js_1.emplace)(this.searchCache, currentDir.path, search);\n        }\n        return search();\n      }\n      return this.config.transform(null);\n    };\n    if (this.searchCache) {\n      return (0, util_js_1.emplace)(this.searchCache, from, search);\n    }\n    return search();\n  }\n  /**\n   * @deprecated Use {@link ExplorerSync.prototype.load}.\n   */\n  /* istanbul ignore next */\n  loadSync(filepath) {\n    return this.load(filepath);\n  }\n  /**\n   * @deprecated Use {@link ExplorerSync.prototype.search}.\n   */\n  /* istanbul ignore next */\n  searchSync(from = '') {\n    return this.search(from);\n  }\n}\nfunction _readConfiguration(filepath, importStack = []) {\n  const contents = fs_1.default.readFileSync(filepath, 'utf8');\n  return this.toCosmiconfigResult(filepath, _assertClassBrand(_ExplorerSync_brand, this, _loadConfigFileWithImports).call(this, filepath, contents, importStack));\n}\nfunction _loadConfigFileWithImports(filepath, contents, importStack) {\n  const loadedContent = _assertClassBrand(_ExplorerSync_brand, this, _loadConfiguration).call(this, filepath, contents);\n  if (!loadedContent || !(0, merge_1.hasOwn)(loadedContent, '$import')) {\n    return loadedContent;\n  }\n  const fileDirectory = path_1.default.dirname(filepath);\n  const {\n    $import: imports,\n    ...ownContent\n  } = loadedContent;\n  const importPaths = Array.isArray(imports) ? imports : [imports];\n  const newImportStack = [...importStack, filepath];\n  this.validateImports(filepath, importPaths, newImportStack);\n  const importedConfigs = importPaths.map(importPath => {\n    const fullPath = path_1.default.resolve(fileDirectory, importPath);\n    const result = _assertClassBrand(_ExplorerSync_brand, this, _readConfiguration).call(this, fullPath, newImportStack);\n    return result?.config;\n  });\n  return (0, merge_1.mergeAll)([...importedConfigs, ownContent], {\n    mergeArrays: this.config.mergeImportArrays\n  });\n}\nfunction _loadConfiguration(filepath, contents) {\n  if (contents.trim() === '') {\n    return;\n  }\n  const extension = path_1.default.extname(filepath);\n  const loader = this.config.loaders[extension || 'noExt'] ?? this.config.loaders['default'];\n  if (!loader) {\n    throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);\n  }\n  try {\n    const loadedContents = loader(filepath, contents);\n    if (path_1.default.basename(filepath, extension) !== 'package') {\n      return loadedContents;\n    }\n    return (0, util_js_1.getPropertyByPath)(loadedContents, this.config.packageProp ?? this.config.moduleName) ?? null;\n  } catch (error) {\n    error.filepath = filepath;\n    throw error;\n  }\n}\nfunction _fileExists(path) {\n  try {\n    fs_1.default.statSync(path);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction* _getDirs(startDir) {\n  switch (this.config.searchStrategy) {\n    case 'none':\n      {\n        // there is no next dir\n        yield {\n          path: startDir,\n          isGlobalConfig: false\n        };\n        return;\n      }\n    case 'project':\n      {\n        let currentDir = startDir;\n        while (true) {\n          yield {\n            path: currentDir,\n            isGlobalConfig: false\n          };\n          for (const ext of ['json', 'yaml']) {\n            const packageFile = path_1.default.join(currentDir, `package.${ext}`);\n            if (_assertClassBrand(_ExplorerSync_brand, this, _fileExists).call(this, packageFile)) {\n              break;\n            }\n          }\n          const parentDir = path_1.default.dirname(currentDir);\n          /* istanbul ignore if -- @preserve */\n          if (parentDir === currentDir) {\n            // we're probably at the root of the directory structure\n            break;\n          }\n          currentDir = parentDir;\n        }\n        return;\n      }\n    case 'global':\n      {\n        yield* this.getGlobalDirs(startDir);\n      }\n  }\n}\nexports.ExplorerSync = ExplorerSync;","map":{"version":3,"names":["fs_1","__importDefault","require","path_1","defaults_1","ExplorerBase_js_1","merge_1","util_js_1","_ExplorerSync_brand","WeakSet","ExplorerSync","ExplorerBase","constructor","args","_classPrivateMethodInitSpec","load","filepath","default","resolve","config","transform","_assertClassBrand","_readConfiguration","call","loadCache","emplace","search","from","metaConfigFilePath","loadingMetaConfig","isEmpty","dirs","_getDirs","firstDirIter","next","done","Error","currentDir","value","isDirectorySync","path","getSearchPlacesForDir","globalConfigSearchPlacesSync","result","ignoreEmptySearchPlaces","error","code","nextDirIter","searchCache","loadSync","searchSync","importStack","contents","readFileSync","toCosmiconfigResult","_loadConfigFileWithImports","loadedContent","_loadConfiguration","hasOwn","fileDirectory","dirname","$import","imports","ownContent","importPaths","Array","isArray","newImportStack","validateImports","importedConfigs","map","importPath","fullPath","mergeAll","mergeArrays","mergeImportArrays","trim","extension","extname","loader","loaders","getExtensionDescription","loadedContents","basename","getPropertyByPath","packageProp","moduleName","_fileExists","statSync","e","startDir","searchStrategy","isGlobalConfig","ext","packageFile","join","parentDir","getGlobalDirs","exports"],"sources":["../src/ExplorerSync.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}