{"ast":null,"code":"import * as echarts from 'echarts';\nimport theme from './theme/tduck-echarts-theme.json';\nimport debounce from 'lodash/debounce';\nimport { addListener, removeListener } from 'resize-detector';\nconst INIT_TRIGGERS = ['theme', 'initOptions', 'autoResize'];\nconst REWATCH_TRIGGERS = ['manualUpdate', 'watchShallow'];\nexport default {\n  props: {\n    option: {\n      type: Object,\n      default: () => {}\n    },\n    theme: {\n      type: [String, Object],\n      default: () => {}\n    },\n    initOptions: {\n      type: Object,\n      default: () => {}\n    },\n    group: {\n      type: String,\n      default: ''\n    },\n    autoResize: {\n      type: Boolean,\n      default: true\n    },\n    watchShallow: {\n      type: Boolean,\n      default: false\n    },\n    manualUpdate: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      lastArea: 0\n    };\n  },\n  watch: {\n    group(group) {\n      this.chart.group = group;\n    }\n  },\n  created() {\n    this.initOptionsWatcher();\n    INIT_TRIGGERS.forEach(prop => {\n      this.$watch(prop, () => {\n        this.refresh();\n      }, {\n        deep: true\n      });\n    });\n    REWATCH_TRIGGERS.forEach(prop => {\n      this.$watch(prop, () => {\n        this.initOptionsWatcher();\n        this.refresh();\n      });\n    });\n  },\n  mounted() {\n    if (this.option) {\n      echarts.registerTheme('vab-echarts-theme', theme);\n      this.init();\n    }\n  },\n  activated() {\n    if (this.autoResize) {\n      this.chart && this.chart.resize();\n    }\n  },\n  destroyed() {\n    if (this.chart) {\n      this.destroy();\n    }\n  },\n  methods: {\n    mergeOptions(option, notMerge, lazyUpdate) {\n      if (this.manualUpdate) {\n        this.manualOptions = option;\n      }\n      if (!this.chart) {\n        this.init(option);\n      } else {\n        this.delegateMethod('setOption', option, notMerge, lazyUpdate);\n      }\n    },\n    appendData(params) {\n      this.delegateMethod('appendData', params);\n    },\n    resize(option) {\n      this.delegateMethod('resize', option);\n    },\n    dispatchAction(payload) {\n      this.delegateMethod('dispatchAction', payload);\n    },\n    convertToPixel(finder, value) {\n      return this.delegateMethod('convertToPixel', finder, value);\n    },\n    convertFromPixel(finder, value) {\n      return this.delegateMethod('convertFromPixel', finder, value);\n    },\n    containPixel(finder, value) {\n      return this.delegateMethod('containPixel', finder, value);\n    },\n    showLoading(type, option) {\n      this.delegateMethod('showLoading', type, option);\n    },\n    hideLoading() {\n      this.delegateMethod('hideLoading');\n    },\n    getDataURL(option) {\n      return this.delegateMethod('getDataURL', option);\n    },\n    getConnectedDataURL(option) {\n      return this.delegateMethod('getConnectedDataURL', option);\n    },\n    clear() {\n      this.delegateMethod('clear');\n    },\n    dispose() {\n      this.delegateMethod('dispose');\n    },\n    delegateMethod(name, ...args) {\n      if (!this.chart) {\n        this.init();\n      }\n      return this.chart[name](...args);\n    },\n    delegateGet(methodName) {\n      if (!this.chart) {\n        this.init();\n      }\n      return this.chart[methodName]();\n    },\n    getArea() {\n      return this.$el.offsetWidth * this.$el.offsetHeight;\n    },\n    init(option) {\n      if (this.chart) {\n        return;\n      }\n      const chart = echarts.init(this.$el, this.theme, this.initOptions);\n      if (this.group) {\n        chart.group = this.group;\n      }\n      chart.setOption(option || this.manualOptions || this.option || {}, true);\n      Object.keys(this.$listeners).forEach(event => {\n        const handler = this.$listeners[event];\n        if (event.indexOf('zr:') === 0) {\n          chart.getZr().on(event.slice(3), handler);\n        } else {\n          chart.on(event, handler);\n        }\n      });\n      if (this.autoResize) {\n        this.lastArea = this.getArea();\n        this.__resizeHandler = debounce(() => {\n          if (this.lastArea === 0) {\n            this.mergeOptions({}, true);\n            this.resize();\n            this.mergeOptions(this.option || this.manualOptions || {}, true);\n          } else {\n            this.resize();\n          }\n          this.lastArea = this.getArea();\n        }, 100, {\n          leading: true\n        });\n        addListener(this.$el, this.__resizeHandler);\n      }\n      Object.defineProperties(this, {\n        width: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getWidth');\n          }\n        },\n        height: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getHeight');\n          }\n        },\n        isDisposed: {\n          configurable: true,\n          get: () => {\n            return !!this.delegateGet('isDisposed');\n          }\n        },\n        computedOptions: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getOption');\n          }\n        }\n      });\n      this.chart = chart;\n    },\n    initOptionsWatcher() {\n      if (this.__unwatchOptions) {\n        this.__unwatchOptions();\n        this.__unwatchOptions = null;\n      }\n      if (!this.manualUpdate) {\n        this.__unwatchOptions = this.$watch('option', (val, oldVal) => {\n          if (!this.chart && val) {\n            this.init();\n          } else {\n            this.chart.setOption(val, val !== oldVal);\n          }\n        }, {\n          deep: !this.watchShallow\n        });\n      }\n    },\n    destroy() {\n      if (this.autoResize) {\n        removeListener(this.$el, this.__resizeHandler);\n      }\n      this.dispose();\n      this.chart = null;\n    },\n    refresh() {\n      if (this.chart) {\n        this.destroy();\n        this.init();\n      }\n    }\n  },\n  connect(group) {\n    if (typeof group !== 'string') {\n      group = group.map(chart => chart.chart);\n    }\n    echarts.connect(group);\n  },\n  disconnect(group) {\n    echarts.disConnect(group);\n  },\n  getMap(mapName) {\n    return echarts.getMap(mapName);\n  },\n  registerMap(mapName, geoJSON, specialAreas) {\n    echarts.registerMap(mapName, geoJSON, specialAreas);\n  },\n  graphic: echarts.graphic\n};","map":{"version":3,"names":["echarts","theme","debounce","addListener","removeListener","INIT_TRIGGERS","REWATCH_TRIGGERS","props","option","type","Object","default","String","initOptions","group","autoResize","Boolean","watchShallow","manualUpdate","data","lastArea","watch","chart","created","initOptionsWatcher","forEach","prop","$watch","refresh","deep","mounted","registerTheme","init","activated","resize","destroyed","destroy","methods","mergeOptions","notMerge","lazyUpdate","manualOptions","delegateMethod","appendData","params","dispatchAction","payload","convertToPixel","finder","value","convertFromPixel","containPixel","showLoading","hideLoading","getDataURL","getConnectedDataURL","clear","dispose","name","args","delegateGet","methodName","getArea","$el","offsetWidth","offsetHeight","setOption","keys","$listeners","event","handler","indexOf","getZr","on","slice","__resizeHandler","leading","defineProperties","width","configurable","get","height","isDisposed","computedOptions","__unwatchOptions","val","oldVal","connect","map","disconnect","disConnect","getMap","mapName","registerMap","geoJSON","specialAreas","graphic"],"sources":["src/views/components/TChart/index.vue"],"sourcesContent":["<template>\n  <div class=\"echarts\" />\n</template>\n\n<script>\nimport * as echarts from 'echarts'\nimport theme from './theme/tduck-echarts-theme.json'\nimport debounce from 'lodash/debounce'\nimport {addListener, removeListener} from 'resize-detector'\n\nconst INIT_TRIGGERS = ['theme', 'initOptions', 'autoResize']\nconst REWATCH_TRIGGERS = ['manualUpdate', 'watchShallow']\n\nexport default {\n  props: {\n    option: {\n      type: Object,\n      default: () => {\n      }\n    },\n    theme: {\n      type: [String, Object],\n      default: () => {\n      }\n    },\n    initOptions: {\n      type: Object,\n      default: () => {\n      }\n    },\n    group: {\n      type: String,\n      default: ''\n    },\n    autoResize: {\n      type: Boolean,\n      default: true\n    },\n    watchShallow: {\n      type: Boolean,\n      default: false\n    },\n    manualUpdate: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      lastArea: 0\n    }\n  },\n  watch: {\n    group(group) {\n      this.chart.group = group\n    }\n  },\n  created() {\n    this.initOptionsWatcher()\n    INIT_TRIGGERS.forEach(prop => {\n      this.$watch(\n        prop,\n        () => {\n          this.refresh()\n        },\n        {deep: true}\n      )\n    })\n    REWATCH_TRIGGERS.forEach(prop => {\n      this.$watch(prop, () => {\n        this.initOptionsWatcher()\n        this.refresh()\n      })\n    })\n  },\n  mounted() {\n    if (this.option) {\n      echarts.registerTheme('vab-echarts-theme', theme)\n      this.init()\n    }\n  },\n  activated() {\n    if (this.autoResize) {\n      this.chart && this.chart.resize()\n    }\n  },\n  destroyed() {\n    if (this.chart) {\n      this.destroy()\n    }\n  },\n  methods: {\n    mergeOptions(option, notMerge, lazyUpdate) {\n      if (this.manualUpdate) {\n        this.manualOptions = option\n      }\n      if (!this.chart) {\n        this.init(option)\n      } else {\n        this.delegateMethod('setOption', option, notMerge, lazyUpdate)\n      }\n    },\n    appendData(params) {\n      this.delegateMethod('appendData', params)\n    },\n    resize(option) {\n      this.delegateMethod('resize', option)\n    },\n    dispatchAction(payload) {\n      this.delegateMethod('dispatchAction', payload)\n    },\n    convertToPixel(finder, value) {\n      return this.delegateMethod('convertToPixel', finder, value)\n    },\n    convertFromPixel(finder, value) {\n      return this.delegateMethod('convertFromPixel', finder, value)\n    },\n    containPixel(finder, value) {\n      return this.delegateMethod('containPixel', finder, value)\n    },\n    showLoading(type, option) {\n      this.delegateMethod('showLoading', type, option)\n    },\n    hideLoading() {\n      this.delegateMethod('hideLoading')\n    },\n    getDataURL(option) {\n      return this.delegateMethod('getDataURL', option)\n    },\n    getConnectedDataURL(option) {\n      return this.delegateMethod('getConnectedDataURL', option)\n    },\n    clear() {\n      this.delegateMethod('clear')\n    },\n    dispose() {\n      this.delegateMethod('dispose')\n    },\n    delegateMethod(name, ...args) {\n      if (!this.chart) {\n        this.init()\n      }\n      return this.chart[name](...args)\n    },\n    delegateGet(methodName) {\n      if (!this.chart) {\n        this.init()\n      }\n      return this.chart[methodName]()\n    },\n    getArea() {\n      return this.$el.offsetWidth * this.$el.offsetHeight\n    },\n    init(option) {\n      if (this.chart) {\n        return\n      }\n      const chart = echarts.init(this.$el, this.theme, this.initOptions)\n      if (this.group) {\n        chart.group = this.group\n      }\n      chart.setOption(option || this.manualOptions || this.option || {}, true)\n      Object.keys(this.$listeners).forEach(event => {\n        const handler = this.$listeners[event]\n        if (event.indexOf('zr:') === 0) {\n          chart.getZr().on(event.slice(3), handler)\n        } else {\n          chart.on(event, handler)\n        }\n      })\n      if (this.autoResize) {\n        this.lastArea = this.getArea()\n        this.__resizeHandler = debounce(\n          () => {\n            if (this.lastArea === 0) {\n              this.mergeOptions({}, true)\n              this.resize()\n              this.mergeOptions(this.option || this.manualOptions || {}, true)\n            } else {\n              this.resize()\n            }\n            this.lastArea = this.getArea()\n          },\n          100,\n          {leading: true}\n        )\n        addListener(this.$el, this.__resizeHandler)\n      }\n      Object.defineProperties(this, {\n        width: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getWidth')\n          }\n        },\n        height: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getHeight')\n          }\n        },\n        isDisposed: {\n          configurable: true,\n          get: () => {\n            return !!this.delegateGet('isDisposed')\n          }\n        },\n        computedOptions: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getOption')\n          }\n        }\n      })\n      this.chart = chart\n    },\n    initOptionsWatcher() {\n      if (this.__unwatchOptions) {\n        this.__unwatchOptions()\n        this.__unwatchOptions = null\n      }\n      if (!this.manualUpdate) {\n        this.__unwatchOptions = this.$watch(\n          'option',\n          (val, oldVal) => {\n            if (!this.chart && val) {\n              this.init()\n            } else {\n              this.chart.setOption(val, val !== oldVal)\n            }\n          },\n          {deep: !this.watchShallow}\n        )\n      }\n    },\n    destroy() {\n      if (this.autoResize) {\n        removeListener(this.$el, this.__resizeHandler)\n      }\n      this.dispose()\n      this.chart = null\n    },\n    refresh() {\n      if (this.chart) {\n        this.destroy()\n        this.init()\n      }\n    }\n  },\n  connect(group) {\n    if (typeof group !== 'string') {\n      group = group.map(chart => chart.chart)\n    }\n    echarts.connect(group)\n  },\n  disconnect(group) {\n    echarts.disConnect(group)\n  },\n  getMap(mapName) {\n    return echarts.getMap(mapName)\n  },\n  registerMap(mapName, geoJSON, specialAreas) {\n    echarts.registerMap(mapName, geoJSON, specialAreas)\n  },\n  graphic: echarts.graphic\n}\n</script>\n<style>\n.echarts {\n  width: 600px;\n  height: 400px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}