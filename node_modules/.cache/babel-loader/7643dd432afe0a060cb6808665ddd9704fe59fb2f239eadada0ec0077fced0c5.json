{"ast":null,"code":"/**\n * 注册事件监听器，并返回一个可用于移除事件监听的对象。\n *\n * @param {Object} target - 事件监听器要添加到的目标对象。\n * @param {string} eventType - 事件类型，如 'click'、'blur' 等。\n * @param {function} cb - 事件回调函数。\n * @returns {Object} - 可用于移除事件监听的对象，具有一个 `remove` 方法。\n */\nexport function _registerEvent(target, eventType, cb) {\n  const eventListener = target.addEventListener || target.attachEvent;\n  eventListener.call(target, eventType, cb);\n  return {\n    remove: function () {\n      const eventRemover = target.removeEventListener || target.detachEvent;\n      eventRemover.call(target, eventType, cb);\n    }\n  };\n}\n\n/**\n * 在打开指定URI之前设置一个超时，以处理超时情况。\n *\n * @param {string} uri - 要打开的URI。\n * @param {function} failCb - 超时或失败时的回调函数。\n * @param {function} successCb - 成功时的回调函数。\n * @param {number} timeoutDuration - 超时时长（毫秒）。\n */\nexport function openUriWithTimeoutHack(uri, failCb, successCb, timeoutDuration) {\n  let timeout = setTimeout(function () {\n    failCb();\n    handler.remove();\n  }, timeoutDuration);\n  let target = window;\n  while (target !== target.parent) {\n    target = target.parent;\n  }\n  let handler = _registerEvent(target, 'blur', onBlur);\n  function onBlur() {\n    clearTimeout(timeout);\n    handler.remove();\n    successCb();\n  }\n  window.location = uri;\n}","map":{"version":3,"names":["_registerEvent","target","eventType","cb","eventListener","addEventListener","attachEvent","call","remove","eventRemover","removeEventListener","detachEvent","openUriWithTimeoutHack","uri","failCb","successCb","timeoutDuration","timeout","setTimeout","handler","window","parent","onBlur","clearTimeout","location"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/monitoringApp.js"],"sourcesContent":["/**\n * 注册事件监听器，并返回一个可用于移除事件监听的对象。\n *\n * @param {Object} target - 事件监听器要添加到的目标对象。\n * @param {string} eventType - 事件类型，如 'click'、'blur' 等。\n * @param {function} cb - 事件回调函数。\n * @returns {Object} - 可用于移除事件监听的对象，具有一个 `remove` 方法。\n */\n export function _registerEvent(target, eventType, cb) {\n    const eventListener = target.addEventListener || target.attachEvent;\n    eventListener.call(target, eventType, cb);\n  \n    return {\n      remove: function () {\n        const eventRemover = target.removeEventListener || target.detachEvent;\n        eventRemover.call(target, eventType, cb);\n      },\n    };\n  }\n  \n  /**\n   * 在打开指定URI之前设置一个超时，以处理超时情况。\n   *\n   * @param {string} uri - 要打开的URI。\n   * @param {function} failCb - 超时或失败时的回调函数。\n   * @param {function} successCb - 成功时的回调函数。\n   * @param {number} timeoutDuration - 超时时长（毫秒）。\n   */\n  export function openUriWithTimeoutHack(uri, failCb, successCb, timeoutDuration) {\n    let timeout = setTimeout(function () {\n      failCb();\n      handler.remove();\n    }, timeoutDuration);\n  \n    let target = window;\n    while (target !== target.parent) {\n      target = target.parent;\n    }\n  \n    let handler = _registerEvent(target, 'blur', onBlur);\n  \n    function onBlur() {\n      clearTimeout(timeout);\n      handler.remove();\n      successCb();\n    }\n  \n    window.location = uri;\n  }\n  "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,OAAO,SAASA,cAAcA,CAACC,MAAM,EAAEC,SAAS,EAAEC,EAAE,EAAE;EACnD,MAAMC,aAAa,GAAGH,MAAM,CAACI,gBAAgB,IAAIJ,MAAM,CAACK,WAAW;EACnEF,aAAa,CAACG,IAAI,CAACN,MAAM,EAAEC,SAAS,EAAEC,EAAE,CAAC;EAEzC,OAAO;IACLK,MAAM,EAAE,SAAAA,CAAA,EAAY;MAClB,MAAMC,YAAY,GAAGR,MAAM,CAACS,mBAAmB,IAAIT,MAAM,CAACU,WAAW;MACrEF,YAAY,CAACF,IAAI,CAACN,MAAM,EAAEC,SAAS,EAAEC,EAAE,CAAC;IAC1C;EACF,CAAC;AACH;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,OAAO,SAASS,sBAAsBA,CAACC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAEC,eAAe,EAAE;EAC9E,IAAIC,OAAO,GAAGC,UAAU,CAAC,YAAY;IACnCJ,MAAM,CAAC,CAAC;IACRK,OAAO,CAACX,MAAM,CAAC,CAAC;EAClB,CAAC,EAAEQ,eAAe,CAAC;EAEnB,IAAIf,MAAM,GAAGmB,MAAM;EACnB,OAAOnB,MAAM,KAAKA,MAAM,CAACoB,MAAM,EAAE;IAC/BpB,MAAM,GAAGA,MAAM,CAACoB,MAAM;EACxB;EAEA,IAAIF,OAAO,GAAGnB,cAAc,CAACC,MAAM,EAAE,MAAM,EAAEqB,MAAM,CAAC;EAEpD,SAASA,MAAMA,CAAA,EAAG;IAChBC,YAAY,CAACN,OAAO,CAAC;IACrBE,OAAO,CAACX,MAAM,CAAC,CAAC;IAChBO,SAAS,CAAC,CAAC;EACb;EAEAK,MAAM,CAACI,QAAQ,GAAGX,GAAG;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}