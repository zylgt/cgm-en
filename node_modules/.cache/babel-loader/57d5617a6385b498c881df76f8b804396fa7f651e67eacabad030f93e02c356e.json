{"ast":null,"code":"import _defineProperty from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateFieldInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { assert } from '../util/assert.js';\nimport { interpolateFunction, stringifyFunction } from '../util/Function.js';\nimport { QueryHandler } from './QueryHandler.js';\nimport { scriptInjector } from './ScriptInjector.js';\n/**\n * The registry of {@link CustomQueryHandler | custom query handlers}.\n *\n * @example\n *\n * ```ts\n * Puppeteer.customQueryHandlers.register('lit', { … });\n * const aHandle = await page.$('lit/…');\n * ```\n *\n * @internal\n */\nvar _handlers = /*#__PURE__*/new WeakMap();\nexport class CustomQueryHandlerRegistry {\n  constructor() {\n    _classPrivateFieldInitSpec(this, _handlers, new Map());\n  }\n  get(name) {\n    const handler = _classPrivateFieldGet(_handlers, this).get(name);\n    return handler ? handler[1] : undefined;\n  }\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}.\n   *\n   * @remarks\n   * After registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is\n   * only allowed to consist of lower- and upper case latin letters.\n   *\n   * @example\n   *\n   * ```ts\n   * Puppeteer.customQueryHandlers.register('lit', { … });\n   * const aHandle = await page.$('lit/…');\n   * ```\n   *\n   * @param name - Name to register under.\n   * @param queryHandler - {@link CustomQueryHandler | Custom query handler} to\n   * register.\n   */\n  register(name, handler) {\n    var _Class;\n    assert(!_classPrivateFieldGet(_handlers, this).has(name), `Cannot register over existing handler: ${name}`);\n    assert(/^[a-zA-Z]+$/.test(name), `Custom query handler names may only contain [a-zA-Z]`);\n    assert(handler.queryAll || handler.queryOne, `At least one query method must be implemented.`);\n    const Handler = (_Class = class Handler extends QueryHandler {}, _defineProperty(_Class, \"querySelectorAll\", interpolateFunction((node, selector, PuppeteerUtil) => {\n      return PuppeteerUtil.customQuerySelectors.get(PLACEHOLDER('name')).querySelectorAll(node, selector);\n    }, {\n      name: JSON.stringify(name)\n    })), _defineProperty(_Class, \"querySelector\", interpolateFunction((node, selector, PuppeteerUtil) => {\n      return PuppeteerUtil.customQuerySelectors.get(PLACEHOLDER('name')).querySelector(node, selector);\n    }, {\n      name: JSON.stringify(name)\n    })), _Class);\n    const registerScript = interpolateFunction(PuppeteerUtil => {\n      PuppeteerUtil.customQuerySelectors.register(PLACEHOLDER('name'), {\n        queryAll: PLACEHOLDER('queryAll'),\n        queryOne: PLACEHOLDER('queryOne')\n      });\n    }, {\n      name: JSON.stringify(name),\n      queryAll: handler.queryAll ? stringifyFunction(handler.queryAll) : String(undefined),\n      queryOne: handler.queryOne ? stringifyFunction(handler.queryOne) : String(undefined)\n    }).toString();\n    _classPrivateFieldGet(_handlers, this).set(name, [registerScript, Handler]);\n    scriptInjector.append(registerScript);\n  }\n  /**\n   * Unregisters the {@link CustomQueryHandler | custom query handler} for the\n   * given name.\n   *\n   * @throws `Error` if there is no handler under the given name.\n   */\n  unregister(name) {\n    const handler = _classPrivateFieldGet(_handlers, this).get(name);\n    if (!handler) {\n      throw new Error(`Cannot unregister unknown handler: ${name}`);\n    }\n    scriptInjector.pop(handler[0]);\n    _classPrivateFieldGet(_handlers, this).delete(name);\n  }\n  /**\n   * Gets the names of all {@link CustomQueryHandler | custom query handlers}.\n   */\n  names() {\n    return [..._classPrivateFieldGet(_handlers, this).keys()];\n  }\n  /**\n   * Unregisters all custom query handlers.\n   */\n  clear() {\n    for (const [registerScript] of _classPrivateFieldGet(_handlers, this)) {\n      scriptInjector.pop(registerScript);\n    }\n    _classPrivateFieldGet(_handlers, this).clear();\n  }\n}\n/**\n * @internal\n */\nexport const customQueryHandlers = new CustomQueryHandlerRegistry();\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.registerCustomQueryHandler}\n *\n * @public\n */\nexport function registerCustomQueryHandler(name, handler) {\n  customQueryHandlers.register(name, handler);\n}\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.unregisterCustomQueryHandler}\n *\n * @public\n */\nexport function unregisterCustomQueryHandler(name) {\n  customQueryHandlers.unregister(name);\n}\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.customQueryHandlerNames}\n *\n * @public\n */\nexport function customQueryHandlerNames() {\n  return customQueryHandlers.names();\n}\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.clearCustomQueryHandlers}\n *\n * @public\n */\nexport function clearCustomQueryHandlers() {\n  customQueryHandlers.clear();\n}","map":{"version":3,"names":["assert","interpolateFunction","stringifyFunction","QueryHandler","scriptInjector","_handlers","WeakMap","CustomQueryHandlerRegistry","constructor","_classPrivateFieldInitSpec","Map","get","name","handler","_classPrivateFieldGet","undefined","register","_Class","has","test","queryAll","queryOne","Handler","_defineProperty","node","selector","PuppeteerUtil","customQuerySelectors","PLACEHOLDER","querySelectorAll","JSON","stringify","querySelector","registerScript","String","toString","set","append","unregister","Error","pop","delete","names","keys","clear","customQueryHandlers","registerCustomQueryHandler","unregisterCustomQueryHandler","customQueryHandlerNames","clearCustomQueryHandlers"],"sources":["../../../../src/common/CustomQueryHandler.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}