{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _defineProperty = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldSet2.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cache = exports.InstalledBrowser = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst os_1 = __importDefault(require(\"os\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst browser_data_js_1 = require(\"./browser-data/browser-data.js\");\nconst detectPlatform_js_1 = require(\"./detectPlatform.js\");\nconst debugCache = (0, debug_1.default)('puppeteer:browsers:cache');\n/**\n * @public\n */\nvar _cache = /*#__PURE__*/new WeakMap();\nclass InstalledBrowser {\n  /**\n   * @internal\n   */\n  constructor(cache, browser, buildId, platform) {\n    _defineProperty(this, \"browser\", void 0);\n    _defineProperty(this, \"buildId\", void 0);\n    _defineProperty(this, \"platform\", void 0);\n    _defineProperty(this, \"executablePath\", void 0);\n    _classPrivateFieldInitSpec(this, _cache, void 0);\n    _classPrivateFieldSet(_cache, this, cache);\n    this.browser = browser;\n    this.buildId = buildId;\n    this.platform = platform;\n    this.executablePath = cache.computeExecutablePath({\n      browser,\n      buildId,\n      platform\n    });\n  }\n  /**\n   * Path to the root of the installation folder. Use\n   * {@link computeExecutablePath} to get the path to the executable binary.\n   */\n  get path() {\n    return _classPrivateFieldGet(_cache, this).installationDir(this.browser, this.platform, this.buildId);\n  }\n  readMetadata() {\n    return _classPrivateFieldGet(_cache, this).readMetadata(this.browser);\n  }\n  writeMetadata(metadata) {\n    _classPrivateFieldGet(_cache, this).writeMetadata(this.browser, metadata);\n  }\n}\nexports.InstalledBrowser = InstalledBrowser;\n/**\n * The cache used by Puppeteer relies on the following structure:\n *\n * - rootDir\n *   -- <browser1> | browserRoot(browser1)\n *   ---- <platform>-<buildId> | installationDir()\n *   ------ the browser-platform-buildId\n *   ------ specific structure.\n *   -- <browser2> | browserRoot(browser2)\n *   ---- <platform>-<buildId> | installationDir()\n *   ------ the browser-platform-buildId\n *   ------ specific structure.\n *   @internal\n */\nvar _rootDir = /*#__PURE__*/new WeakMap();\nclass Cache {\n  constructor(rootDir) {\n    _classPrivateFieldInitSpec(this, _rootDir, void 0);\n    _classPrivateFieldSet(_rootDir, this, rootDir);\n  }\n  /**\n   * @internal\n   */\n  get rootDir() {\n    return _classPrivateFieldGet(_rootDir, this);\n  }\n  browserRoot(browser) {\n    return path_1.default.join(_classPrivateFieldGet(_rootDir, this), browser);\n  }\n  metadataFile(browser) {\n    return path_1.default.join(this.browserRoot(browser), '.metadata');\n  }\n  readMetadata(browser) {\n    const metatadaPath = this.metadataFile(browser);\n    if (!fs_1.default.existsSync(metatadaPath)) {\n      return {\n        aliases: {}\n      };\n    }\n    // TODO: add type-safe parsing.\n    const data = JSON.parse(fs_1.default.readFileSync(metatadaPath, 'utf8'));\n    if (typeof data !== 'object') {\n      throw new Error('.metadata is not an object');\n    }\n    return data;\n  }\n  writeMetadata(browser, metadata) {\n    const metatadaPath = this.metadataFile(browser);\n    fs_1.default.mkdirSync(path_1.default.dirname(metatadaPath), {\n      recursive: true\n    });\n    fs_1.default.writeFileSync(metatadaPath, JSON.stringify(metadata, null, 2));\n  }\n  resolveAlias(browser, alias) {\n    const metadata = this.readMetadata(browser);\n    if (alias === 'latest') {\n      return Object.values(metadata.aliases || {}).sort((0, browser_data_js_1.getVersionComparator)(browser)).at(-1);\n    }\n    return metadata.aliases[alias];\n  }\n  installationDir(browser, platform, buildId) {\n    return path_1.default.join(this.browserRoot(browser), `${platform}-${buildId}`);\n  }\n  clear() {\n    fs_1.default.rmSync(_classPrivateFieldGet(_rootDir, this), {\n      force: true,\n      recursive: true,\n      maxRetries: 10,\n      retryDelay: 500\n    });\n  }\n  uninstall(browser, platform, buildId) {\n    const metadata = this.readMetadata(browser);\n    for (const alias of Object.keys(metadata.aliases)) {\n      if (metadata.aliases[alias] === buildId) {\n        delete metadata.aliases[alias];\n      }\n    }\n    fs_1.default.rmSync(this.installationDir(browser, platform, buildId), {\n      force: true,\n      recursive: true,\n      maxRetries: 10,\n      retryDelay: 500\n    });\n  }\n  getInstalledBrowsers() {\n    if (!fs_1.default.existsSync(_classPrivateFieldGet(_rootDir, this))) {\n      return [];\n    }\n    const types = fs_1.default.readdirSync(_classPrivateFieldGet(_rootDir, this));\n    const browsers = types.filter(t => {\n      return Object.values(browser_data_js_1.Browser).includes(t);\n    });\n    return browsers.flatMap(browser => {\n      const files = fs_1.default.readdirSync(this.browserRoot(browser));\n      return files.map(file => {\n        const result = parseFolderPath(path_1.default.join(this.browserRoot(browser), file));\n        if (!result) {\n          return null;\n        }\n        return new InstalledBrowser(this, browser, result.buildId, result.platform);\n      }).filter(item => {\n        return item !== null;\n      });\n    });\n  }\n  computeExecutablePath(options) {\n    options.platform ??= (0, detectPlatform_js_1.detectBrowserPlatform)();\n    if (!options.platform) {\n      throw new Error(`Cannot download a binary for the provided platform: ${os_1.default.platform()} (${os_1.default.arch()})`);\n    }\n    try {\n      options.buildId = this.resolveAlias(options.browser, options.buildId) ?? options.buildId;\n    } catch {\n      debugCache('could not read .metadata file for the browser');\n    }\n    const installationDir = this.installationDir(options.browser, options.platform, options.buildId);\n    return path_1.default.join(installationDir, browser_data_js_1.executablePathByBrowser[options.browser](options.platform, options.buildId));\n  }\n}\nexports.Cache = Cache;\nfunction parseFolderPath(folderPath) {\n  const name = path_1.default.basename(folderPath);\n  const splits = name.split('-');\n  if (splits.length !== 2) {\n    return;\n  }\n  const [platform, buildId] = splits;\n  if (!buildId || !platform) {\n    return;\n  }\n  return {\n    platform,\n    buildId\n  };\n}","map":{"version":3,"names":["_classPrivateFieldInitSpec","require","default","_defineProperty","_classPrivateFieldGet","_classPrivateFieldSet","fs_1","__importDefault","os_1","path_1","debug_1","browser_data_js_1","detectPlatform_js_1","debugCache","_cache","WeakMap","InstalledBrowser","constructor","cache","browser","buildId","platform","executablePath","computeExecutablePath","path","installationDir","readMetadata","writeMetadata","metadata","exports","_rootDir","Cache","rootDir","browserRoot","join","metadataFile","metatadaPath","existsSync","aliases","data","JSON","parse","readFileSync","Error","mkdirSync","dirname","recursive","writeFileSync","stringify","resolveAlias","alias","Object","values","sort","getVersionComparator","at","clear","rmSync","force","maxRetries","retryDelay","uninstall","keys","getInstalledBrowsers","types","readdirSync","browsers","filter","t","Browser","includes","flatMap","files","map","file","result","parseFolderPath","item","options","detectBrowserPlatform","arch","executablePathByBrowser","folderPath","name","basename","splits","split","length"],"sources":["../../src/Cache.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}