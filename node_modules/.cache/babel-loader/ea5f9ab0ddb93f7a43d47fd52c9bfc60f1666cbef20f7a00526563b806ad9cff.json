{"ast":null,"code":"/* 本文件提供计算TIR的方法\n */\n\n/**\n * 用于表示TIR分布的结果\n *\n * @class TIRResult\n */\nclass TIRResult {\n  constructor(veryHighRate, highRate, normalRate, lowRate, veryLowRate) {\n    this.veryHighRate = veryHighRate;\n    this.highRate = highRate;\n    this.normalRate = normalRate;\n    this.lowRate = lowRate;\n    this.veryLowRate = veryLowRate;\n  }\n}\n\n/**\n * 用于计算TIR分布\n *\n * @class TIRUtils\n */\nclass TIRUtils {\n  static getTIRResult(dataArray, normalHigh = 180, normalLow = 70) {\n    // 检查dataArray是否是数组且不为空\n    if (!Array.isArray(dataArray) || dataArray.length === 0) {\n      return null;\n    }\n\n    // 检查dataArray的所有元素是否都是数值\n    if (!dataArray.every(element => typeof element === 'number')) {\n      return null;\n    }\n\n    // 过滤出数组中属于40到400之间的数值\n    let filteredArray = dataArray.filter(val => val >= 40 && val <= 400);\n    if (filteredArray.length === 0) {\n      return null;\n    }\n    const arrayLength = filteredArray.length;\n    const x1 = 250;\n    const x2 = normalHigh;\n    const x3 = normalLow;\n    const x4 = 54;\n\n    // 初始化计数器\n    let veryHighCount = 0.0;\n    let highCount = 0.0;\n    let normalCount = 0.0;\n    let lowCount = 0.0;\n    let veryLowCount = 0.0;\n\n    // 遍历数组，统计各区间的数量\n    filteredArray.forEach(value => {\n      if (value > x1) {\n        veryHighCount++;\n      } else if (value > x2 && value <= x1) {\n        highCount++;\n      } else if (value >= x3 && value <= x2) {\n        normalCount++;\n      } else if (value >= x4 && value < x3) {\n        lowCount++;\n      } else if (value < x4) {\n        veryLowCount++;\n      }\n    });\n    return new TIRResult(veryHighCount / arrayLength, highCount / arrayLength, normalCount / arrayLength, lowCount / arrayLength, veryLowCount / arrayLength);\n  }\n}\nexport { TIRResult, TIRUtils };","map":{"version":3,"names":["TIRResult","constructor","veryHighRate","highRate","normalRate","lowRate","veryLowRate","TIRUtils","getTIRResult","dataArray","normalHigh","normalLow","Array","isArray","length","every","element","filteredArray","filter","val","arrayLength","x1","x2","x3","x4","veryHighCount","highCount","normalCount","lowCount","veryLowCount","forEach","value"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/algorithm/TIR.js"],"sourcesContent":["/* 本文件提供计算TIR的方法\n */\n\n/**\n * 用于表示TIR分布的结果\n *\n * @class TIRResult\n */\nclass TIRResult {\n  constructor(veryHighRate, highRate, normalRate, lowRate, veryLowRate) {\n    this.veryHighRate = veryHighRate;\n    this.highRate = highRate;\n    this.normalRate = normalRate;\n    this.lowRate = lowRate;\n    this.veryLowRate = veryLowRate;\n  }\n}\n\n/**\n * 用于计算TIR分布\n *\n * @class TIRUtils\n */\nclass TIRUtils {\n  static getTIRResult(dataArray, normalHigh = 180, normalLow = 70) {\n    // 检查dataArray是否是数组且不为空\n    if (!Array.isArray(dataArray) || dataArray.length === 0) {\n      return null;\n    }\n\n    // 检查dataArray的所有元素是否都是数值\n    if (!dataArray.every(element => typeof element === 'number')) {\n      return null;\n    }\n\n    // 过滤出数组中属于40到400之间的数值\n    let filteredArray = dataArray.filter(val => val >= 40 && val <= 400);\n    if (filteredArray.length === 0) {\n      return null;\n    }\n\n    const arrayLength = filteredArray.length;\n\n    const x1 = 250;\n    const x2 = normalHigh;\n    const x3 = normalLow;\n    const x4 = 54;\n\n    // 初始化计数器\n    let veryHighCount = 0.0;\n    let highCount = 0.0;\n    let normalCount = 0.0;\n    let lowCount = 0.0;\n    let veryLowCount = 0.0;\n\n    // 遍历数组，统计各区间的数量\n    filteredArray.forEach(value => {\n      if (value > x1) {\n        veryHighCount++;\n      } else if (value > x2 && value <= x1) {\n        highCount++;\n      } else if (value >= x3 && value <= x2) {\n        normalCount++;\n      } else if (value >= x4 && value < x3) {\n        lowCount++;\n      } else if (value < x4) {\n        veryLowCount++;\n      }\n    });\n\n    return new TIRResult(\n      veryHighCount / arrayLength,\n      highCount / arrayLength,\n      normalCount / arrayLength,\n      lowCount / arrayLength,\n      veryLowCount / arrayLength,\n    );\n  }\n}\n\nexport {TIRResult, TIRUtils};\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,CAAC;EACdC,WAAWA,CAACC,YAAY,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAEC,WAAW,EAAE;IACpE,IAAI,CAACJ,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,WAAW,GAAGA,WAAW;EAChC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,CAAC;EACb,OAAOC,YAAYA,CAACC,SAAS,EAAEC,UAAU,GAAG,GAAG,EAAEC,SAAS,GAAG,EAAE,EAAE;IAC/D;IACA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,SAAS,CAAC,IAAIA,SAAS,CAACK,MAAM,KAAK,CAAC,EAAE;MACvD,OAAO,IAAI;IACb;;IAEA;IACA,IAAI,CAACL,SAAS,CAACM,KAAK,CAACC,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,CAAC,EAAE;MAC5D,OAAO,IAAI;IACb;;IAEA;IACA,IAAIC,aAAa,GAAGR,SAAS,CAACS,MAAM,CAACC,GAAG,IAAIA,GAAG,IAAI,EAAE,IAAIA,GAAG,IAAI,GAAG,CAAC;IACpE,IAAIF,aAAa,CAACH,MAAM,KAAK,CAAC,EAAE;MAC9B,OAAO,IAAI;IACb;IAEA,MAAMM,WAAW,GAAGH,aAAa,CAACH,MAAM;IAExC,MAAMO,EAAE,GAAG,GAAG;IACd,MAAMC,EAAE,GAAGZ,UAAU;IACrB,MAAMa,EAAE,GAAGZ,SAAS;IACpB,MAAMa,EAAE,GAAG,EAAE;;IAEb;IACA,IAAIC,aAAa,GAAG,GAAG;IACvB,IAAIC,SAAS,GAAG,GAAG;IACnB,IAAIC,WAAW,GAAG,GAAG;IACrB,IAAIC,QAAQ,GAAG,GAAG;IAClB,IAAIC,YAAY,GAAG,GAAG;;IAEtB;IACAZ,aAAa,CAACa,OAAO,CAACC,KAAK,IAAI;MAC7B,IAAIA,KAAK,GAAGV,EAAE,EAAE;QACdI,aAAa,EAAE;MACjB,CAAC,MAAM,IAAIM,KAAK,GAAGT,EAAE,IAAIS,KAAK,IAAIV,EAAE,EAAE;QACpCK,SAAS,EAAE;MACb,CAAC,MAAM,IAAIK,KAAK,IAAIR,EAAE,IAAIQ,KAAK,IAAIT,EAAE,EAAE;QACrCK,WAAW,EAAE;MACf,CAAC,MAAM,IAAII,KAAK,IAAIP,EAAE,IAAIO,KAAK,GAAGR,EAAE,EAAE;QACpCK,QAAQ,EAAE;MACZ,CAAC,MAAM,IAAIG,KAAK,GAAGP,EAAE,EAAE;QACrBK,YAAY,EAAE;MAChB;IACF,CAAC,CAAC;IAEF,OAAO,IAAI7B,SAAS,CAClByB,aAAa,GAAGL,WAAW,EAC3BM,SAAS,GAAGN,WAAW,EACvBO,WAAW,GAAGP,WAAW,EACzBQ,QAAQ,GAAGR,WAAW,EACtBS,YAAY,GAAGT,WACjB,CAAC;EACH;AACF;AAEA,SAAQpB,SAAS,EAAEO,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}