{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileInfo = exports.FileType = void 0;\nvar FileType;\n(function (FileType) {\n  FileType[FileType[\"Unknown\"] = 0] = \"Unknown\";\n  FileType[FileType[\"File\"] = 1] = \"File\";\n  FileType[FileType[\"Directory\"] = 2] = \"Directory\";\n  FileType[FileType[\"SymbolicLink\"] = 3] = \"SymbolicLink\";\n})(FileType || (exports.FileType = FileType = {}));\n/**\n * Describes a file, directory or symbolic link.\n */\nclass FileInfo {\n  constructor(name) {\n    this.name = name;\n    this.type = FileType.Unknown;\n    this.size = 0;\n    /**\n     * Unparsed, raw modification date as a string.\n     *\n     * If `modifiedAt` is undefined, the FTP server you're connected to doesn't support the more modern\n     * MLSD command for machine-readable directory listings. The older command LIST is then used returning\n     * results that vary a lot between servers as the format hasn't been standardized. Here, directory listings\n     * and especially modification dates were meant to be human-readable first.\n     *\n     * Be careful when still trying to parse this by yourself. Parsing dates from listings using LIST is\n     * unreliable. This library decides to offer parsed dates only when they're absolutely reliable and safe to\n     * use e.g. for comparisons.\n     */\n    this.rawModifiedAt = \"\";\n    /**\n     * Parsed modification date.\n     *\n     * Available if the FTP server supports the MLSD command. Only MLSD guarantees dates than can be reliably\n     * parsed with the correct timezone and a resolution down to seconds. See `rawModifiedAt` property for the unparsed\n     * date that is always available.\n     */\n    this.modifiedAt = undefined;\n    /**\n     * Unix permissions if present. If the underlying FTP server is not running on Unix this will be undefined.\n     * If set, you might be able to edit permissions with the FTP command `SITE CHMOD`.\n     */\n    this.permissions = undefined;\n    /**\n     * Hard link count if available.\n     */\n    this.hardLinkCount = undefined;\n    /**\n     * Link name for symbolic links if available.\n     */\n    this.link = undefined;\n    /**\n     * Unix group if available.\n     */\n    this.group = undefined;\n    /**\n     * Unix user if available.\n     */\n    this.user = undefined;\n    /**\n     * Unique ID if available.\n     */\n    this.uniqueID = undefined;\n    this.name = name;\n  }\n  get isDirectory() {\n    return this.type === FileType.Directory;\n  }\n  get isSymbolicLink() {\n    return this.type === FileType.SymbolicLink;\n  }\n  get isFile() {\n    return this.type === FileType.File;\n  }\n  /**\n   * Deprecated, legacy API. Use `rawModifiedAt` instead.\n   * @deprecated\n   */\n  get date() {\n    return this.rawModifiedAt;\n  }\n  set date(rawModifiedAt) {\n    this.rawModifiedAt = rawModifiedAt;\n  }\n}\nexports.FileInfo = FileInfo;\nFileInfo.UnixPermission = {\n  Read: 4,\n  Write: 2,\n  Execute: 1\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","FileInfo","FileType","constructor","name","type","Unknown","size","rawModifiedAt","modifiedAt","undefined","permissions","hardLinkCount","link","group","user","uniqueID","isDirectory","Directory","isSymbolicLink","SymbolicLink","isFile","File","date","UnixPermission","Read","Write","Execute"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/basic-ftp/dist/FileInfo.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileInfo = exports.FileType = void 0;\nvar FileType;\n(function (FileType) {\n    FileType[FileType[\"Unknown\"] = 0] = \"Unknown\";\n    FileType[FileType[\"File\"] = 1] = \"File\";\n    FileType[FileType[\"Directory\"] = 2] = \"Directory\";\n    FileType[FileType[\"SymbolicLink\"] = 3] = \"SymbolicLink\";\n})(FileType || (exports.FileType = FileType = {}));\n/**\n * Describes a file, directory or symbolic link.\n */\nclass FileInfo {\n    constructor(name) {\n        this.name = name;\n        this.type = FileType.Unknown;\n        this.size = 0;\n        /**\n         * Unparsed, raw modification date as a string.\n         *\n         * If `modifiedAt` is undefined, the FTP server you're connected to doesn't support the more modern\n         * MLSD command for machine-readable directory listings. The older command LIST is then used returning\n         * results that vary a lot between servers as the format hasn't been standardized. Here, directory listings\n         * and especially modification dates were meant to be human-readable first.\n         *\n         * Be careful when still trying to parse this by yourself. Parsing dates from listings using LIST is\n         * unreliable. This library decides to offer parsed dates only when they're absolutely reliable and safe to\n         * use e.g. for comparisons.\n         */\n        this.rawModifiedAt = \"\";\n        /**\n         * Parsed modification date.\n         *\n         * Available if the FTP server supports the MLSD command. Only MLSD guarantees dates than can be reliably\n         * parsed with the correct timezone and a resolution down to seconds. See `rawModifiedAt` property for the unparsed\n         * date that is always available.\n         */\n        this.modifiedAt = undefined;\n        /**\n         * Unix permissions if present. If the underlying FTP server is not running on Unix this will be undefined.\n         * If set, you might be able to edit permissions with the FTP command `SITE CHMOD`.\n         */\n        this.permissions = undefined;\n        /**\n         * Hard link count if available.\n         */\n        this.hardLinkCount = undefined;\n        /**\n         * Link name for symbolic links if available.\n         */\n        this.link = undefined;\n        /**\n         * Unix group if available.\n         */\n        this.group = undefined;\n        /**\n         * Unix user if available.\n         */\n        this.user = undefined;\n        /**\n         * Unique ID if available.\n         */\n        this.uniqueID = undefined;\n        this.name = name;\n    }\n    get isDirectory() {\n        return this.type === FileType.Directory;\n    }\n    get isSymbolicLink() {\n        return this.type === FileType.SymbolicLink;\n    }\n    get isFile() {\n        return this.type === FileType.File;\n    }\n    /**\n     * Deprecated, legacy API. Use `rawModifiedAt` instead.\n     * @deprecated\n     */\n    get date() {\n        return this.rawModifiedAt;\n    }\n    set date(rawModifiedAt) {\n        this.rawModifiedAt = rawModifiedAt;\n    }\n}\nexports.FileInfo = FileInfo;\nFileInfo.UnixPermission = {\n    Read: 4,\n    Write: 2,\n    Execute: 1\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAGF,OAAO,CAACG,QAAQ,GAAG,KAAK,CAAC;AAC5C,IAAIA,QAAQ;AACZ,CAAC,UAAUA,QAAQ,EAAE;EACjBA,QAAQ,CAACA,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS;EAC7CA,QAAQ,CAACA,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACvCA,QAAQ,CAACA,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EACjDA,QAAQ,CAACA,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc;AAC3D,CAAC,EAAEA,QAAQ,KAAKH,OAAO,CAACG,QAAQ,GAAGA,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;AAClD;AACA;AACA;AACA,MAAMD,QAAQ,CAAC;EACXE,WAAWA,CAACC,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGH,QAAQ,CAACI,OAAO;IAC5B,IAAI,CAACC,IAAI,GAAG,CAAC;IACb;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAGC,SAAS;IAC3B;AACR;AACA;AACA;IACQ,IAAI,CAACC,WAAW,GAAGD,SAAS;IAC5B;AACR;AACA;IACQ,IAAI,CAACE,aAAa,GAAGF,SAAS;IAC9B;AACR;AACA;IACQ,IAAI,CAACG,IAAI,GAAGH,SAAS;IACrB;AACR;AACA;IACQ,IAAI,CAACI,KAAK,GAAGJ,SAAS;IACtB;AACR;AACA;IACQ,IAAI,CAACK,IAAI,GAAGL,SAAS;IACrB;AACR;AACA;IACQ,IAAI,CAACM,QAAQ,GAAGN,SAAS;IACzB,IAAI,CAACN,IAAI,GAAGA,IAAI;EACpB;EACA,IAAIa,WAAWA,CAAA,EAAG;IACd,OAAO,IAAI,CAACZ,IAAI,KAAKH,QAAQ,CAACgB,SAAS;EAC3C;EACA,IAAIC,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACd,IAAI,KAAKH,QAAQ,CAACkB,YAAY;EAC9C;EACA,IAAIC,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAAChB,IAAI,KAAKH,QAAQ,CAACoB,IAAI;EACtC;EACA;AACJ;AACA;AACA;EACI,IAAIC,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACf,aAAa;EAC7B;EACA,IAAIe,IAAIA,CAACf,aAAa,EAAE;IACpB,IAAI,CAACA,aAAa,GAAGA,aAAa;EACtC;AACJ;AACAT,OAAO,CAACE,QAAQ,GAAGA,QAAQ;AAC3BA,QAAQ,CAACuB,cAAc,GAAG;EACtBC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAE,CAAC;EACRC,OAAO,EAAE;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}