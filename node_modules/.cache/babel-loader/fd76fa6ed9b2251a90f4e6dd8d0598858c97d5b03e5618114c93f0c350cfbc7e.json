{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar _defineProperty = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldSet2.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nlet _exports$disposeSymbo, _exports$asyncDispose;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsyncDisposableStack = exports.DisposableStack = exports.asyncDisposeSymbol = exports.disposeSymbol = void 0;\nSymbol.dispose ??= Symbol('dispose');\nSymbol.asyncDispose ??= Symbol('asyncDispose');\n/**\n * @internal\n */\nexports.disposeSymbol = Symbol.dispose;\n/**\n * @internal\n */\nexports.asyncDisposeSymbol = Symbol.asyncDispose;\n/**\n * @internal\n */\nvar _disposed = /*#__PURE__*/new WeakMap();\nvar _stack = /*#__PURE__*/new WeakMap();\n_exports$disposeSymbo = exports.disposeSymbol;\nclass DisposableStack {\n  constructor() {\n    _classPrivateFieldInitSpec(this, _disposed, false);\n    _classPrivateFieldInitSpec(this, _stack, []);\n    _defineProperty(this, _exports$disposeSymbo, this.dispose);\n    _defineProperty(this, Symbol.toStringTag, 'DisposableStack');\n  }\n  /**\n   * Returns a value indicating whether this stack has been disposed.\n   */\n  get disposed() {\n    return _classPrivateFieldGet(_disposed, this);\n  }\n  /**\n   * Disposes each resource in the stack in the reverse order that they were added.\n   */\n  dispose() {\n    if (_classPrivateFieldGet(_disposed, this)) {\n      return;\n    }\n    _classPrivateFieldSet(_disposed, this, true);\n    for (const resource of _classPrivateFieldGet(_stack, this).reverse()) {\n      resource[exports.disposeSymbol]();\n    }\n  }\n  /**\n   * Adds a disposable resource to the stack, returning the resource.\n   *\n   * @param value - The resource to add. `null` and `undefined` will not be added,\n   * but will be returned.\n   * @returns The provided `value`.\n   */\n  use(value) {\n    if (value) {\n      _classPrivateFieldGet(_stack, this).push(value);\n    }\n    return value;\n  }\n  /**\n   * Adds a value and associated disposal callback as a resource to the stack.\n   *\n   * @param value - The value to add.\n   * @param onDispose - The callback to use in place of a `[disposeSymbol]()`\n   * method. Will be invoked with `value` as the first parameter.\n   * @returns The provided `value`.\n   */\n  adopt(value, onDispose) {\n    _classPrivateFieldGet(_stack, this).push({\n      [exports.disposeSymbol]() {\n        onDispose(value);\n      }\n    });\n    return value;\n  }\n  /**\n   * Adds a callback to be invoked when the stack is disposed.\n   */\n  defer(onDispose) {\n    _classPrivateFieldGet(_stack, this).push({\n      [exports.disposeSymbol]() {\n        onDispose();\n      }\n    });\n  }\n  /**\n   * Move all resources out of this stack and into a new `DisposableStack`, and\n   * marks this stack as disposed.\n   *\n   * @example\n   *\n   * ```ts\n   * class C {\n   *   #res1: Disposable;\n   *   #res2: Disposable;\n   *   #disposables: DisposableStack;\n   *   constructor() {\n   *     // stack will be disposed when exiting constructor for any reason\n   *     using stack = new DisposableStack();\n   *\n   *     // get first resource\n   *     this.#res1 = stack.use(getResource1());\n   *\n   *     // get second resource. If this fails, both `stack` and `#res1` will be disposed.\n   *     this.#res2 = stack.use(getResource2());\n   *\n   *     // all operations succeeded, move resources out of `stack` so that\n   *     // they aren't disposed when constructor exits\n   *     this.#disposables = stack.move();\n   *   }\n   *\n   *   [disposeSymbol]() {\n   *     this.#disposables.dispose();\n   *   }\n   * }\n   * ```\n   */\n  move() {\n    if (_classPrivateFieldGet(_disposed, this)) {\n      throw new ReferenceError('a disposed stack can not use anything new'); // step 3\n    }\n    const stack = new DisposableStack(); // step 4-5\n    _classPrivateFieldSet(_stack, stack, _classPrivateFieldGet(_stack, this));\n    _classPrivateFieldSet(_disposed, this, true);\n    return stack;\n  }\n}\nexports.DisposableStack = DisposableStack;\n/**\n * @internal\n */\nvar _disposed2 = /*#__PURE__*/new WeakMap();\nvar _stack2 = /*#__PURE__*/new WeakMap();\n_exports$asyncDispose = exports.asyncDisposeSymbol;\nclass AsyncDisposableStack {\n  constructor() {\n    _classPrivateFieldInitSpec(this, _disposed2, false);\n    _classPrivateFieldInitSpec(this, _stack2, []);\n    _defineProperty(this, _exports$asyncDispose, this.dispose);\n    _defineProperty(this, Symbol.toStringTag, 'AsyncDisposableStack');\n  }\n  /**\n   * Returns a value indicating whether this stack has been disposed.\n   */\n  get disposed() {\n    return _classPrivateFieldGet(_disposed2, this);\n  }\n  /**\n   * Disposes each resource in the stack in the reverse order that they were added.\n   */\n  async dispose() {\n    if (_classPrivateFieldGet(_disposed2, this)) {\n      return;\n    }\n    _classPrivateFieldSet(_disposed2, this, true);\n    for (const resource of _classPrivateFieldGet(_stack2, this).reverse()) {\n      await resource[exports.asyncDisposeSymbol]();\n    }\n  }\n  /**\n   * Adds a disposable resource to the stack, returning the resource.\n   *\n   * @param value - The resource to add. `null` and `undefined` will not be added,\n   * but will be returned.\n   * @returns The provided `value`.\n   */\n  use(value) {\n    if (value) {\n      _classPrivateFieldGet(_stack2, this).push(value);\n    }\n    return value;\n  }\n  /**\n   * Adds a value and associated disposal callback as a resource to the stack.\n   *\n   * @param value - The value to add.\n   * @param onDispose - The callback to use in place of a `[disposeSymbol]()`\n   * method. Will be invoked with `value` as the first parameter.\n   * @returns The provided `value`.\n   */\n  adopt(value, onDispose) {\n    _classPrivateFieldGet(_stack2, this).push({\n      [exports.asyncDisposeSymbol]() {\n        return onDispose(value);\n      }\n    });\n    return value;\n  }\n  /**\n   * Adds a callback to be invoked when the stack is disposed.\n   */\n  defer(onDispose) {\n    _classPrivateFieldGet(_stack2, this).push({\n      [exports.asyncDisposeSymbol]() {\n        return onDispose();\n      }\n    });\n  }\n  /**\n   * Move all resources out of this stack and into a new `DisposableStack`, and\n   * marks this stack as disposed.\n   *\n   * @example\n   *\n   * ```ts\n   * class C {\n   *   #res1: Disposable;\n   *   #res2: Disposable;\n   *   #disposables: DisposableStack;\n   *   constructor() {\n   *     // stack will be disposed when exiting constructor for any reason\n   *     using stack = new DisposableStack();\n   *\n   *     // get first resource\n   *     this.#res1 = stack.use(getResource1());\n   *\n   *     // get second resource. If this fails, both `stack` and `#res1` will be disposed.\n   *     this.#res2 = stack.use(getResource2());\n   *\n   *     // all operations succeeded, move resources out of `stack` so that\n   *     // they aren't disposed when constructor exits\n   *     this.#disposables = stack.move();\n   *   }\n   *\n   *   [disposeSymbol]() {\n   *     this.#disposables.dispose();\n   *   }\n   * }\n   * ```\n   */\n  move() {\n    if (_classPrivateFieldGet(_disposed2, this)) {\n      throw new ReferenceError('a disposed stack can not use anything new'); // step 3\n    }\n    const stack = new AsyncDisposableStack(); // step 4-5\n    _classPrivateFieldSet(_stack2, stack, _classPrivateFieldGet(_stack2, this));\n    _classPrivateFieldSet(_disposed2, this, true);\n    return stack;\n  }\n}\nexports.AsyncDisposableStack = AsyncDisposableStack;","map":{"version":3,"names":["_defineProperty","require","default","_classPrivateFieldInitSpec","_classPrivateFieldSet","_classPrivateFieldGet","_exports$disposeSymbo","_exports$asyncDispose","Symbol","dispose","asyncDispose","exports","disposeSymbol","asyncDisposeSymbol","_disposed","WeakMap","_stack","DisposableStack","constructor","toStringTag","disposed","resource","reverse","use","value","push","adopt","onDispose","defer","move","ReferenceError","stack","_disposed2","_stack2","AsyncDisposableStack"],"sources":["../../../../src/util/disposable.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}