{"ast":null,"code":"/* 本文件提供计算TIR的方法\n */\n\n/**\n * 用于表示TIR分布的结果\n *\n * @class TIRResult\n */\nclass TIRResult {\n  constructor(veryHighCount, highCount, normalCount, lowCount, veryLowCount, arrayLength) {\n    this.veryHighRate = veryHighCount / arrayLength;\n    this.highRate = highCount / arrayLength;\n    this.normalRate = normalCount / arrayLength;\n    this.lowRate = lowCount / arrayLength;\n    this.veryLowRate = veryLowCount / arrayLength;\n    this.veryHighDuration = veryHighCount;\n    this.highDuration = highCount;\n    this.normalDuration = normalCount;\n    this.lowDuration = lowCount;\n    this.veryLowDuration = veryLowCount;\n  }\n}\n\n/**\n * 用于计算TIR分布\n *\n * @class TIRUtils\n */\nclass TIRUtils {\n  static getTIRResult(dataArray, normalHigh = 180, normalLow = 70) {\n    console.log(normalHigh, normalLow);\n    // 检查dataArray是否是数组且不为空\n    if (!Array.isArray(dataArray) || dataArray.length === 0) {\n      return null;\n    }\n\n    // 检查dataArray的所有元素是否都是数值\n    if (!dataArray.every(element => typeof element === 'number')) {\n      return null;\n    }\n\n    // 过滤出数组中属于40到400之间的数值\n    let filteredArray = dataArray.filter(val => val >= 40 && val <= 400);\n    if (filteredArray.length === 0) {\n      return null;\n    }\n    const arrayLength = filteredArray.length;\n    const x1 = 250;\n    const x2 = normalHigh;\n    const x3 = normalLow;\n    const x4 = 54;\n\n    // 初始化计数器\n    let veryHighCount = 0.0;\n    let highCount = 0.0;\n    let normalCount = 0.0;\n    let lowCount = 0.0;\n    let veryLowCount = 0.0;\n\n    // 遍历数组，统计各区间的数量\n    filteredArray.forEach(value => {\n      if (value > x1) {\n        veryHighCount++;\n      } else if (value > x2 && value <= x1) {\n        highCount++;\n      } else if (value >= x3 && value <= x2) {\n        normalCount++;\n      } else if (value >= x4 && value < x3) {\n        lowCount++;\n      } else if (value < x4) {\n        veryLowCount++;\n      }\n    });\n    return new TIRResult(veryHighCount, highCount, normalCount, lowCount, veryLowCount, arrayLength);\n  }\n}\nexport { TIRResult, TIRUtils };","map":{"version":3,"names":["TIRResult","constructor","veryHighCount","highCount","normalCount","lowCount","veryLowCount","arrayLength","veryHighRate","highRate","normalRate","lowRate","veryLowRate","veryHighDuration","highDuration","normalDuration","lowDuration","veryLowDuration","TIRUtils","getTIRResult","dataArray","normalHigh","normalLow","console","log","Array","isArray","length","every","element","filteredArray","filter","val","x1","x2","x3","x4","forEach","value"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/algorithm/TIR.js"],"sourcesContent":["/* 本文件提供计算TIR的方法\n */\n\n/**\n * 用于表示TIR分布的结果\n *\n * @class TIRResult\n */\nclass TIRResult {\n  constructor(veryHighCount, highCount, normalCount, lowCount, veryLowCount,arrayLength) {\n    this.veryHighRate = veryHighCount / arrayLength;\n    this.highRate = highCount / arrayLength;\n    this.normalRate = normalCount / arrayLength;\n    this.lowRate = lowCount / arrayLength;\n    this.veryLowRate = veryLowCount / arrayLength;\n    this.veryHighDuration = veryHighCount\n    this.highDuration = highCount\n    this.normalDuration = normalCount\n    this.lowDuration = lowCount\n    this.veryLowDuration = veryLowCount\n  }\n}\n\n/**\n * 用于计算TIR分布\n *\n * @class TIRUtils\n */\nclass TIRUtils {\n  static getTIRResult(dataArray, normalHigh = 180, normalLow = 70) {\n    console.log(normalHigh,normalLow)\n    // 检查dataArray是否是数组且不为空\n    if (!Array.isArray(dataArray) || dataArray.length === 0) {\n      return null;\n    }\n\n    // 检查dataArray的所有元素是否都是数值\n    if (!dataArray.every(element => typeof element === 'number')) {\n      return null;\n    }\n\n    // 过滤出数组中属于40到400之间的数值\n    let filteredArray = dataArray.filter(val => val >= 40 && val <= 400);\n    if (filteredArray.length === 0) {\n      return null;\n    }\n\n    const arrayLength = filteredArray.length;\n\n    const x1 = 250;\n    const x2 = normalHigh;\n    const x3 = normalLow;\n    const x4 = 54;\n\n    // 初始化计数器\n    let veryHighCount = 0.0;\n    let highCount = 0.0;\n    let normalCount = 0.0;\n    let lowCount = 0.0;\n    let veryLowCount = 0.0;\n\n    // 遍历数组，统计各区间的数量\n    filteredArray.forEach(value => {\n      if (value > x1) {\n        veryHighCount++;\n      } else if (value > x2 && value <= x1) {\n        highCount++;\n      } else if (value >= x3 && value <= x2) {\n        normalCount++;\n      } else if (value >= x4 && value < x3) {\n        lowCount++;\n      } else if (value < x4) {\n        veryLowCount++;\n      }\n    });\n\n    return new TIRResult(\n      veryHighCount,\n      highCount,\n      normalCount,\n      lowCount,\n      veryLowCount,\n      arrayLength\n    );\n  }\n}\n\nexport {TIRResult, TIRUtils};\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,CAAC;EACdC,WAAWA,CAACC,aAAa,EAAEC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,YAAY,EAACC,WAAW,EAAE;IACrF,IAAI,CAACC,YAAY,GAAGN,aAAa,GAAGK,WAAW;IAC/C,IAAI,CAACE,QAAQ,GAAGN,SAAS,GAAGI,WAAW;IACvC,IAAI,CAACG,UAAU,GAAGN,WAAW,GAAGG,WAAW;IAC3C,IAAI,CAACI,OAAO,GAAGN,QAAQ,GAAGE,WAAW;IACrC,IAAI,CAACK,WAAW,GAAGN,YAAY,GAAGC,WAAW;IAC7C,IAAI,CAACM,gBAAgB,GAAGX,aAAa;IACrC,IAAI,CAACY,YAAY,GAAGX,SAAS;IAC7B,IAAI,CAACY,cAAc,GAAGX,WAAW;IACjC,IAAI,CAACY,WAAW,GAAGX,QAAQ;IAC3B,IAAI,CAACY,eAAe,GAAGX,YAAY;EACrC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMY,QAAQ,CAAC;EACb,OAAOC,YAAYA,CAACC,SAAS,EAAEC,UAAU,GAAG,GAAG,EAAEC,SAAS,GAAG,EAAE,EAAE;IAC/DC,OAAO,CAACC,GAAG,CAACH,UAAU,EAACC,SAAS,CAAC;IACjC;IACA,IAAI,CAACG,KAAK,CAACC,OAAO,CAACN,SAAS,CAAC,IAAIA,SAAS,CAACO,MAAM,KAAK,CAAC,EAAE;MACvD,OAAO,IAAI;IACb;;IAEA;IACA,IAAI,CAACP,SAAS,CAACQ,KAAK,CAACC,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,CAAC,EAAE;MAC5D,OAAO,IAAI;IACb;;IAEA;IACA,IAAIC,aAAa,GAAGV,SAAS,CAACW,MAAM,CAACC,GAAG,IAAIA,GAAG,IAAI,EAAE,IAAIA,GAAG,IAAI,GAAG,CAAC;IACpE,IAAIF,aAAa,CAACH,MAAM,KAAK,CAAC,EAAE;MAC9B,OAAO,IAAI;IACb;IAEA,MAAMpB,WAAW,GAAGuB,aAAa,CAACH,MAAM;IAExC,MAAMM,EAAE,GAAG,GAAG;IACd,MAAMC,EAAE,GAAGb,UAAU;IACrB,MAAMc,EAAE,GAAGb,SAAS;IACpB,MAAMc,EAAE,GAAG,EAAE;;IAEb;IACA,IAAIlC,aAAa,GAAG,GAAG;IACvB,IAAIC,SAAS,GAAG,GAAG;IACnB,IAAIC,WAAW,GAAG,GAAG;IACrB,IAAIC,QAAQ,GAAG,GAAG;IAClB,IAAIC,YAAY,GAAG,GAAG;;IAEtB;IACAwB,aAAa,CAACO,OAAO,CAACC,KAAK,IAAI;MAC7B,IAAIA,KAAK,GAAGL,EAAE,EAAE;QACd/B,aAAa,EAAE;MACjB,CAAC,MAAM,IAAIoC,KAAK,GAAGJ,EAAE,IAAII,KAAK,IAAIL,EAAE,EAAE;QACpC9B,SAAS,EAAE;MACb,CAAC,MAAM,IAAImC,KAAK,IAAIH,EAAE,IAAIG,KAAK,IAAIJ,EAAE,EAAE;QACrC9B,WAAW,EAAE;MACf,CAAC,MAAM,IAAIkC,KAAK,IAAIF,EAAE,IAAIE,KAAK,GAAGH,EAAE,EAAE;QACpC9B,QAAQ,EAAE;MACZ,CAAC,MAAM,IAAIiC,KAAK,GAAGF,EAAE,EAAE;QACrB9B,YAAY,EAAE;MAChB;IACF,CAAC,CAAC;IAEF,OAAO,IAAIN,SAAS,CAClBE,aAAa,EACbC,SAAS,EACTC,WAAW,EACXC,QAAQ,EACRC,YAAY,EACZC,WACF,CAAC;EACH;AACF;AAEA,SAAQP,SAAS,EAAEkB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}