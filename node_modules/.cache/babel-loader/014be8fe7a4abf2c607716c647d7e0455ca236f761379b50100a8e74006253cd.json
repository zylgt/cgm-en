{"ast":null,"code":"import { openProcedure } from \"@/utils/monitoringApp\";\nimport { eventBus } from '@/utils/eventBus';\nimport { hasEventListener } from \"@/utils/utils\";\nimport Abnormal from \"./abnormal\";\nimport Socket from '@/utils/webSocket';\nimport { mapGetters } from \"vuex\";\nexport default {\n  data() {\n    return {};\n  },\n  computed: {\n    ...mapGetters(['procedureState', 'upStep', 'deviceList', 'readerConnect'])\n  },\n  components: {\n    Abnormal\n  },\n  created() {\n    // eventBus.$on('socketStatusChange',(val) => {\n    //     if(val==3){ //连接失败\n    //         self.$store.dispatch('setProcedureState',2)\n    //     }\n    // })\n  },\n  mounted() {\n    // let self = this\n    // if(!hasEventListener(eventBus, 'socketMessage')){\n    //     eventBus.$on('socketMessage',(res) => {\n    //         console.log(res)\n    //         switch(res.path){\n    //             case 'getAppInfo':\n    //                 //  判断是否有更新，没有更新进行下一步\n    //                 Socket.getReaderList()\n    //                 break;\n    //             case 'getReaderDevices': //获取redaer列表，如果只有一台直接连接，否则选取连接\n    //                 self.step = 3\n    //                 self.readerList = res.data.devices\n    //                 if(res.data.devices.length==1){\n    //                     self.readerConnect = true\n    //                     Socket.connectReader(res.data.devices[0])\n    //                 }\n    //                 break;\n    //             case 'connectReaderDevice': //连接reader\n    //                 console.log('连接成功')\n    //                 Socket.getReaderInfo()\n    //                 break;\n    //             case 'getReaderDeviceInfo': //连接reader\n    //                 console.log('获取reader信息成功')\n    //                 // 判断reader时间与当前时间差值为1000，则同步时间\n    //                 let timestamp = Math.floor(Date.now() / 1000)\n    //                 if( Math.abs(timestamp-res.data.currentTime)>=1000){\n    //                     Socket.setTime({zone:+8,timestamp:timestamp})\n    //                 }\n    //                 break;\n    //         }\n    //     })\n    // }\n  },\n  methods: {\n    firing() {\n      let self = this;\n      let appUri = 'CGM3Uploaders://'; // 应用程序的地址(注册表应用名称)\n      // let appUri = 'Clashx://'; // 应用程序的地址(注册表应用名称)\n      let timeoutDuration = 1000;\n      let openAppFailure = () => {\n        //未检测到驱动，需要下载\n        self.$store.dispatch('setProcedureState', 1);\n      };\n      let openAppSuccess = () => {\n        // 已安装驱动\n        self.$store.dispatch('setProcedureState', 4);\n        self.$store.dispatch('setUpStep', 2);\n        setTimeout(function () {\n          //等待用户点击弹窗\n          self.$websocket.reset();\n          self.$websocket.initwebSocket();\n          self.$store.dispatch('setProcedureState', 0);\n        }, 3000);\n      };\n      openProcedure(appUri, openAppFailure, openAppSuccess, timeoutDuration);\n    },\n    // 下载\n    downLoad() {\n      console.log('下载驱动');\n      this.$store.dispatch('setProcedureState', 0);\n      this.$store.dispatch('setUpStep', 1);\n      // window.location.href='https://dldir1.qq.com/weixin/mac/WeChatMac.dmg'\n    }\n  },\n  watch: {\n    // procedureState:{\n    //     handel(nval, oval){\n    //         console.log(nval, oval)\n    //     },\n    //     deep: true // 深度监听\n    // }\n  }\n};","map":{"version":3,"names":["openProcedure","eventBus","hasEventListener","Abnormal","Socket","mapGetters","data","computed","components","created","mounted","methods","firing","self","appUri","timeoutDuration","openAppFailure","$store","dispatch","openAppSuccess","setTimeout","$websocket","reset","initwebSocket","downLoad","console","log","watch"],"sources":["src/views/Procedure/upLoad.vue"],"sourcesContent":["<template>\n    <div class='upLoad' >\n        <div class='run-procedure'  v-if='procedureState==0||procedureState==4'>\n            <div class='step-box step1' v-if='upStep==1'>\n                 <div class='title' >运行驱动程序</div>\n                <div class='procedure_img' >\n                    <div class='procedure_img_item' >1</div>\n                    <div class='procedure_img_item' >2</div>\n                    <div class='procedure_img_item' >3</div>\n                    <div class='procedure_img_item' >4</div>\n                </div>\n                <div class='btn-box' >\n                    <el-button type=\"primary\"  @click='downLoad'> 下载驱动</el-button>\n                    <el-button type=\"primary\"  @click='firing'>启动驱动</el-button>\n                </div>\n            </div>\n           <div class='step-box step2' v-if='upStep==2' >\n                <i class=\"el-icon-loading loading-icon \"></i>\n                <div class='unistall-text' >正在启动中......</div>\n           </div>\n           <div class='step-box' v-if='upStep==3'>\n                <div class='step-box step1' v-if='deviceList.length==0' >\n                    <div class='title' >连接读取器</div>\n                    <div class='procedure_img' >\n                        <div class='procedure_img_item' >1</div>\n                        <div class='procedure_img_item' >2</div>\n                    </div>\n                    <div class='btn-box flex-end' >\n                        <el-button type=\"primary\"  @click='downLoad'> 开始连接</el-button>\n                    </div>\n                </div>\n                <div class='step-box step1' v-if='deviceList.length>1' >\n                    <div class='title' >多台设备连接</div>\n                    <div class='procedure_img' >\n                        <div class='procedure_img_item' >1</div>\n                        <div class='procedure_img_item' >2</div>\n                    </div>\n                    <div class='btn-box flex-end' >\n                        <el-button type=\"primary\"  @click='downLoad'> 开始连接</el-button>\n                    </div>\n                </div>\n                <div class='step-box step2' v-if='readerConnect' >\n                    <i class=\"el-icon-loading loading-icon \"></i>\n                    <div class='unistall-text' >正在连接设备，请稍等......</div>\n                </div>\n            </div>\n        </div>\n        <Abnormal v-if='procedureState!=0' :type='procedureState' @downLoad='downLoad' @firing='firing' />\n    </div>\n</template>\n<script>\nimport { openProcedure } from \"@/utils/monitoringApp\";\nimport {eventBus} from '@/utils/eventBus'\nimport { hasEventListener } from \"@/utils/utils\";\nimport Abnormal from \"./abnormal\"\nimport Socket from '@/utils/webSocket'\nimport {mapGetters} from \"vuex\"\nexport default {\n    data(){\n        return{\n        }\n    },\n    computed:{\n        ...mapGetters([\n            'procedureState',\n            'upStep',\n            'deviceList',\n            'readerConnect'])\n    },\n    components:{\n        Abnormal\n    },\n    created(){\n        // eventBus.$on('socketStatusChange',(val) => {\n        //     if(val==3){ //连接失败\n        //         self.$store.dispatch('setProcedureState',2)\n        //     }\n        // })\n    }, \n    mounted(){\n        // let self = this\n        // if(!hasEventListener(eventBus, 'socketMessage')){\n        //     eventBus.$on('socketMessage',(res) => {\n        //         console.log(res)\n        //         switch(res.path){\n        //             case 'getAppInfo':\n        //                 //  判断是否有更新，没有更新进行下一步\n        //                 Socket.getReaderList()\n        //                 break;\n        //             case 'getReaderDevices': //获取redaer列表，如果只有一台直接连接，否则选取连接\n        //                 self.step = 3\n        //                 self.readerList = res.data.devices\n        //                 if(res.data.devices.length==1){\n        //                     self.readerConnect = true\n        //                     Socket.connectReader(res.data.devices[0])\n        //                 }\n        //                 break;\n        //             case 'connectReaderDevice': //连接reader\n        //                 console.log('连接成功')\n        //                 Socket.getReaderInfo()\n        //                 break;\n        //             case 'getReaderDeviceInfo': //连接reader\n        //                 console.log('获取reader信息成功')\n        //                 // 判断reader时间与当前时间差值为1000，则同步时间\n        //                 let timestamp = Math.floor(Date.now() / 1000)\n        //                 if( Math.abs(timestamp-res.data.currentTime)>=1000){\n        //                     Socket.setTime({zone:+8,timestamp:timestamp})\n        //                 }\n        //                 break;\n        //         }\n        //     })\n        // }\n        \n    },\n    methods:{\n        firing(){\n            let self = this\n            let appUri = 'CGM3Uploaders://'; // 应用程序的地址(注册表应用名称)\n            // let appUri = 'Clashx://'; // 应用程序的地址(注册表应用名称)\n            let timeoutDuration = 1000;\n            let openAppFailure = () => { //未检测到驱动，需要下载\n                self.$store.dispatch('setProcedureState',1)\n            };\n            let openAppSuccess = () => {\n                // 已安装驱动\n                self.$store.dispatch('setProcedureState',4)\n                self.$store.dispatch('setUpStep',2)\n                setTimeout(function(){ //等待用户点击弹窗\n                    self.$websocket.reset();\n                    self.$websocket.initwebSocket();\n                    self.$store.dispatch('setProcedureState',0)\n                },3000)\n\n            };\n            openProcedure(appUri, openAppFailure, openAppSuccess, timeoutDuration);\n        },\n        // 下载\n        downLoad(){\n            console.log('下载驱动')\n            this.$store.dispatch('setProcedureState',0)\n            this.$store.dispatch('setUpStep',1)\n            // window.location.href='https://dldir1.qq.com/weixin/mac/WeChatMac.dmg'\n        }\n    },\n    watch:{\n        // procedureState:{\n        //     handel(nval, oval){\n        //         console.log(nval, oval)\n        //     },\n        //     deep: true // 深度监听\n        // }\n    }\n}\n</script>\n<style scoped>\n    .upLoad{\n        width:100%;\n        height:100%;\n        padding:30px 60px;\n        background:#fff;\n    }\n    .run-procedure{\n         height:100%;\n    }\n    .step-box{\n        height:100%;\n        width:100%;\n    }\n    /* 步骤一 */\n    .step1{\n        position: relative;\n        height:100%;\n        width:100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n    }\n     .title{\n        font-size:24px;\n        color:#333;\n        font-weight: 700;\n        margin-bottom:20px;\n    }\n    .procedure_img{\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    }\n    .procedure_img_item{\n        flex-grow: 1;\n        height:460px;\n        margin:0 10px;\n        background:#d9d9d9;\n        text-align: center;\n        line-height: 460px;\n    }\n    .btn-box{\n        display: flex;\n        align-items: center;\n        justify-content:space-between;\n        \n    }\n    .btn-box.flex-end{\n        justify-content: flex-end;\n    }\n    /* 步骤2 */\n     .step2{\n       display: flex;\n       align-items: center;\n       justify-content: center; \n       flex-direction: column;\n        height:100%;\n        width:100%;\n\n    }\n    .loading-icon{\n        font-size:60px;\n        color:var(--color-primary);\n    }\n    /* 未安装 */\n    .uninstall-procedure{\n        height:100%;\n        position: relative;\n    }\n     .unstall-tips{\n        display:flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        height:100%;\n    }\n    .waring-icon{\n        font-size:60px;\n        color:red;\n    }\n    .unistall-text{\n        margin-top:30px;\n        font-size:18px;\n        text-align: center;\n    }\n    .unistall-btn{\n        display: flex;\n        justify-content: flex-end;\n        position: absolute;\n        right:0;\n        bottom:0;\n    }\n   \n  \n</style>"],"mappings":"AAmDA,SAAAA,aAAA;AACA,SAAAC,QAAA;AACA,SAAAC,gBAAA;AACA,OAAAC,QAAA;AACA,OAAAC,MAAA;AACA,SAAAC,UAAA;AACA;EACAC,KAAA;IACA,QACA;EACA;EACAC,QAAA;IACA,GAAAF,UAAA,EACA,kBACA,UACA,cACA;EACA;EACAG,UAAA;IACAL;EACA;EACAM,QAAA;IACA;IACA;IACA;IACA;IACA;EAAA,CACA;EACAC,QAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CAEA;EACAC,OAAA;IACAC,OAAA;MACA,IAAAC,IAAA;MACA,IAAAC,MAAA;MACA;MACA,IAAAC,eAAA;MACA,IAAAC,cAAA,GAAAA,CAAA;QAAA;QACAH,IAAA,CAAAI,MAAA,CAAAC,QAAA;MACA;MACA,IAAAC,cAAA,GAAAA,CAAA;QACA;QACAN,IAAA,CAAAI,MAAA,CAAAC,QAAA;QACAL,IAAA,CAAAI,MAAA,CAAAC,QAAA;QACAE,UAAA;UAAA;UACAP,IAAA,CAAAQ,UAAA,CAAAC,KAAA;UACAT,IAAA,CAAAQ,UAAA,CAAAE,aAAA;UACAV,IAAA,CAAAI,MAAA,CAAAC,QAAA;QACA;MAEA;MACAlB,aAAA,CAAAc,MAAA,EAAAE,cAAA,EAAAG,cAAA,EAAAJ,eAAA;IACA;IACA;IACAS,SAAA;MACAC,OAAA,CAAAC,GAAA;MACA,KAAAT,MAAA,CAAAC,QAAA;MACA,KAAAD,MAAA,CAAAC,QAAA;MACA;IACA;EACA;EACAS,KAAA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}