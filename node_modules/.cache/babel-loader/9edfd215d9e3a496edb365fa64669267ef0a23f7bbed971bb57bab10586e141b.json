{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nrequire(\"core-js/modules/es.array.push.js\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCapturedLogs = exports.setLogCapture = exports.debug = exports.importDebug = void 0;\nconst environment_js_1 = require(\"../environment.js\");\n/**\n * @internal\n */\nlet debugModule = null;\n/**\n * @internal\n */\nasync function importDebug() {\n  if (!debugModule) {\n    debugModule = (await Promise.resolve().then(() => __importStar(require('debug')))).default;\n  }\n  return debugModule;\n}\nexports.importDebug = importDebug;\n/**\n * A debug function that can be used in any environment.\n *\n * @remarks\n * If used in Node, it falls back to the\n * {@link https://www.npmjs.com/package/debug | debug module}. In the browser it\n * uses `console.log`.\n *\n * In Node, use the `DEBUG` environment variable to control logging:\n *\n * ```\n * DEBUG=* // logs all channels\n * DEBUG=foo // logs the `foo` channel\n * DEBUG=foo* // logs any channels starting with `foo`\n * ```\n *\n * In the browser, set `window.__PUPPETEER_DEBUG` to a string:\n *\n * ```\n * window.__PUPPETEER_DEBUG='*'; // logs all channels\n * window.__PUPPETEER_DEBUG='foo'; // logs the `foo` channel\n * window.__PUPPETEER_DEBUG='foo*'; // logs any channels starting with `foo`\n * ```\n *\n * @example\n *\n * ```\n * const log = debug('Page');\n *\n * log('new page created')\n * // logs \"Page: new page created\"\n * ```\n *\n * @param prefix - this will be prefixed to each log.\n * @returns a function that can be called to log to that debug channel.\n *\n * @internal\n */\nconst debug = prefix => {\n  if (environment_js_1.isNode) {\n    return async (...logArgs) => {\n      if (captureLogs) {\n        capturedLogs.push(prefix + logArgs);\n      }\n      (await importDebug())(prefix)(logArgs);\n    };\n  }\n  return (...logArgs) => {\n    const debugLevel = globalThis.__PUPPETEER_DEBUG;\n    if (!debugLevel) {\n      return;\n    }\n    const everythingShouldBeLogged = debugLevel === '*';\n    const prefixMatchesDebugLevel = everythingShouldBeLogged || (\n    /**\n     * If the debug level is `foo*`, that means we match any prefix that\n     * starts with `foo`. If the level is `foo`, we match only the prefix\n     * `foo`.\n     */\n    debugLevel.endsWith('*') ? prefix.startsWith(debugLevel) : prefix === debugLevel);\n    if (!prefixMatchesDebugLevel) {\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console.log(`${prefix}:`, ...logArgs);\n  };\n};\nexports.debug = debug;\n/**\n * @internal\n */\nlet capturedLogs = [];\n/**\n * @internal\n */\nlet captureLogs = false;\n/**\n * @internal\n */\nfunction setLogCapture(value) {\n  capturedLogs = [];\n  captureLogs = value;\n}\nexports.setLogCapture = setLogCapture;\n/**\n * @internal\n */\nfunction getCapturedLogs() {\n  return capturedLogs;\n}\nexports.getCapturedLogs = getCapturedLogs;","map":{"version":3,"names":["require","environment_js_1","debugModule","importDebug","Promise","resolve","then","__importStar","default","exports","debug","prefix","isNode","logArgs","captureLogs","capturedLogs","push","debugLevel","globalThis","__PUPPETEER_DEBUG","everythingShouldBeLogged","prefixMatchesDebugLevel","endsWith","startsWith","console","log","setLogCapture","value","getCapturedLogs"],"sources":["../../../../src/common/Debug.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;AAAAA,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,MAAAC,gBAAA,GAAAD,OAAA;AAOA;;;AAGA,IAAIE,WAAW,GAAwB,IAAI;AAC3C;;;AAGO,eAAeC,WAAWA,CAAA;EAC/B,IAAI,CAACD,WAAW,EAAE;IAChBA,WAAW,GAAG,CAAC,MAAAE,OAAA,CAAAC,OAAA,GAAAC,IAAA,OAAAC,YAAA,CAAAP,OAAA,CAAa,OAAO,GAAC,EAAEQ,OAAO;EAC/C;EACA,OAAON,WAAW;AACpB;AALAO,OAAA,CAAAN,WAAA,GAAAA,WAAA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCO,MAAMO,KAAK,GAAIC,MAAc,IAAoC;EACtE,IAAIV,gBAAA,CAAAW,MAAM,EAAE;IACV,OAAO,OAAO,GAAGC,OAAkB,KAAI;MACrC,IAAIC,WAAW,EAAE;QACfC,YAAY,CAACC,IAAI,CAACL,MAAM,GAAGE,OAAO,CAAC;MACrC;MACA,CAAC,MAAMV,WAAW,EAAE,EAAEQ,MAAM,CAAC,CAACE,OAAO,CAAC;IACxC,CAAC;EACH;EAEA,OAAO,CAAC,GAAGA,OAAkB,KAAU;IACrC,MAAMI,UAAU,GAAIC,UAAkB,CAACC,iBAAiB;IACxD,IAAI,CAACF,UAAU,EAAE;MACf;IACF;IAEA,MAAMG,wBAAwB,GAAGH,UAAU,KAAK,GAAG;IAEnD,MAAMI,uBAAuB,GAC3BD,wBAAwB;IACxB;;;;;IAKCH,UAAU,CAACK,QAAQ,CAAC,GAAG,CAAC,GACrBX,MAAM,CAACY,UAAU,CAACN,UAAU,CAAC,GAC7BN,MAAM,KAAKM,UAAU,CAAC;IAE5B,IAAI,CAACI,uBAAuB,EAAE;MAC5B;IACF;IAEA;IACAG,OAAO,CAACC,GAAG,CAAC,GAAGd,MAAM,GAAG,EAAE,GAAGE,OAAO,CAAC;EACvC,CAAC;AACH,CAAC;AApCYJ,OAAA,CAAAC,KAAK,GAAAA,KAAA;AAsClB;;;AAGA,IAAIK,YAAY,GAAa,EAAE;AAC/B;;;AAGA,IAAID,WAAW,GAAG,KAAK;AAEvB;;;AAGA,SAAgBY,aAAaA,CAACC,KAAc;EAC1CZ,YAAY,GAAG,EAAE;EACjBD,WAAW,GAAGa,KAAK;AACrB;AAHAlB,OAAA,CAAAiB,aAAA,GAAAA,aAAA;AAKA;;;AAGA,SAAgBE,eAAeA,CAAA;EAC7B,OAAOb,YAAY;AACrB;AAFAN,OAAA,CAAAmB,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}