{"ast":null,"code":"import _defineProperty from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateFieldInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldSet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _classPrivateFieldGet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2023 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nSymbol.dispose ??= Symbol('dispose');\nSymbol.asyncDispose ??= Symbol('asyncDispose');\n/**\n * @internal\n */\nexport const disposeSymbol = Symbol.dispose;\n/**\n * @internal\n */\nexport const asyncDisposeSymbol = Symbol.asyncDispose;\n/**\n * @internal\n */\nvar _disposed = /*#__PURE__*/new WeakMap();\nvar _stack = /*#__PURE__*/new WeakMap();\nexport class DisposableStack {\n  constructor() {\n    _classPrivateFieldInitSpec(this, _disposed, false);\n    _classPrivateFieldInitSpec(this, _stack, []);\n    _defineProperty(this, disposeSymbol, this.dispose);\n    _defineProperty(this, Symbol.toStringTag, 'DisposableStack');\n  }\n  /**\n   * Returns a value indicating whether this stack has been disposed.\n   */\n  get disposed() {\n    return _classPrivateFieldGet(_disposed, this);\n  }\n  /**\n   * Disposes each resource in the stack in the reverse order that they were added.\n   */\n  dispose() {\n    if (_classPrivateFieldGet(_disposed, this)) {\n      return;\n    }\n    _classPrivateFieldSet(_disposed, this, true);\n    for (const resource of _classPrivateFieldGet(_stack, this).reverse()) {\n      resource[disposeSymbol]();\n    }\n  }\n  /**\n   * Adds a disposable resource to the stack, returning the resource.\n   *\n   * @param value - The resource to add. `null` and `undefined` will not be added,\n   * but will be returned.\n   * @returns The provided `value`.\n   */\n  use(value) {\n    if (value) {\n      _classPrivateFieldGet(_stack, this).push(value);\n    }\n    return value;\n  }\n  /**\n   * Adds a value and associated disposal callback as a resource to the stack.\n   *\n   * @param value - The value to add.\n   * @param onDispose - The callback to use in place of a `[disposeSymbol]()`\n   * method. Will be invoked with `value` as the first parameter.\n   * @returns The provided `value`.\n   */\n  adopt(value, onDispose) {\n    _classPrivateFieldGet(_stack, this).push({\n      [disposeSymbol]() {\n        onDispose(value);\n      }\n    });\n    return value;\n  }\n  /**\n   * Adds a callback to be invoked when the stack is disposed.\n   */\n  defer(onDispose) {\n    _classPrivateFieldGet(_stack, this).push({\n      [disposeSymbol]() {\n        onDispose();\n      }\n    });\n  }\n  /**\n   * Move all resources out of this stack and into a new `DisposableStack`, and\n   * marks this stack as disposed.\n   *\n   * @example\n   *\n   * ```ts\n   * class C {\n   *   #res1: Disposable;\n   *   #res2: Disposable;\n   *   #disposables: DisposableStack;\n   *   constructor() {\n   *     // stack will be disposed when exiting constructor for any reason\n   *     using stack = new DisposableStack();\n   *\n   *     // get first resource\n   *     this.#res1 = stack.use(getResource1());\n   *\n   *     // get second resource. If this fails, both `stack` and `#res1` will be disposed.\n   *     this.#res2 = stack.use(getResource2());\n   *\n   *     // all operations succeeded, move resources out of `stack` so that\n   *     // they aren't disposed when constructor exits\n   *     this.#disposables = stack.move();\n   *   }\n   *\n   *   [disposeSymbol]() {\n   *     this.#disposables.dispose();\n   *   }\n   * }\n   * ```\n   */\n  move() {\n    if (_classPrivateFieldGet(_disposed, this)) {\n      throw new ReferenceError('a disposed stack can not use anything new'); // step 3\n    }\n    const stack = new DisposableStack(); // step 4-5\n    _classPrivateFieldSet(_stack, stack, _classPrivateFieldGet(_stack, this));\n    _classPrivateFieldSet(_disposed, this, true);\n    return stack;\n  }\n}\n/**\n * @internal\n */\nvar _disposed2 = /*#__PURE__*/new WeakMap();\nvar _stack2 = /*#__PURE__*/new WeakMap();\nexport class AsyncDisposableStack {\n  constructor() {\n    _classPrivateFieldInitSpec(this, _disposed2, false);\n    _classPrivateFieldInitSpec(this, _stack2, []);\n    _defineProperty(this, asyncDisposeSymbol, this.dispose);\n    _defineProperty(this, Symbol.toStringTag, 'AsyncDisposableStack');\n  }\n  /**\n   * Returns a value indicating whether this stack has been disposed.\n   */\n  get disposed() {\n    return _classPrivateFieldGet(_disposed2, this);\n  }\n  /**\n   * Disposes each resource in the stack in the reverse order that they were added.\n   */\n  async dispose() {\n    if (_classPrivateFieldGet(_disposed2, this)) {\n      return;\n    }\n    _classPrivateFieldSet(_disposed2, this, true);\n    for (const resource of _classPrivateFieldGet(_stack2, this).reverse()) {\n      await resource[asyncDisposeSymbol]();\n    }\n  }\n  /**\n   * Adds a disposable resource to the stack, returning the resource.\n   *\n   * @param value - The resource to add. `null` and `undefined` will not be added,\n   * but will be returned.\n   * @returns The provided `value`.\n   */\n  use(value) {\n    if (value) {\n      _classPrivateFieldGet(_stack2, this).push(value);\n    }\n    return value;\n  }\n  /**\n   * Adds a value and associated disposal callback as a resource to the stack.\n   *\n   * @param value - The value to add.\n   * @param onDispose - The callback to use in place of a `[disposeSymbol]()`\n   * method. Will be invoked with `value` as the first parameter.\n   * @returns The provided `value`.\n   */\n  adopt(value, onDispose) {\n    _classPrivateFieldGet(_stack2, this).push({\n      [asyncDisposeSymbol]() {\n        return onDispose(value);\n      }\n    });\n    return value;\n  }\n  /**\n   * Adds a callback to be invoked when the stack is disposed.\n   */\n  defer(onDispose) {\n    _classPrivateFieldGet(_stack2, this).push({\n      [asyncDisposeSymbol]() {\n        return onDispose();\n      }\n    });\n  }\n  /**\n   * Move all resources out of this stack and into a new `DisposableStack`, and\n   * marks this stack as disposed.\n   *\n   * @example\n   *\n   * ```ts\n   * class C {\n   *   #res1: Disposable;\n   *   #res2: Disposable;\n   *   #disposables: DisposableStack;\n   *   constructor() {\n   *     // stack will be disposed when exiting constructor for any reason\n   *     using stack = new DisposableStack();\n   *\n   *     // get first resource\n   *     this.#res1 = stack.use(getResource1());\n   *\n   *     // get second resource. If this fails, both `stack` and `#res1` will be disposed.\n   *     this.#res2 = stack.use(getResource2());\n   *\n   *     // all operations succeeded, move resources out of `stack` so that\n   *     // they aren't disposed when constructor exits\n   *     this.#disposables = stack.move();\n   *   }\n   *\n   *   [disposeSymbol]() {\n   *     this.#disposables.dispose();\n   *   }\n   * }\n   * ```\n   */\n  move() {\n    if (_classPrivateFieldGet(_disposed2, this)) {\n      throw new ReferenceError('a disposed stack can not use anything new'); // step 3\n    }\n    const stack = new AsyncDisposableStack(); // step 4-5\n    _classPrivateFieldSet(_stack2, stack, _classPrivateFieldGet(_stack2, this));\n    _classPrivateFieldSet(_disposed2, this, true);\n    return stack;\n  }\n}","map":{"version":3,"names":["Symbol","dispose","asyncDispose","disposeSymbol","asyncDisposeSymbol","_disposed","WeakMap","_stack","DisposableStack","constructor","_classPrivateFieldInitSpec","_defineProperty","toStringTag","disposed","_classPrivateFieldGet","_classPrivateFieldSet","resource","reverse","use","value","push","adopt","onDispose","defer","move","ReferenceError","stack","_disposed2","_stack2","AsyncDisposableStack"],"sources":["../../../../src/util/disposable.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}