{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2017 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nvar _classPrivateMethodInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldSet2.js\").default;\nvar _assertClassBrand = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/assertClassBrand.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkManager = void 0;\nconst CDPSession_js_1 = require(\"../api/CDPSession.js\");\nconst EventEmitter_js_1 = require(\"../common/EventEmitter.js\");\nconst NetworkManagerEvents_js_1 = require(\"../common/NetworkManagerEvents.js\");\nconst util_js_1 = require(\"../common/util.js\");\nconst assert_js_1 = require(\"../util/assert.js\");\nconst disposable_js_1 = require(\"../util/disposable.js\");\nconst HTTPRequest_js_1 = require(\"./HTTPRequest.js\");\nconst HTTPResponse_js_1 = require(\"./HTTPResponse.js\");\nconst NetworkEventManager_js_1 = require(\"./NetworkEventManager.js\");\n/**\n * @internal\n */\nvar _frameManager = /*#__PURE__*/new WeakMap();\nvar _networkEventManager = /*#__PURE__*/new WeakMap();\nvar _extraHTTPHeaders = /*#__PURE__*/new WeakMap();\nvar _credentials = /*#__PURE__*/new WeakMap();\nvar _attemptedAuthentications = /*#__PURE__*/new WeakMap();\nvar _userRequestInterceptionEnabled = /*#__PURE__*/new WeakMap();\nvar _protocolRequestInterceptionEnabled = /*#__PURE__*/new WeakMap();\nvar _userCacheDisabled = /*#__PURE__*/new WeakMap();\nvar _emulatedNetworkConditions = /*#__PURE__*/new WeakMap();\nvar _userAgent = /*#__PURE__*/new WeakMap();\nvar _userAgentMetadata = /*#__PURE__*/new WeakMap();\nvar _handlers = /*#__PURE__*/new WeakMap();\nvar _clients = /*#__PURE__*/new WeakMap();\nvar _NetworkManager_brand = /*#__PURE__*/new WeakSet();\nclass NetworkManager extends EventEmitter_js_1.EventEmitter {\n  constructor(frameManager) {\n    super();\n    _classPrivateMethodInitSpec(this, _NetworkManager_brand);\n    _classPrivateFieldInitSpec(this, _frameManager, void 0);\n    _classPrivateFieldInitSpec(this, _networkEventManager, new NetworkEventManager_js_1.NetworkEventManager());\n    _classPrivateFieldInitSpec(this, _extraHTTPHeaders, void 0);\n    _classPrivateFieldInitSpec(this, _credentials, null);\n    _classPrivateFieldInitSpec(this, _attemptedAuthentications, new Set());\n    _classPrivateFieldInitSpec(this, _userRequestInterceptionEnabled, false);\n    _classPrivateFieldInitSpec(this, _protocolRequestInterceptionEnabled, false);\n    _classPrivateFieldInitSpec(this, _userCacheDisabled, void 0);\n    _classPrivateFieldInitSpec(this, _emulatedNetworkConditions, void 0);\n    _classPrivateFieldInitSpec(this, _userAgent, void 0);\n    _classPrivateFieldInitSpec(this, _userAgentMetadata, void 0);\n    _classPrivateFieldInitSpec(this, _handlers, [['Fetch.requestPaused', _assertClassBrand(_NetworkManager_brand, this, _onRequestPaused)], ['Fetch.authRequired', _assertClassBrand(_NetworkManager_brand, this, _onAuthRequired)], ['Network.requestWillBeSent', _assertClassBrand(_NetworkManager_brand, this, _onRequestWillBeSent)], ['Network.requestServedFromCache', _assertClassBrand(_NetworkManager_brand, this, _onRequestServedFromCache)], ['Network.responseReceived', _assertClassBrand(_NetworkManager_brand, this, _onResponseReceived)], ['Network.loadingFinished', _assertClassBrand(_NetworkManager_brand, this, _onLoadingFinished)], ['Network.loadingFailed', _assertClassBrand(_NetworkManager_brand, this, _onLoadingFailed)], ['Network.responseReceivedExtraInfo', _assertClassBrand(_NetworkManager_brand, this, _onResponseReceivedExtraInfo)], [CDPSession_js_1.CDPSessionEvent.Disconnected, _assertClassBrand(_NetworkManager_brand, this, _removeClient)]]);\n    _classPrivateFieldInitSpec(this, _clients, new Map());\n    _classPrivateFieldSet(_frameManager, this, frameManager);\n  }\n  async addClient(client) {\n    if (_classPrivateFieldGet(_clients, this).has(client)) {\n      return;\n    }\n    const subscriptions = new disposable_js_1.DisposableStack();\n    _classPrivateFieldGet(_clients, this).set(client, subscriptions);\n    const clientEmitter = subscriptions.use(new EventEmitter_js_1.EventEmitter(client));\n    for (const [event, handler] of _classPrivateFieldGet(_handlers, this)) {\n      clientEmitter.on(event, arg => {\n        return handler.bind(this)(client, arg);\n      });\n    }\n    await Promise.all([client.send('Network.enable'), _assertClassBrand(_NetworkManager_brand, this, _applyExtraHTTPHeaders).call(this, client), _assertClassBrand(_NetworkManager_brand, this, _applyNetworkConditions).call(this, client), _assertClassBrand(_NetworkManager_brand, this, _applyProtocolCacheDisabled).call(this, client), _assertClassBrand(_NetworkManager_brand, this, _applyProtocolRequestInterception).call(this, client), _assertClassBrand(_NetworkManager_brand, this, _applyUserAgent).call(this, client)]);\n  }\n  async authenticate(credentials) {\n    _classPrivateFieldSet(_credentials, this, credentials);\n    const enabled = _classPrivateFieldGet(_userRequestInterceptionEnabled, this) || !!_classPrivateFieldGet(_credentials, this);\n    if (enabled === _classPrivateFieldGet(_protocolRequestInterceptionEnabled, this)) {\n      return;\n    }\n    _classPrivateFieldSet(_protocolRequestInterceptionEnabled, this, enabled);\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyProtocolRequestInterception).bind(this));\n  }\n  async setExtraHTTPHeaders(headers) {\n    const extraHTTPHeaders = {};\n    for (const [key, value] of Object.entries(headers)) {\n      (0, assert_js_1.assert)((0, util_js_1.isString)(value), `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`);\n      extraHTTPHeaders[key.toLowerCase()] = value;\n    }\n    _classPrivateFieldSet(_extraHTTPHeaders, this, extraHTTPHeaders);\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyExtraHTTPHeaders).bind(this));\n  }\n  extraHTTPHeaders() {\n    return Object.assign({}, _classPrivateFieldGet(_extraHTTPHeaders, this));\n  }\n  inFlightRequestsCount() {\n    return _classPrivateFieldGet(_networkEventManager, this).inFlightRequestsCount();\n  }\n  async setOfflineMode(value) {\n    if (!_classPrivateFieldGet(_emulatedNetworkConditions, this)) {\n      _classPrivateFieldSet(_emulatedNetworkConditions, this, {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0\n      });\n    }\n    _classPrivateFieldGet(_emulatedNetworkConditions, this).offline = value;\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyNetworkConditions).bind(this));\n  }\n  async emulateNetworkConditions(networkConditions) {\n    if (!_classPrivateFieldGet(_emulatedNetworkConditions, this)) {\n      _classPrivateFieldSet(_emulatedNetworkConditions, this, {\n        offline: false,\n        upload: -1,\n        download: -1,\n        latency: 0\n      });\n    }\n    _classPrivateFieldGet(_emulatedNetworkConditions, this).upload = networkConditions ? networkConditions.upload : -1;\n    _classPrivateFieldGet(_emulatedNetworkConditions, this).download = networkConditions ? networkConditions.download : -1;\n    _classPrivateFieldGet(_emulatedNetworkConditions, this).latency = networkConditions ? networkConditions.latency : 0;\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyNetworkConditions).bind(this));\n  }\n  async setUserAgent(userAgent, userAgentMetadata) {\n    _classPrivateFieldSet(_userAgent, this, userAgent);\n    _classPrivateFieldSet(_userAgentMetadata, this, userAgentMetadata);\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyUserAgent).bind(this));\n  }\n  async setCacheEnabled(enabled) {\n    _classPrivateFieldSet(_userCacheDisabled, this, !enabled);\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyProtocolCacheDisabled).bind(this));\n  }\n  async setRequestInterception(value) {\n    _classPrivateFieldSet(_userRequestInterceptionEnabled, this, value);\n    const enabled = _classPrivateFieldGet(_userRequestInterceptionEnabled, this) || !!_classPrivateFieldGet(_credentials, this);\n    if (enabled === _classPrivateFieldGet(_protocolRequestInterceptionEnabled, this)) {\n      return;\n    }\n    _classPrivateFieldSet(_protocolRequestInterceptionEnabled, this, enabled);\n    await _assertClassBrand(_NetworkManager_brand, this, _applyToAllClients).call(this, _assertClassBrand(_NetworkManager_brand, this, _applyProtocolRequestInterception).bind(this));\n  }\n}\nasync function _removeClient(client) {\n  _classPrivateFieldGet(_clients, this).get(client)?.dispose();\n  _classPrivateFieldGet(_clients, this).delete(client);\n}\nasync function _applyExtraHTTPHeaders(client) {\n  if (_classPrivateFieldGet(_extraHTTPHeaders, this) === undefined) {\n    return;\n  }\n  await client.send('Network.setExtraHTTPHeaders', {\n    headers: _classPrivateFieldGet(_extraHTTPHeaders, this)\n  });\n}\nasync function _applyToAllClients(fn) {\n  await Promise.all(Array.from(_classPrivateFieldGet(_clients, this).keys()).map(client => {\n    return fn(client);\n  }));\n}\nasync function _applyNetworkConditions(client) {\n  if (_classPrivateFieldGet(_emulatedNetworkConditions, this) === undefined) {\n    return;\n  }\n  await client.send('Network.emulateNetworkConditions', {\n    offline: _classPrivateFieldGet(_emulatedNetworkConditions, this).offline,\n    latency: _classPrivateFieldGet(_emulatedNetworkConditions, this).latency,\n    uploadThroughput: _classPrivateFieldGet(_emulatedNetworkConditions, this).upload,\n    downloadThroughput: _classPrivateFieldGet(_emulatedNetworkConditions, this).download\n  });\n}\nasync function _applyUserAgent(client) {\n  if (_classPrivateFieldGet(_userAgent, this) === undefined) {\n    return;\n  }\n  await client.send('Network.setUserAgentOverride', {\n    userAgent: _classPrivateFieldGet(_userAgent, this),\n    userAgentMetadata: _classPrivateFieldGet(_userAgentMetadata, this)\n  });\n}\nasync function _applyProtocolRequestInterception(client) {\n  if (_classPrivateFieldGet(_userCacheDisabled, this) === undefined) {\n    _classPrivateFieldSet(_userCacheDisabled, this, false);\n  }\n  if (_classPrivateFieldGet(_protocolRequestInterceptionEnabled, this)) {\n    await Promise.all([_assertClassBrand(_NetworkManager_brand, this, _applyProtocolCacheDisabled).call(this, client), client.send('Fetch.enable', {\n      handleAuthRequests: true,\n      patterns: [{\n        urlPattern: '*'\n      }]\n    })]);\n  } else {\n    await Promise.all([_assertClassBrand(_NetworkManager_brand, this, _applyProtocolCacheDisabled).call(this, client), client.send('Fetch.disable')]);\n  }\n}\nasync function _applyProtocolCacheDisabled(client) {\n  if (_classPrivateFieldGet(_userCacheDisabled, this) === undefined) {\n    return;\n  }\n  await client.send('Network.setCacheDisabled', {\n    cacheDisabled: _classPrivateFieldGet(_userCacheDisabled, this)\n  });\n}\nfunction _onRequestWillBeSent(client, event) {\n  // Request interception doesn't happen for data URLs with Network Service.\n  if (_classPrivateFieldGet(_userRequestInterceptionEnabled, this) && !event.request.url.startsWith('data:')) {\n    const {\n      requestId: networkRequestId\n    } = event;\n    _classPrivateFieldGet(_networkEventManager, this).storeRequestWillBeSent(networkRequestId, event);\n    /**\n     * CDP may have sent a Fetch.requestPaused event already. Check for it.\n     */\n    const requestPausedEvent = _classPrivateFieldGet(_networkEventManager, this).getRequestPaused(networkRequestId);\n    if (requestPausedEvent) {\n      const {\n        requestId: fetchRequestId\n      } = requestPausedEvent;\n      _assertClassBrand(_NetworkManager_brand, this, _patchRequestEventHeaders).call(this, event, requestPausedEvent);\n      _assertClassBrand(_NetworkManager_brand, this, _onRequest).call(this, client, event, fetchRequestId);\n      _classPrivateFieldGet(_networkEventManager, this).forgetRequestPaused(networkRequestId);\n    }\n    return;\n  }\n  _assertClassBrand(_NetworkManager_brand, this, _onRequest).call(this, client, event, undefined);\n}\nfunction _onAuthRequired(client, event) {\n  let response = 'Default';\n  if (_classPrivateFieldGet(_attemptedAuthentications, this).has(event.requestId)) {\n    response = 'CancelAuth';\n  } else if (_classPrivateFieldGet(_credentials, this)) {\n    response = 'ProvideCredentials';\n    _classPrivateFieldGet(_attemptedAuthentications, this).add(event.requestId);\n  }\n  const {\n    username,\n    password\n  } = _classPrivateFieldGet(_credentials, this) || {\n    username: undefined,\n    password: undefined\n  };\n  client.send('Fetch.continueWithAuth', {\n    requestId: event.requestId,\n    authChallengeResponse: {\n      response,\n      username,\n      password\n    }\n  }).catch(util_js_1.debugError);\n}\n/**\n * CDP may send a Fetch.requestPaused without or before a\n * Network.requestWillBeSent\n *\n * CDP may send multiple Fetch.requestPaused\n * for the same Network.requestWillBeSent.\n */\nfunction _onRequestPaused(client, event) {\n  if (!_classPrivateFieldGet(_userRequestInterceptionEnabled, this) && _classPrivateFieldGet(_protocolRequestInterceptionEnabled, this)) {\n    client.send('Fetch.continueRequest', {\n      requestId: event.requestId\n    }).catch(util_js_1.debugError);\n  }\n  const {\n    networkId: networkRequestId,\n    requestId: fetchRequestId\n  } = event;\n  if (!networkRequestId) {\n    _assertClassBrand(_NetworkManager_brand, this, _onRequestWithoutNetworkInstrumentation).call(this, client, event);\n    return;\n  }\n  const requestWillBeSentEvent = (() => {\n    const requestWillBeSentEvent = _classPrivateFieldGet(_networkEventManager, this).getRequestWillBeSent(networkRequestId);\n    // redirect requests have the same `requestId`,\n    if (requestWillBeSentEvent && (requestWillBeSentEvent.request.url !== event.request.url || requestWillBeSentEvent.request.method !== event.request.method)) {\n      _classPrivateFieldGet(_networkEventManager, this).forgetRequestWillBeSent(networkRequestId);\n      return;\n    }\n    return requestWillBeSentEvent;\n  })();\n  if (requestWillBeSentEvent) {\n    _assertClassBrand(_NetworkManager_brand, this, _patchRequestEventHeaders).call(this, requestWillBeSentEvent, event);\n    _assertClassBrand(_NetworkManager_brand, this, _onRequest).call(this, client, requestWillBeSentEvent, fetchRequestId);\n  } else {\n    _classPrivateFieldGet(_networkEventManager, this).storeRequestPaused(networkRequestId, event);\n  }\n}\nfunction _patchRequestEventHeaders(requestWillBeSentEvent, requestPausedEvent) {\n  requestWillBeSentEvent.request.headers = {\n    ...requestWillBeSentEvent.request.headers,\n    // includes extra headers, like: Accept, Origin\n    ...requestPausedEvent.request.headers\n  };\n}\nfunction _onRequestWithoutNetworkInstrumentation(client, event) {\n  // If an event has no networkId it should not have any network events. We\n  // still want to dispatch it for the interception by the user.\n  const frame = event.frameId ? _classPrivateFieldGet(_frameManager, this).frame(event.frameId) : null;\n  const request = new HTTPRequest_js_1.CdpHTTPRequest(client, frame, event.requestId, _classPrivateFieldGet(_userRequestInterceptionEnabled, this), event, []);\n  this.emit(NetworkManagerEvents_js_1.NetworkManagerEvent.Request, request);\n  void request.finalizeInterceptions();\n}\nfunction _onRequest(client, event, fetchRequestId) {\n  let redirectChain = [];\n  if (event.redirectResponse) {\n    // We want to emit a response and requestfinished for the\n    // redirectResponse, but we can't do so unless we have a\n    // responseExtraInfo ready to pair it up with. If we don't have any\n    // responseExtraInfos saved in our queue, they we have to wait until\n    // the next one to emit response and requestfinished, *and* we should\n    // also wait to emit this Request too because it should come after the\n    // response/requestfinished.\n    let redirectResponseExtraInfo = null;\n    if (event.redirectHasExtraInfo) {\n      redirectResponseExtraInfo = _classPrivateFieldGet(_networkEventManager, this).responseExtraInfo(event.requestId).shift();\n      if (!redirectResponseExtraInfo) {\n        _classPrivateFieldGet(_networkEventManager, this).queueRedirectInfo(event.requestId, {\n          event,\n          fetchRequestId\n        });\n        return;\n      }\n    }\n    const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(event.requestId);\n    // If we connect late to the target, we could have missed the\n    // requestWillBeSent event.\n    if (request) {\n      _assertClassBrand(_NetworkManager_brand, this, _handleRequestRedirect).call(this, client, request, event.redirectResponse, redirectResponseExtraInfo);\n      redirectChain = request._redirectChain;\n    }\n  }\n  const frame = event.frameId ? _classPrivateFieldGet(_frameManager, this).frame(event.frameId) : null;\n  const request = new HTTPRequest_js_1.CdpHTTPRequest(client, frame, fetchRequestId, _classPrivateFieldGet(_userRequestInterceptionEnabled, this), event, redirectChain);\n  _classPrivateFieldGet(_networkEventManager, this).storeRequest(event.requestId, request);\n  this.emit(NetworkManagerEvents_js_1.NetworkManagerEvent.Request, request);\n  void request.finalizeInterceptions();\n}\nfunction _onRequestServedFromCache(_client, event) {\n  const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(event.requestId);\n  if (request) {\n    request._fromMemoryCache = true;\n  }\n  this.emit(NetworkManagerEvents_js_1.NetworkManagerEvent.RequestServedFromCache, request);\n}\nfunction _handleRequestRedirect(client, request, responsePayload, extraInfo) {\n  const response = new HTTPResponse_js_1.CdpHTTPResponse(client, request, responsePayload, extraInfo);\n  request._response = response;\n  request._redirectChain.push(request);\n  response._resolveBody(new Error('Response body is unavailable for redirect responses'));\n  _assertClassBrand(_NetworkManager_brand, this, _forgetRequest).call(this, request, false);\n  this.emit(NetworkManagerEvents_js_1.NetworkManagerEvent.Response, response);\n  this.emit(NetworkManagerEvents_js_1.NetworkManagerEvent.RequestFinished, request);\n}\nfunction _emitResponseEvent(client, responseReceived, extraInfo) {\n  const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(responseReceived.requestId);\n  // FileUpload sends a response without a matching request.\n  if (!request) {\n    return;\n  }\n  const extraInfos = _classPrivateFieldGet(_networkEventManager, this).responseExtraInfo(responseReceived.requestId);\n  if (extraInfos.length) {\n    (0, util_js_1.debugError)(new Error('Unexpected extraInfo events for request ' + responseReceived.requestId));\n  }\n  // Chromium sends wrong extraInfo events for responses served from cache.\n  // See https://github.com/puppeteer/puppeteer/issues/9965 and\n  // https://crbug.com/1340398.\n  if (responseReceived.response.fromDiskCache) {\n    extraInfo = null;\n  }\n  const response = new HTTPResponse_js_1.CdpHTTPResponse(client, request, responseReceived.response, extraInfo);\n  request._response = response;\n  this.emit(NetworkManagerEvents_js_1.NetworkManagerEvent.Response, response);\n}\nfunction _onResponseReceived(client, event) {\n  const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(event.requestId);\n  let extraInfo = null;\n  if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n    extraInfo = _classPrivateFieldGet(_networkEventManager, this).responseExtraInfo(event.requestId).shift();\n    if (!extraInfo) {\n      // Wait until we get the corresponding ExtraInfo event.\n      _classPrivateFieldGet(_networkEventManager, this).queueEventGroup(event.requestId, {\n        responseReceivedEvent: event\n      });\n      return;\n    }\n  }\n  _assertClassBrand(_NetworkManager_brand, this, _emitResponseEvent).call(this, client, event, extraInfo);\n}\nfunction _onResponseReceivedExtraInfo(client, event) {\n  // We may have skipped a redirect response/request pair due to waiting for\n  // this ExtraInfo event. If so, continue that work now that we have the\n  // request.\n  const redirectInfo = _classPrivateFieldGet(_networkEventManager, this).takeQueuedRedirectInfo(event.requestId);\n  if (redirectInfo) {\n    _classPrivateFieldGet(_networkEventManager, this).responseExtraInfo(event.requestId).push(event);\n    _assertClassBrand(_NetworkManager_brand, this, _onRequest).call(this, client, redirectInfo.event, redirectInfo.fetchRequestId);\n    return;\n  }\n  // We may have skipped response and loading events because we didn't have\n  // this ExtraInfo event yet. If so, emit those events now.\n  const queuedEvents = _classPrivateFieldGet(_networkEventManager, this).getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    _classPrivateFieldGet(_networkEventManager, this).forgetQueuedEventGroup(event.requestId);\n    _assertClassBrand(_NetworkManager_brand, this, _emitResponseEvent).call(this, client, queuedEvents.responseReceivedEvent, event);\n    if (queuedEvents.loadingFinishedEvent) {\n      _assertClassBrand(_NetworkManager_brand, this, _emitLoadingFinished).call(this, queuedEvents.loadingFinishedEvent);\n    }\n    if (queuedEvents.loadingFailedEvent) {\n      _assertClassBrand(_NetworkManager_brand, this, _emitLoadingFailed).call(this, queuedEvents.loadingFailedEvent);\n    }\n    return;\n  }\n  // Wait until we get another event that can use this ExtraInfo event.\n  _classPrivateFieldGet(_networkEventManager, this).responseExtraInfo(event.requestId).push(event);\n}\nfunction _forgetRequest(request, events) {\n  const requestId = request.id;\n  const interceptionId = request._interceptionId;\n  _classPrivateFieldGet(_networkEventManager, this).forgetRequest(requestId);\n  interceptionId !== undefined && _classPrivateFieldGet(_attemptedAuthentications, this).delete(interceptionId);\n  if (events) {\n    _classPrivateFieldGet(_networkEventManager, this).forget(requestId);\n  }\n}\nfunction _onLoadingFinished(_client, event) {\n  // If the response event for this request is still waiting on a\n  // corresponding ExtraInfo event, then wait to emit this event too.\n  const queuedEvents = _classPrivateFieldGet(_networkEventManager, this).getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    queuedEvents.loadingFinishedEvent = event;\n  } else {\n    _assertClassBrand(_NetworkManager_brand, this, _emitLoadingFinished).call(this, event);\n  }\n}\nfunction _emitLoadingFinished(event) {\n  const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(event.requestId);\n  // For certain requestIds we never receive requestWillBeSent event.\n  // @see https://crbug.com/750469\n  if (!request) {\n    return;\n  }\n  // Under certain conditions we never get the Network.responseReceived\n  // event from protocol. @see https://crbug.com/883475\n  if (request.response()) {\n    request.response()?._resolveBody();\n  }\n  _assertClassBrand(_NetworkManager_brand, this, _forgetRequest).call(this, request, true);\n  this.emit(NetworkManagerEvents_js_1.NetworkManagerEvent.RequestFinished, request);\n}\nfunction _onLoadingFailed(_client, event) {\n  // If the response event for this request is still waiting on a\n  // corresponding ExtraInfo event, then wait to emit this event too.\n  const queuedEvents = _classPrivateFieldGet(_networkEventManager, this).getQueuedEventGroup(event.requestId);\n  if (queuedEvents) {\n    queuedEvents.loadingFailedEvent = event;\n  } else {\n    _assertClassBrand(_NetworkManager_brand, this, _emitLoadingFailed).call(this, event);\n  }\n}\nfunction _emitLoadingFailed(event) {\n  const request = _classPrivateFieldGet(_networkEventManager, this).getRequest(event.requestId);\n  // For certain requestIds we never receive requestWillBeSent event.\n  // @see https://crbug.com/750469\n  if (!request) {\n    return;\n  }\n  request._failureText = event.errorText;\n  const response = request.response();\n  if (response) {\n    response._resolveBody();\n  }\n  _assertClassBrand(_NetworkManager_brand, this, _forgetRequest).call(this, request, true);\n  this.emit(NetworkManagerEvents_js_1.NetworkManagerEvent.RequestFailed, request);\n}\nexports.NetworkManager = NetworkManager;","map":{"version":3,"names":["_classPrivateMethodInitSpec","require","default","_classPrivateFieldInitSpec","_classPrivateFieldGet","_classPrivateFieldSet","_assertClassBrand","CDPSession_js_1","EventEmitter_js_1","NetworkManagerEvents_js_1","util_js_1","assert_js_1","disposable_js_1","HTTPRequest_js_1","HTTPResponse_js_1","NetworkEventManager_js_1","_frameManager","WeakMap","_networkEventManager","_extraHTTPHeaders","_credentials","_attemptedAuthentications","_userRequestInterceptionEnabled","_protocolRequestInterceptionEnabled","_userCacheDisabled","_emulatedNetworkConditions","_userAgent","_userAgentMetadata","_handlers","_clients","_NetworkManager_brand","WeakSet","NetworkManager","EventEmitter","constructor","frameManager","NetworkEventManager","Set","_onRequestPaused","_onAuthRequired","_onRequestWillBeSent","_onRequestServedFromCache","_onResponseReceived","_onLoadingFinished","_onLoadingFailed","_onResponseReceivedExtraInfo","CDPSessionEvent","Disconnected","_removeClient","Map","addClient","client","has","subscriptions","DisposableStack","set","clientEmitter","use","event","handler","on","arg","bind","Promise","all","send","_applyExtraHTTPHeaders","call","_applyNetworkConditions","_applyProtocolCacheDisabled","_applyProtocolRequestInterception","_applyUserAgent","authenticate","credentials","enabled","_applyToAllClients","setExtraHTTPHeaders","headers","extraHTTPHeaders","key","value","Object","entries","assert","isString","toLowerCase","assign","inFlightRequestsCount","setOfflineMode","offline","upload","download","latency","emulateNetworkConditions","networkConditions","setUserAgent","userAgent","userAgentMetadata","setCacheEnabled","setRequestInterception","get","dispose","delete","undefined","fn","Array","from","keys","map","uploadThroughput","downloadThroughput","handleAuthRequests","patterns","urlPattern","cacheDisabled","request","url","startsWith","requestId","networkRequestId","storeRequestWillBeSent","requestPausedEvent","getRequestPaused","fetchRequestId","_patchRequestEventHeaders","_onRequest","forgetRequestPaused","response","add","username","password","authChallengeResponse","catch","debugError","networkId","_onRequestWithoutNetworkInstrumentation","requestWillBeSentEvent","getRequestWillBeSent","method","forgetRequestWillBeSent","storeRequestPaused","frame","frameId","CdpHTTPRequest","emit","NetworkManagerEvent","Request","finalizeInterceptions","redirectChain","redirectResponse","redirectResponseExtraInfo","redirectHasExtraInfo","responseExtraInfo","shift","queueRedirectInfo","getRequest","_handleRequestRedirect","_redirectChain","storeRequest","_client","_fromMemoryCache","RequestServedFromCache","responsePayload","extraInfo","CdpHTTPResponse","_response","push","_resolveBody","Error","_forgetRequest","Response","RequestFinished","_emitResponseEvent","responseReceived","extraInfos","length","fromDiskCache","hasExtraInfo","queueEventGroup","responseReceivedEvent","redirectInfo","takeQueuedRedirectInfo","queuedEvents","getQueuedEventGroup","forgetQueuedEventGroup","loadingFinishedEvent","_emitLoadingFinished","loadingFailedEvent","_emitLoadingFailed","events","id","interceptionId","_interceptionId","forgetRequest","forget","_failureText","errorText","RequestFailed","exports"],"sources":["../../../../src/cdp/NetworkManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}