{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Cookies from \"js-cookie\";\nimport { login } from '@/api/api';\nimport { getToken, removeToken, setToken } from '@/utils/auth';\nexport default {\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      rememberMe: false,\n      loading: false,\n      activeName: 'login',\n      loginRules: {\n        username: [{\n          required: true,\n          trigger: \"blur\",\n          message: \" \"\n        }],\n        password: [{\n          required: true,\n          trigger: \"blur\",\n          message: \" \"\n        }]\n      }\n    };\n  },\n  created() {\n    this.getCookie();\n  },\n  methods: {\n    getCookie() {\n      const username = Cookies.get(\"username\");\n      const password = Cookies.get(\"password\");\n      const rememberMe = Cookies.get(\"rememberMe\");\n      this.loginForm = {\n        username: username === undefined ? this.loginForm.username : username,\n        password: password === undefined ? this.loginForm.password : password\n      };\n      this.rememberMe = rememberMe === undefined ? false : Boolean(rememberMe);\n    },\n    handleLogin() {\n      this.$refs.loginForm.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          login({\n            username: this.loginForm.username,\n            password: this.$md5(this.loginForm.password)\n          }).then(response => {\n            this.loading = false;\n            if (response.code == 1000) {\n              this.$message({\n                type: 'success',\n                message: '登录成功'\n              });\n              this.$router.push('/user');\n              setToken(response.data.token);\n              Cookies.set(\"avatar\", this.loginForm.username, {\n                expires: 30\n              });\n              if (this.rememberMe) {\n                Cookies.set(\"username\", this.loginForm.username, {\n                  expires: 30\n                });\n                Cookies.set(\"password\", this.loginForm.password, {\n                  expires: 30\n                });\n                Cookies.set(\"rememberMe\", this.rememberMe, {\n                  expires: 30\n                });\n              } else {\n                Cookies.remove(\"username\");\n                Cookies.remove(\"password\");\n                Cookies.remove(\"rememberMe\");\n              }\n            } else {\n              this.$message({\n                type: 'error',\n                message: response.msg\n              });\n            }\n          }).catch(res => {\n            this.$message({\n              type: 'error',\n              message: res.message\n            });\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Cookies","login","getToken","removeToken","setToken","data","loginForm","username","password","rememberMe","loading","activeName","loginRules","required","trigger","message","created","getCookie","methods","get","undefined","Boolean","handleLogin","$refs","validate","valid","$md5","then","response","code","$message","type","$router","push","token","set","expires","remove","msg","catch","res"],"sources":["src/views/login/login.vue"],"sourcesContent":["<template>\n        <div class=\"login\" id='login'>\n            <div class='login-main' >\n                <div class='login-box' >\n                    <el-tabs v-model=\"activeName\" @tab-click=\"handleClick\">\n                        <el-tab-pane label=\"登录\" name=\"login\"></el-tab-pane>\n                        <el-tab-pane label=\"注册\" name=\"register\"></el-tab-pane>\n                    </el-tabs>\n                    <div  class='login-form'>\n                        <el-form ref=\"loginForm\" :model=\"loginForm\"  :rules=\"loginRules\">\n                            <el-form-item  prop='username'>\n                                <el-input v-model=\"loginForm.username\"\n                                    prefix-icon=\"el-icon-user\"\n                                    :placeholder=\"$t('message.login.placeholderName')\"></el-input>\n                            </el-form-item>\n                            <el-form-item  prop='password'>\n                                <el-input v-model=\"loginForm.password\"\n                                    :placeholder=\"$t('message.login.placeholderPwd')\"\n                                    show-password\n                                    prefix-icon=\"el-icon-lock\"></el-input>\n                            </el-form-item>\n                            <el-form-item >\n                                <el-checkbox v-model=\"rememberMe\">\n                                    {{ $t(\"message.login.rememberPwdText\") }}\n                                </el-checkbox>\n                            </el-form-item>\n                            <el-form-item >\n                                <el-button :loading=\"loading\" class=\"login-submit\" style=\"width: 100%\" type=\"primary\" @click.native.prevent=\"handleLogin\">\n                                    <span v-if=\"!loading\">{{ $t(\"message.login.loginBtnText\") }}</span>\n                                    <span v-else>{{ $t(\"message.login.loginInBtnText\") }}</span>\n                                </el-button>\n                            </el-form-item>\n                        </el-form>\n                    </div>\n                </div>\n                <el-divider direction=\"vertical\" class='divider' ></el-divider>\n                <div class='login-design' >\n                    <img src=\"~@/assets/image/login-img.png\" alt=\"\" class='login-img' >\n                </div>\n            </div>\n        </div>\n</template>\n\n<script>\nimport Cookies from \"js-cookie\"\nimport {login} from '@/api/api'\nimport {getToken, removeToken, setToken} from '@/utils/auth'\nexport default {\n    data(){\n        return {\n            loginForm:{\n                username:'',\n                password:'',\n            },\n            rememberMe:false,\n            loading:false,\n            activeName:'login',\n            loginRules: {\n                username: [{ required: true, trigger: \"blur\", message: \" \" }],\n                password: [{ required: true, trigger: \"blur\", message: \" \" }]\n            },\n        }\n    },\n    created(){\n        this.getCookie()\n        \n    },\n    methods:{\n        getCookie() {\n            const username = Cookies.get(\"username\")\n            const password = Cookies.get(\"password\")\n            const rememberMe = Cookies.get(\"rememberMe\")\n            this.loginForm = {\n                username: username === undefined ? this.loginForm.username : username,\n                password: password === undefined ? this.loginForm.password :  password,\n            }\n            this.rememberMe = rememberMe === undefined ? false : Boolean(rememberMe)\n        },\n        handleLogin(){\n             this.$refs.loginForm.validate((valid) => {\n                if(valid){\n                    this.loading = true\n                    login({username:this.loginForm.username,password:this.$md5(this.loginForm.password)}).then(response => {\n                            this.loading=false\n\t\t\t\t\t\t\tif(response.code == 1000){\n\t\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\t\t\tmessage: '登录成功'\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tthis.$router.push('/user')\n\t\t\t\t\t\t\t\tsetToken(response.data.token)\n                                Cookies.set(\"avatar\", this.loginForm.username, { expires: 30 })\n                                if (this.rememberMe) {\n                                    Cookies.set(\"username\", this.loginForm.username, { expires: 30 })\n                                    Cookies.set(\"password\",  this.loginForm.password, { expires: 30 })\n                                    Cookies.set(\"rememberMe\", this.rememberMe, { expires: 30 })\n                                    \n                                } else {\n                                    Cookies.remove(\"username\")\n                                    Cookies.remove(\"password\")\n                                    Cookies.remove(\"rememberMe\")\n                                    \n                                }\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tthis.$message({\n                                    type: 'error',\n                                    message: response.msg\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}).catch((res) => {\n\t\t\t\t\t\t\tthis.$message({\n\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\tmessage: res.message\n\t\t\t\t\t\t\t});\n\t\t\t\t\t})\n                   \n                  \n                }\n             })\n        }\n    }\n}\n</script>\n\n<style >\n    .login{\n        height: 100%;\n        width:100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background:#f7fcfd;\n    }\n    #login .login-main{\n        display: flex;\n        align-items: center;\n    }\n    #login .login-box{\n        width:380px;\n        height:490px;\n        box-shadow: 0px 4px 20px 0px #0000001A;\n        background:rgba(255,255,255,0.9);\n        border-radius:10px;\n        box-sizing: border-box;\n        padding:50px;\n    }\n    #login .login-box .el-tabs__nav-wrap::after{\n        background:none;\n        height:3px;\n    }\n    .el-tabs__active-bar{\n        height:3px;\n        border-radius:1px;\n    }\n    #login .title{\n        text-align: center;\n        margin-bottom:50px;\n        font-size:28px;\n        font-weight: bold;\n        color:#333;\n    }\n    #login .el-input__inner{\n        background: none;\n    }\n    #login .el-tabs__item{\n        font-size:20px;\n        font-weight:305;\n    }\n    #login .el-tabs__item.is-active{\n        font-weight: 440;\n    }\n    #login .divider{\n        margin:0 80px;\n    }\n</style>"],"mappings":";AA4CA,OAAAA,OAAA;AACA,SAAAC,KAAA;AACA,SAAAC,QAAA,EAAAC,WAAA,EAAAC,QAAA;AACA;EACAC,KAAA;IACA;MACAC,SAAA;QACAC,QAAA;QACAC,QAAA;MACA;MACAC,UAAA;MACAC,OAAA;MACAC,UAAA;MACAC,UAAA;QACAL,QAAA;UAAAM,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAP,QAAA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;EAEA;EACAC,OAAA;IACAD,UAAA;MACA,MAAAV,QAAA,GAAAP,OAAA,CAAAmB,GAAA;MACA,MAAAX,QAAA,GAAAR,OAAA,CAAAmB,GAAA;MACA,MAAAV,UAAA,GAAAT,OAAA,CAAAmB,GAAA;MACA,KAAAb,SAAA;QACAC,QAAA,EAAAA,QAAA,KAAAa,SAAA,QAAAd,SAAA,CAAAC,QAAA,GAAAA,QAAA;QACAC,QAAA,EAAAA,QAAA,KAAAY,SAAA,QAAAd,SAAA,CAAAE,QAAA,GAAAA;MACA;MACA,KAAAC,UAAA,GAAAA,UAAA,KAAAW,SAAA,WAAAC,OAAA,CAAAZ,UAAA;IACA;IACAa,YAAA;MACA,KAAAC,KAAA,CAAAjB,SAAA,CAAAkB,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAf,OAAA;UACAT,KAAA;YAAAM,QAAA,OAAAD,SAAA,CAAAC,QAAA;YAAAC,QAAA,OAAAkB,IAAA,MAAApB,SAAA,CAAAE,QAAA;UAAA,GAAAmB,IAAA,CAAAC,QAAA;YACA,KAAAlB,OAAA;YACA,IAAAkB,QAAA,CAAAC,IAAA;cACA,KAAAC,QAAA;gBACAC,IAAA;gBACAhB,OAAA;cACA;cACA,KAAAiB,OAAA,CAAAC,IAAA;cACA7B,QAAA,CAAAwB,QAAA,CAAAvB,IAAA,CAAA6B,KAAA;cACAlC,OAAA,CAAAmC,GAAA,gBAAA7B,SAAA,CAAAC,QAAA;gBAAA6B,OAAA;cAAA;cACA,SAAA3B,UAAA;gBACAT,OAAA,CAAAmC,GAAA,kBAAA7B,SAAA,CAAAC,QAAA;kBAAA6B,OAAA;gBAAA;gBACApC,OAAA,CAAAmC,GAAA,kBAAA7B,SAAA,CAAAE,QAAA;kBAAA4B,OAAA;gBAAA;gBACApC,OAAA,CAAAmC,GAAA,oBAAA1B,UAAA;kBAAA2B,OAAA;gBAAA;cAEA;gBACApC,OAAA,CAAAqC,MAAA;gBACArC,OAAA,CAAAqC,MAAA;gBACArC,OAAA,CAAAqC,MAAA;cAEA;YACA;cACA,KAAAP,QAAA;gBACAC,IAAA;gBACAhB,OAAA,EAAAa,QAAA,CAAAU;cACA;YACA;UACA,GAAAC,KAAA,CAAAC,GAAA;YACA,KAAAV,QAAA;cACAC,IAAA;cACAhB,OAAA,EAAAyB,GAAA,CAAAzB;YACA;UACA;QAGA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}