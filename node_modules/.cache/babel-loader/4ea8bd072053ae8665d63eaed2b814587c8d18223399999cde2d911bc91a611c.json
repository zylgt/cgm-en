{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateMethodInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _assertClassBrand = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/assertClassBrand.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldSet2.js\").default;\nvar _Realm;\nrequire(\"core-js/modules/es.regexp.flags.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Realm = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst log_js_1 = require(\"../../../utils/log.js\");\nconst uuid_js_1 = require(\"../../../utils/uuid.js\");\nconst ChannelProxy_js_1 = require(\"./ChannelProxy.js\");\nvar _cdpClient = /*#__PURE__*/new WeakMap();\nvar _eventManager = /*#__PURE__*/new WeakMap();\nvar _executionContextId = /*#__PURE__*/new WeakMap();\nvar _logger = /*#__PURE__*/new WeakMap();\nvar _origin = /*#__PURE__*/new WeakMap();\nvar _realmId = /*#__PURE__*/new WeakMap();\nvar _realmStorage = /*#__PURE__*/new WeakMap();\nvar _Realm_brand = /*#__PURE__*/new WeakSet();\nclass Realm {\n  constructor(cdpClient, eventManager, executionContextId, logger, origin, realmId, realmStorage) {\n    _classPrivateMethodInitSpec(this, _Realm_brand);\n    _classPrivateFieldInitSpec(this, _cdpClient, void 0);\n    _classPrivateFieldInitSpec(this, _eventManager, void 0);\n    _classPrivateFieldInitSpec(this, _executionContextId, void 0);\n    _classPrivateFieldInitSpec(this, _logger, void 0);\n    _classPrivateFieldInitSpec(this, _origin, void 0);\n    _classPrivateFieldInitSpec(this, _realmId, void 0);\n    _classPrivateFieldInitSpec(this, _realmStorage, void 0);\n    _classPrivateFieldSet(_cdpClient, this, cdpClient);\n    _classPrivateFieldSet(_eventManager, this, eventManager);\n    _classPrivateFieldSet(_executionContextId, this, executionContextId);\n    _classPrivateFieldSet(_logger, this, logger);\n    _classPrivateFieldSet(_origin, this, origin);\n    _classPrivateFieldSet(_realmId, this, realmId);\n    _classPrivateFieldSet(_realmStorage, this, realmStorage);\n    _classPrivateFieldGet(_realmStorage, this).addRealm(this);\n  }\n  cdpToBidiValue(cdpValue, resultOwnership) {\n    const bidiValue = this.serializeForBiDi(cdpValue.result.deepSerializedValue, new Map());\n    if (cdpValue.result.objectId) {\n      const objectId = cdpValue.result.objectId;\n      if (resultOwnership === \"root\" /* Script.ResultOwnership.Root */) {\n        // Extend BiDi value with `handle` based on required `resultOwnership`\n        // and  CDP response but not on the actual BiDi type.\n        bidiValue.handle = objectId;\n        // Remember all the handles sent to client.\n        _classPrivateFieldGet(_realmStorage, this).knownHandlesToRealmMap.set(objectId, this.realmId);\n      } else {\n        // No need to await for the object to be released.\n        void _assertClassBrand(_Realm_brand, this, _releaseObject).call(this, objectId).catch(error => _classPrivateFieldGet(_logger, this)?.call(this, log_js_1.LogType.debugError, error));\n      }\n    }\n    return bidiValue;\n  }\n  /**\n   * Relies on the CDP to implement proper BiDi serialization, except:\n   * * CDP integer property `backendNodeId` is replaced with `sharedId` of\n   * `{documentId}_element_{backendNodeId}`;\n   * * CDP integer property `weakLocalObjectReference` is replaced with UUID `internalId`\n   * using unique-per serialization `internalIdMap`.\n   * * CDP type `platformobject` is replaced with `object`.\n   * @param deepSerializedValue - CDP value to be converted to BiDi.\n   * @param internalIdMap - Map from CDP integer `weakLocalObjectReference` to BiDi UUID\n   * `internalId`.\n   */\n  serializeForBiDi(deepSerializedValue, internalIdMap) {\n    if (Object.hasOwn(deepSerializedValue, 'weakLocalObjectReference')) {\n      const weakLocalObjectReference = deepSerializedValue.weakLocalObjectReference;\n      if (!internalIdMap.has(weakLocalObjectReference)) {\n        internalIdMap.set(weakLocalObjectReference, (0, uuid_js_1.uuidv4)());\n      }\n      deepSerializedValue.internalId = internalIdMap.get(weakLocalObjectReference);\n      delete deepSerializedValue['weakLocalObjectReference'];\n    }\n    // Platform object is a special case. It should have only `{type: object}`\n    // without `value` field.\n    if (deepSerializedValue.type === 'platformobject') {\n      return {\n        type: 'object'\n      };\n    }\n    const bidiValue = deepSerializedValue.value;\n    if (bidiValue === undefined) {\n      return deepSerializedValue;\n    }\n    // Recursively update the nested values.\n    if (['array', 'set', 'htmlcollection', 'nodelist'].includes(deepSerializedValue.type)) {\n      for (const i in bidiValue) {\n        bidiValue[i] = this.serializeForBiDi(bidiValue[i], internalIdMap);\n      }\n    }\n    if (['object', 'map'].includes(deepSerializedValue.type)) {\n      for (const i in bidiValue) {\n        bidiValue[i] = [this.serializeForBiDi(bidiValue[i][0], internalIdMap), this.serializeForBiDi(bidiValue[i][1], internalIdMap)];\n      }\n    }\n    return deepSerializedValue;\n  }\n  get realmId() {\n    return _classPrivateFieldGet(_realmId, this);\n  }\n  get executionContextId() {\n    return _classPrivateFieldGet(_executionContextId, this);\n  }\n  get origin() {\n    return _classPrivateFieldGet(_origin, this);\n  }\n  get source() {\n    return {\n      realm: this.realmId\n    };\n  }\n  get cdpClient() {\n    return _classPrivateFieldGet(_cdpClient, this);\n  }\n  get baseInfo() {\n    return {\n      realm: this.realmId,\n      origin: this.origin\n    };\n  }\n  async evaluate(expression, awaitPromise, resultOwnership = \"none\" /* Script.ResultOwnership.None */, serializationOptions = {}, userActivation = false, includeCommandLineApi = false) {\n    const cdpEvaluateResult = await this.cdpClient.sendCommand('Runtime.evaluate', {\n      contextId: this.executionContextId,\n      expression,\n      awaitPromise,\n      serializationOptions: _getSerializationOptions.call(Realm, \"deep\" /* Protocol.Runtime.SerializationOptionsSerialization.Deep */, serializationOptions),\n      userGesture: userActivation,\n      includeCommandLineAPI: includeCommandLineApi\n    });\n    if (cdpEvaluateResult.exceptionDetails) {\n      return await _assertClassBrand(_Realm_brand, this, _getExceptionResult).call(this, cdpEvaluateResult.exceptionDetails, 0, resultOwnership);\n    }\n    return {\n      realm: this.realmId,\n      result: this.cdpToBidiValue(cdpEvaluateResult, resultOwnership),\n      type: 'success'\n    };\n  }\n  initialize() {\n    _assertClassBrand(_Realm_brand, this, _registerEvent).call(this, {\n      type: 'event',\n      method: protocol_js_1.ChromiumBidi.Script.EventNames.RealmCreated,\n      params: this.realmInfo\n    });\n  }\n  /**\n   * Serializes a given CDP object into BiDi, keeping references in the\n   * target's `globalThis`.\n   */\n  async serializeCdpObject(cdpRemoteObject, resultOwnership) {\n    const argument = _cdpRemoteObjectToCallArgument.call(Realm, cdpRemoteObject);\n    const cdpValue = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {\n      functionDeclaration: String(remoteObject => remoteObject),\n      awaitPromise: false,\n      arguments: [argument],\n      serializationOptions: {\n        serialization: \"deep\" /* Protocol.Runtime.SerializationOptionsSerialization.Deep */\n      },\n      executionContextId: this.executionContextId\n    });\n    return this.cdpToBidiValue(cdpValue, resultOwnership);\n  }\n  /**\n   * Gets the string representation of an object. This is equivalent to\n   * calling `toString()` on the object value.\n   */\n  async stringifyObject(cdpRemoteObject) {\n    const {\n      result\n    } = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {\n      functionDeclaration: String(remoteObject => String(remoteObject)),\n      awaitPromise: false,\n      arguments: [cdpRemoteObject],\n      returnByValue: true,\n      executionContextId: this.executionContextId\n    });\n    return result.value;\n  }\n  async callFunction(functionDeclaration, awaitPromise, thisLocalValue = {\n    type: 'undefined'\n  }, argumentsLocalValues = [], resultOwnership = \"none\" /* Script.ResultOwnership.None */, serializationOptions = {}, userActivation = false) {\n    const callFunctionAndSerializeScript = `(...args) => {\n      function callFunction(f, args) {\n        const deserializedThis = args.shift();\n        const deserializedArgs = args;\n        return f.apply(deserializedThis, deserializedArgs);\n      }\n      return callFunction((\n        ${functionDeclaration}\n      ), args);\n    }`;\n    const thisAndArgumentsList = [await this.deserializeForCdp(thisLocalValue), ...(await Promise.all(argumentsLocalValues.map(async argumentLocalValue => await this.deserializeForCdp(argumentLocalValue))))];\n    let cdpCallFunctionResult;\n    try {\n      cdpCallFunctionResult = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {\n        functionDeclaration: callFunctionAndSerializeScript,\n        awaitPromise,\n        arguments: thisAndArgumentsList,\n        serializationOptions: _getSerializationOptions.call(Realm, \"deep\" /* Protocol.Runtime.SerializationOptionsSerialization.Deep */, serializationOptions),\n        executionContextId: this.executionContextId,\n        userGesture: userActivation\n      });\n    } catch (error) {\n      // Heuristic to determine if the problem is in the argument.\n      // The check can be done on the `deserialization` step, but this approach\n      // helps to save round-trips.\n      if (error.code === -32000 /* CdpErrorConstants.GENERIC_ERROR */ && ['Could not find object with given id', 'Argument should belong to the same JavaScript world as target object', 'Invalid remote object id'].includes(error.message)) {\n        throw new protocol_js_1.NoSuchHandleException('Handle was not found.');\n      }\n      throw error;\n    }\n    if (cdpCallFunctionResult.exceptionDetails) {\n      return await _assertClassBrand(_Realm_brand, this, _getExceptionResult).call(this, cdpCallFunctionResult.exceptionDetails, 1, resultOwnership);\n    }\n    return {\n      type: 'success',\n      result: this.cdpToBidiValue(cdpCallFunctionResult, resultOwnership),\n      realm: this.realmId\n    };\n  }\n  async deserializeForCdp(localValue) {\n    if ('handle' in localValue && localValue.handle) {\n      return {\n        objectId: localValue.handle\n      };\n      // We tried to find a handle value but failed\n      // This allows us to have exhaustive switch on `localValue.type`\n    } else if ('handle' in localValue || 'sharedId' in localValue) {\n      throw new protocol_js_1.NoSuchHandleException('Handle was not found.');\n    }\n    switch (localValue.type) {\n      case 'undefined':\n        return {\n          unserializableValue: 'undefined'\n        };\n      case 'null':\n        return {\n          unserializableValue: 'null'\n        };\n      case 'string':\n        return {\n          value: localValue.value\n        };\n      case 'number':\n        if (localValue.value === 'NaN') {\n          return {\n            unserializableValue: 'NaN'\n          };\n        } else if (localValue.value === '-0') {\n          return {\n            unserializableValue: '-0'\n          };\n        } else if (localValue.value === 'Infinity') {\n          return {\n            unserializableValue: 'Infinity'\n          };\n        } else if (localValue.value === '-Infinity') {\n          return {\n            unserializableValue: '-Infinity'\n          };\n        }\n        return {\n          value: localValue.value\n        };\n      case 'boolean':\n        return {\n          value: Boolean(localValue.value)\n        };\n      case 'bigint':\n        return {\n          unserializableValue: `BigInt(${JSON.stringify(localValue.value)})`\n        };\n      case 'date':\n        return {\n          unserializableValue: `new Date(Date.parse(${JSON.stringify(localValue.value)}))`\n        };\n      case 'regexp':\n        return {\n          unserializableValue: `new RegExp(${JSON.stringify(localValue.value.pattern)}, ${JSON.stringify(localValue.value.flags)})`\n        };\n      case 'map':\n        {\n          // TODO: If none of the nested keys and values has a remote\n          // reference, serialize to `unserializableValue` without CDP roundtrip.\n          const keyValueArray = await _assertClassBrand(_Realm_brand, this, _flattenKeyValuePairs).call(this, localValue.value);\n          const {\n            result\n          } = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {\n            functionDeclaration: String((...args) => {\n              const result = new Map();\n              for (let i = 0; i < args.length; i += 2) {\n                result.set(args[i], args[i + 1]);\n              }\n              return result;\n            }),\n            awaitPromise: false,\n            arguments: keyValueArray,\n            returnByValue: false,\n            executionContextId: this.executionContextId\n          });\n          // TODO(#375): Release `result.objectId` after using.\n          return {\n            objectId: result.objectId\n          };\n        }\n      case 'object':\n        {\n          // TODO: If none of the nested keys and values has a remote\n          // reference, serialize to `unserializableValue` without CDP roundtrip.\n          const keyValueArray = await _assertClassBrand(_Realm_brand, this, _flattenKeyValuePairs).call(this, localValue.value);\n          const {\n            result\n          } = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {\n            functionDeclaration: String((...args) => {\n              const result = {};\n              for (let i = 0; i < args.length; i += 2) {\n                // Key should be either `string`, `number`, or `symbol`.\n                const key = args[i];\n                result[key] = args[i + 1];\n              }\n              return result;\n            }),\n            awaitPromise: false,\n            arguments: keyValueArray,\n            returnByValue: false,\n            executionContextId: this.executionContextId\n          });\n          // TODO(#375): Release `result.objectId` after using.\n          return {\n            objectId: result.objectId\n          };\n        }\n      case 'array':\n        {\n          // TODO: If none of the nested items has a remote reference,\n          // serialize to `unserializableValue` without CDP roundtrip.\n          const args = await _assertClassBrand(_Realm_brand, this, _flattenValueList).call(this, localValue.value);\n          const {\n            result\n          } = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {\n            functionDeclaration: String((...args) => args),\n            awaitPromise: false,\n            arguments: args,\n            returnByValue: false,\n            executionContextId: this.executionContextId\n          });\n          // TODO(#375): Release `result.objectId` after using.\n          return {\n            objectId: result.objectId\n          };\n        }\n      case 'set':\n        {\n          // TODO: if none of the nested items has a remote reference,\n          // serialize to `unserializableValue` without CDP roundtrip.\n          const args = await _assertClassBrand(_Realm_brand, this, _flattenValueList).call(this, localValue.value);\n          const {\n            result\n          } = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {\n            functionDeclaration: String((...args) => new Set(args)),\n            awaitPromise: false,\n            arguments: args,\n            returnByValue: false,\n            executionContextId: this.executionContextId\n          });\n          // TODO(#375): Release `result.objectId` after using.\n          return {\n            objectId: result.objectId\n          };\n        }\n      case 'channel':\n        {\n          const channelProxy = new ChannelProxy_js_1.ChannelProxy(localValue.value, _classPrivateFieldGet(_logger, this));\n          const channelProxySendMessageHandle = await channelProxy.init(this, _classPrivateFieldGet(_eventManager, this));\n          return {\n            objectId: channelProxySendMessageHandle\n          };\n        }\n      // TODO(#375): Dispose of nested objects.\n    }\n    // Intentionally outside to handle unknown types\n    throw new Error(`Value ${JSON.stringify(localValue)} is not deserializable.`);\n  }\n  async disown(handle) {\n    // Disowning an object from different realm does nothing.\n    if (_classPrivateFieldGet(_realmStorage, this).knownHandlesToRealmMap.get(handle) !== this.realmId) {\n      return;\n    }\n    await _assertClassBrand(_Realm_brand, this, _releaseObject).call(this, handle);\n    _classPrivateFieldGet(_realmStorage, this).knownHandlesToRealmMap.delete(handle);\n  }\n  dispose() {\n    _assertClassBrand(_Realm_brand, this, _registerEvent).call(this, {\n      type: 'event',\n      method: protocol_js_1.ChromiumBidi.Script.EventNames.RealmDestroyed,\n      params: {\n        realm: this.realmId\n      }\n    });\n  }\n}\n_Realm = Realm;\nfunction _registerEvent(event) {\n  if (this.associatedBrowsingContexts.length === 0) {\n    _classPrivateFieldGet(_eventManager, this).registerEvent(event, null);\n  } else {\n    for (const browsingContext of this.associatedBrowsingContexts) {\n      _classPrivateFieldGet(_eventManager, this).registerEvent(event, browsingContext.id);\n    }\n  }\n}\nfunction _cdpRemoteObjectToCallArgument(cdpRemoteObject) {\n  if (cdpRemoteObject.objectId !== undefined) {\n    return {\n      objectId: cdpRemoteObject.objectId\n    };\n  }\n  if (cdpRemoteObject.unserializableValue !== undefined) {\n    return {\n      unserializableValue: cdpRemoteObject.unserializableValue\n    };\n  }\n  return {\n    value: cdpRemoteObject.value\n  };\n}\nasync function _flattenKeyValuePairs(mappingLocalValue) {\n  const keyValueArray = await Promise.all(mappingLocalValue.map(async ([key, value]) => {\n    let keyArg;\n    if (typeof key === 'string') {\n      // Key is a string.\n      keyArg = {\n        value: key\n      };\n    } else {\n      // Key is a serialized value.\n      keyArg = await this.deserializeForCdp(key);\n    }\n    const valueArg = await this.deserializeForCdp(value);\n    return [keyArg, valueArg];\n  }));\n  return keyValueArray.flat();\n}\nasync function _flattenValueList(listLocalValue) {\n  return await Promise.all(listLocalValue.map(localValue => this.deserializeForCdp(localValue)));\n}\nasync function _serializeCdpExceptionDetails(cdpExceptionDetails, lineOffset, resultOwnership) {\n  const callFrames = cdpExceptionDetails.stackTrace?.callFrames.map(frame => ({\n    url: frame.url,\n    functionName: frame.functionName,\n    lineNumber: frame.lineNumber - lineOffset,\n    columnNumber: frame.columnNumber\n  })) ?? [];\n  // Exception should always be there.\n  const exception = cdpExceptionDetails.exception;\n  return {\n    exception: await this.serializeCdpObject(exception, resultOwnership),\n    columnNumber: cdpExceptionDetails.columnNumber,\n    lineNumber: cdpExceptionDetails.lineNumber - lineOffset,\n    stackTrace: {\n      callFrames\n    },\n    text: (await this.stringifyObject(exception)) || cdpExceptionDetails.text\n  };\n}\nasync function _getExceptionResult(exceptionDetails, lineOffset, resultOwnership) {\n  return {\n    exceptionDetails: await _assertClassBrand(_Realm_brand, this, _serializeCdpExceptionDetails).call(this, exceptionDetails, lineOffset, resultOwnership),\n    realm: this.realmId,\n    type: 'exception'\n  };\n}\nfunction _getSerializationOptions(serialization, serializationOptions) {\n  return {\n    serialization,\n    additionalParameters: _getAdditionalSerializationParameters.call(_Realm, serializationOptions),\n    ..._getMaxObjectDepth.call(_Realm, serializationOptions)\n  };\n}\nfunction _getAdditionalSerializationParameters(serializationOptions) {\n  const additionalParameters = {};\n  if (serializationOptions.maxDomDepth !== undefined) {\n    additionalParameters['maxNodeDepth'] = serializationOptions.maxDomDepth === null ? 1000 : serializationOptions.maxDomDepth;\n  }\n  if (serializationOptions.includeShadowTree !== undefined) {\n    additionalParameters['includeShadowTree'] = serializationOptions.includeShadowTree;\n  }\n  return additionalParameters;\n}\nfunction _getMaxObjectDepth(serializationOptions) {\n  return serializationOptions.maxObjectDepth === undefined || serializationOptions.maxObjectDepth === null ? {} : {\n    maxDepth: serializationOptions.maxObjectDepth\n  };\n}\nasync function _releaseObject(handle) {\n  try {\n    await this.cdpClient.sendCommand('Runtime.releaseObject', {\n      objectId: handle\n    });\n  } catch (error) {\n    // Heuristic to determine if the problem is in the unknown handler.\n    // Ignore the error if so.\n    if (!(error.code === -32000 /* CdpErrorConstants.GENERIC_ERROR */ && error.message === 'Invalid remote object id')) {\n      throw error;\n    }\n  }\n}\nexports.Realm = Realm;","map":{"version":3,"names":["protocol_js_1","require","log_js_1","uuid_js_1","ChannelProxy_js_1","_cdpClient","WeakMap","_eventManager","_executionContextId","_logger","_origin","_realmId","_realmStorage","_Realm_brand","WeakSet","Realm","constructor","cdpClient","eventManager","executionContextId","logger","origin","realmId","realmStorage","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","_classPrivateFieldGet","addRealm","cdpToBidiValue","cdpValue","resultOwnership","bidiValue","serializeForBiDi","result","deepSerializedValue","Map","objectId","handle","knownHandlesToRealmMap","set","_assertClassBrand","_releaseObject","call","catch","error","LogType","debugError","internalIdMap","Object","hasOwn","weakLocalObjectReference","has","uuidv4","internalId","get","type","value","undefined","includes","i","source","realm","baseInfo","evaluate","expression","awaitPromise","serializationOptions","userActivation","includeCommandLineApi","cdpEvaluateResult","sendCommand","contextId","_getSerializationOptions","userGesture","includeCommandLineAPI","exceptionDetails","_getExceptionResult","initialize","_registerEvent","method","ChromiumBidi","Script","EventNames","RealmCreated","params","realmInfo","serializeCdpObject","cdpRemoteObject","argument","_cdpRemoteObjectToCallArgument","functionDeclaration","String","remoteObject","arguments","serialization","stringifyObject","returnByValue","callFunction","thisLocalValue","argumentsLocalValues","callFunctionAndSerializeScript","thisAndArgumentsList","deserializeForCdp","Promise","all","map","argumentLocalValue","cdpCallFunctionResult","code","message","NoSuchHandleException","localValue","unserializableValue","Boolean","JSON","stringify","pattern","flags","keyValueArray","_flattenKeyValuePairs","args","length","key","_flattenValueList","Set","channelProxy","ChannelProxy","channelProxySendMessageHandle","init","Error","disown","delete","dispose","RealmDestroyed","_Realm","event","associatedBrowsingContexts","registerEvent","browsingContext","id","mappingLocalValue","keyArg","valueArg","flat","listLocalValue","_serializeCdpExceptionDetails","cdpExceptionDetails","lineOffset","callFrames","stackTrace","frame","url","functionName","lineNumber","columnNumber","exception","text","additionalParameters","_getAdditionalSerializationParameters","_getMaxObjectDepth","maxDomDepth","includeShadowTree","maxObjectDepth","maxDepth","exports"],"sources":["../../../../../src/bidiMapper/modules/script/Realm.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}