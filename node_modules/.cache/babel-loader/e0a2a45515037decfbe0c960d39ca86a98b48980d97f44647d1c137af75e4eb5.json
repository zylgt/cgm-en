{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2022 Google Inc.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport mitt from '../../third_party/mitt/mitt.js';\nimport { disposeSymbol } from '../util/disposable.js';\n/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act\n * accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and\n * {@link EventEmitter.off | off} to bind\n * and unbind to event listeners.\n *\n * @public\n */\nvar _emitter = /*#__PURE__*/new WeakMap();\nvar _handlers = /*#__PURE__*/new WeakMap();\nexport class EventEmitter {\n  /**\n   * If you pass an emitter, the returned emitter will wrap the passed emitter.\n   *\n   * @internal\n   */\n  constructor(emitter = mitt(new Map())) {\n    _classPrivateFieldInitSpec(this, _emitter, void 0);\n    _classPrivateFieldInitSpec(this, _handlers, new Map());\n    _classPrivateFieldSet(_emitter, this, emitter);\n  }\n  /**\n   * Bind an event listener to fire when an event occurs.\n   * @param type - the event type you'd like to listen to. Can be a string or symbol.\n   * @param handler - the function to be called when the event occurs.\n   * @returns `this` to enable you to chain method calls.\n   */\n  on(type, handler) {\n    const handlers = _classPrivateFieldGet(_handlers, this).get(type);\n    if (handlers === undefined) {\n      _classPrivateFieldGet(_handlers, this).set(type, [handler]);\n    } else {\n      handlers.push(handler);\n    }\n    _classPrivateFieldGet(_emitter, this).on(type, handler);\n    return this;\n  }\n  /**\n   * Remove an event listener from firing.\n   * @param type - the event type you'd like to stop listening to.\n   * @param handler - the function that should be removed.\n   * @returns `this` to enable you to chain method calls.\n   */\n  off(type, handler) {\n    const handlers = _classPrivateFieldGet(_handlers, this).get(type) ?? [];\n    if (handler === undefined) {\n      for (const handler of handlers) {\n        _classPrivateFieldGet(_emitter, this).off(type, handler);\n      }\n      _classPrivateFieldGet(_handlers, this).delete(type);\n      return this;\n    }\n    const index = handlers.lastIndexOf(handler);\n    if (index > -1) {\n      _classPrivateFieldGet(_emitter, this).off(type, ...handlers.splice(index, 1));\n    }\n    return this;\n  }\n  /**\n   * Emit an event and call any associated listeners.\n   *\n   * @param type - the event you'd like to emit\n   * @param eventData - any data you'd like to emit with the event\n   * @returns `true` if there are any listeners, `false` if there are not.\n   */\n  emit(type, event) {\n    _classPrivateFieldGet(_emitter, this).emit(type, event);\n    return this.listenerCount(type) > 0;\n  }\n  /**\n   * Like `on` but the listener will only be fired once and then it will be removed.\n   * @param type - the event you'd like to listen to\n   * @param handler - the handler function to run when the event occurs\n   * @returns `this` to enable you to chain method calls.\n   */\n  once(type, handler) {\n    const onceHandler = eventData => {\n      handler(eventData);\n      this.off(type, onceHandler);\n    };\n    return this.on(type, onceHandler);\n  }\n  /**\n   * Gets the number of listeners for a given event.\n   *\n   * @param type - the event to get the listener count for\n   * @returns the number of listeners bound to the given event\n   */\n  listenerCount(type) {\n    return _classPrivateFieldGet(_handlers, this).get(type)?.length || 0;\n  }\n  /**\n   * Removes all listeners. If given an event argument, it will remove only\n   * listeners for that event.\n   *\n   * @param type - the event to remove listeners for.\n   * @returns `this` to enable you to chain method calls.\n   */\n  removeAllListeners(type) {\n    if (type !== undefined) {\n      return this.off(type);\n    }\n    this[disposeSymbol]();\n    return this;\n  }\n  /**\n   * @internal\n   */\n  [disposeSymbol]() {\n    for (const [type, handlers] of _classPrivateFieldGet(_handlers, this)) {\n      for (const handler of handlers) {\n        _classPrivateFieldGet(_emitter, this).off(type, handler);\n      }\n    }\n    _classPrivateFieldGet(_handlers, this).clear();\n  }\n}\n/**\n * @internal\n */\nvar _target = /*#__PURE__*/new WeakMap();\nvar _type = /*#__PURE__*/new WeakMap();\nvar _handler = /*#__PURE__*/new WeakMap();\nexport class EventSubscription {\n  constructor(target, type, handler) {\n    _classPrivateFieldInitSpec(this, _target, void 0);\n    _classPrivateFieldInitSpec(this, _type, void 0);\n    _classPrivateFieldInitSpec(this, _handler, void 0);\n    _classPrivateFieldSet(_target, this, target);\n    _classPrivateFieldSet(_type, this, type);\n    _classPrivateFieldSet(_handler, this, handler);\n    _classPrivateFieldGet(_target, this).on(_classPrivateFieldGet(_type, this), _classPrivateFieldGet(_handler, this));\n  }\n  [disposeSymbol]() {\n    _classPrivateFieldGet(_target, this).off(_classPrivateFieldGet(_type, this), _classPrivateFieldGet(_handler, this));\n  }\n}","map":{"version":3,"names":["mitt","disposeSymbol","_emitter","WeakMap","_handlers","EventEmitter","constructor","emitter","Map","_classPrivateFieldInitSpec","_classPrivateFieldSet","on","type","handler","handlers","_classPrivateFieldGet","get","undefined","set","push","off","delete","index","lastIndexOf","splice","emit","event","listenerCount","once","onceHandler","eventData","length","removeAllListeners","clear","_target","_type","_handler","EventSubscription","target"],"sources":["../../../../src/common/EventEmitter.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}