{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simpleGroup = exports.spanLeadingZeroes = exports.spanAll = exports.spanAllZeroes = void 0;\nconst sprintf_js_1 = require(\"sprintf-js\");\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\nfunction spanAllZeroes(s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n}\nexports.spanAllZeroes = spanAllZeroes;\n/**\n * @returns {String} the string with each character contained in a <span>\n */\nfunction spanAll(s, offset = 0) {\n  const letters = s.split('');\n  return letters.map((n, i) => (0, sprintf_js_1.sprintf)('<span class=\"digit value-%s position-%d\">%s</span>', n, i + offset, spanAllZeroes(n)) // XXX Use #base-2 .value-0 instead?\n  ).join('');\n}\nexports.spanAll = spanAll;\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\nfunction spanLeadingZeroes(address) {\n  const groups = address.split(':');\n  return groups.map(g => spanLeadingZeroesSimple(g)).join(':');\n}\nexports.spanLeadingZeroes = spanLeadingZeroes;\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\nfunction simpleGroup(addressString, offset = 0) {\n  const groups = addressString.split(':');\n  return groups.map((g, i) => {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n    return (0, sprintf_js_1.sprintf)('<span class=\"hover-group group-%d\">%s</span>', i + offset, spanLeadingZeroesSimple(g));\n  });\n}\nexports.simpleGroup = simpleGroup;","map":{"version":3,"names":["sprintf_js_1","require","spanAllZeroes","s","replace","exports","spanAll","offset","letters","split","map","n","i","sprintf","join","spanLeadingZeroesSimple","group","spanLeadingZeroes","address","groups","g","simpleGroup","addressString","test"],"sources":["../../src/v6/helpers.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,YAAA,GAAAC,OAAA;AAEA;;;AAGA,SAAgBC,aAAaA,CAACC,CAAS;EACrC,OAAOA,CAAC,CAACC,OAAO,CAAC,OAAO,EAAE,8BAA8B,CAAC;AAC3D;AAFAC,OAAA,CAAAH,aAAA,GAAAA,aAAA;AAIA;;;AAGA,SAAgBI,OAAOA,CAACH,CAAS,EAAEI,MAAA,GAAiB,CAAC;EACnD,MAAMC,OAAO,GAAGL,CAAC,CAACM,KAAK,CAAC,EAAE,CAAC;EAE3B,OAAOD,OAAO,CACXE,GAAG,CACF,CAACC,CAAC,EAAEC,CAAC,KACH,IAAAZ,YAAA,CAAAa,OAAO,EACL,oDAAoD,EACpDF,CAAC,EACDC,CAAC,GAAGL,MAAM,EACVL,aAAa,CAACS,CAAC,CAAC,CACjB,CAAC;GACL,CACAG,IAAI,CAAC,EAAE,CAAC;AACb;AAdAT,OAAA,CAAAC,OAAA,GAAAA,OAAA;AAgBA,SAASS,uBAAuBA,CAACC,KAAa;EAC5C,OAAOA,KAAK,CAACZ,OAAO,CAAC,OAAO,EAAE,8BAA8B,CAAC;AAC/D;AAEA;;;AAGA,SAAgBa,iBAAiBA,CAACC,OAAe;EAC/C,MAAMC,MAAM,GAAGD,OAAO,CAACT,KAAK,CAAC,GAAG,CAAC;EAEjC,OAAOU,MAAM,CAACT,GAAG,CAAEU,CAAC,IAAKL,uBAAuB,CAACK,CAAC,CAAC,CAAC,CAACN,IAAI,CAAC,GAAG,CAAC;AAChE;AAJAT,OAAA,CAAAY,iBAAA,GAAAA,iBAAA;AAMA;;;;AAIA,SAAgBI,WAAWA,CAACC,aAAqB,EAAEf,MAAA,GAAiB,CAAC;EACnE,MAAMY,MAAM,GAAGG,aAAa,CAACb,KAAK,CAAC,GAAG,CAAC;EAEvC,OAAOU,MAAM,CAACT,GAAG,CAAC,CAACU,CAAC,EAAER,CAAC,KAAI;IACzB,IAAI,UAAU,CAACW,IAAI,CAACH,CAAC,CAAC,EAAE;MACtB,OAAOA,CAAC;;IAGV,OAAO,IAAApB,YAAA,CAAAa,OAAO,EACZ,8CAA8C,EAC9CD,CAAC,GAAGL,MAAM,EACVQ,uBAAuB,CAACK,CAAC,CAAC,CAC3B;EACH,CAAC,CAAC;AACJ;AAdAf,OAAA,CAAAgB,WAAA,GAAAA,WAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}