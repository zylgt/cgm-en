{"ast":null,"code":"import { Message } from \"element-ui\";\nvar socket = null; //实例对象\nvar lockReconnect = false; //是否真正建立连接\nvar timeoutnum = null; //重连时间间隔\nvar port = [8971, 8972, 8973, 8974, 8975, 8976, 8977, 8978, 8979, 8980]; //端口号\nvar repeat = 0; //重连次数\nvar status = 0; //连接状态 0开始建立连接 1连接成功 2交换秘钥成功 3连接失败 \n\nconst initwebSocket = async () => {\n  if (\"WebSocket\" in window) {\n    var wsUrl = 'ws://ivd.cgm3.com:' + port[repeat] + '/uploader';\n    console.log(wsUrl, '连接地址');\n    socket = new WebSocket(wsUrl);\n    status = 0;\n    socket.onerror = webSocketOnError;\n    socket.onmessage = webSocketOnMessage;\n    socket.onclose = closeWebsocket;\n    socket.onopen = openWebsocket;\n  } else {\n    Message.error({\n      showClose: true,\n      message: '您的浏览器不支持websocket，请更换Chrome或者Firefox'\n    });\n  }\n};\n\n//建立连接\nconst openWebsocket = e => {\n  console.log(e, '已连接');\n  lockReconnect = true;\n  status = 1;\n};\n// 重新连接\nconst reconnect = () => {\n  if (lockReconnect) {\n    return;\n  }\n  if (repeat >= 9) {\n    status = 2;\n    console.log('WebSocket 连接失败，端口都不被连接');\n  } else {\n    console.log(`正在尝试第 ${repeat} 次重连...`);\n    setTimeout(function () {\n      repeat++;\n      initwebSocket();\n    }, timeoutnum);\n  }\n};\nconst sendWebsocket = e => {\n  socket.send(`我发消息了`);\n};\nconst webSocketOnError = e => {\n  console.log('发生错误', e);\n  reconnect();\n};\nconst webSocketOnMessage = e => {\n  console.log('收到消息', e);\n};\nconst closeWebsocket = e => {\n  console.log('连接已关闭', e);\n  lockReconnect = false;\n};\n//断开连接\nconst close = () => {\n  //WebSocket对象也有发送和关闭的两个方法，只需要在自定义方法中分别调用send()和close()即可实现。\n  socket.close();\n};\nexport default {\n  initwebSocket,\n  status\n};","map":{"version":3,"names":["Message","socket","lockReconnect","timeoutnum","port","repeat","status","initwebSocket","window","wsUrl","console","log","WebSocket","onerror","webSocketOnError","onmessage","webSocketOnMessage","onclose","closeWebsocket","onopen","openWebsocket","error","showClose","message","e","reconnect","setTimeout","sendWebsocket","send","close"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/webSocket.js"],"sourcesContent":["\nimport { Message } from \"element-ui\";\nvar socket = null; //实例对象\nvar lockReconnect = false; //是否真正建立连接\nvar timeoutnum = null; //重连时间间隔\nvar port = [8971,8972,8973,8974,8975,8976,8977,8978,8979,8980]; //端口号\nvar repeat = 0; //重连次数\nvar status = 0; //连接状态 0开始建立连接 1连接成功 2交换秘钥成功 3连接失败 \n\nconst initwebSocket = async()=>{\n    if(\"WebSocket\" in window){\n        var wsUrl = 'ws://ivd.cgm3.com:'+port[repeat]+'/uploader'\n        console.log(wsUrl,'连接地址')\n        socket = new WebSocket(wsUrl);\n        status = 0\n        socket.onerror = webSocketOnError;\n        socket.onmessage = webSocketOnMessage;\n        socket.onclose = closeWebsocket;\n        socket.onopen = openWebsocket;\n    }else{\n        Message.error({\n            showClose: true,\n            message: '您的浏览器不支持websocket，请更换Chrome或者Firefox'\n        });\n    }\n}\n\n\n//建立连接\nconst openWebsocket = (e) => {\n    console.log(e,'已连接')\n    lockReconnect = true\n    status = 1\n   \n}\n// 重新连接\nconst reconnect = () =>{\n    if(lockReconnect){\n        return ;\n    }\n    if(repeat>=9){\n        status = 2\n\n        console.log('WebSocket 连接失败，端口都不被连接');\n    }else{\n        console.log(`正在尝试第 ${repeat} 次重连...`);\n        setTimeout(function(){\n            repeat++\n            initwebSocket()\n        },timeoutnum)\n    }\n}\n\n\nconst sendWebsocket =(e) =>{\n    socket.send(`我发消息了`);\n}\n   \n\nconst webSocketOnError =(e) => {\n    console.log('发生错误',e)\n    reconnect();\n    \n}  \n\nconst webSocketOnMessage=(e) => {\n    console.log('收到消息',e)\n}\n\nconst closeWebsocket=(e) => {\n    console.log('连接已关闭',e)\n    lockReconnect = false\n} \n//断开连接\nconst close =() => {\n    //WebSocket对象也有发送和关闭的两个方法，只需要在自定义方法中分别调用send()和close()即可实现。\n      socket.close();\n}    \n\nexport default{initwebSocket,status}"],"mappings":"AACA,SAASA,OAAO,QAAQ,YAAY;AACpC,IAAIC,MAAM,GAAG,IAAI,CAAC,CAAC;AACnB,IAAIC,aAAa,GAAG,KAAK,CAAC,CAAC;AAC3B,IAAIC,UAAU,GAAG,IAAI,CAAC,CAAC;AACvB,IAAIC,IAAI,GAAG,CAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,CAAC,CAAC,CAAC;AAChE,IAAIC,MAAM,GAAG,CAAC,CAAC,CAAC;AAChB,IAAIC,MAAM,GAAG,CAAC,CAAC,CAAC;;AAEhB,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAS;EAC3B,IAAG,WAAW,IAAIC,MAAM,EAAC;IACrB,IAAIC,KAAK,GAAG,oBAAoB,GAACL,IAAI,CAACC,MAAM,CAAC,GAAC,WAAW;IACzDK,OAAO,CAACC,GAAG,CAACF,KAAK,EAAC,MAAM,CAAC;IACzBR,MAAM,GAAG,IAAIW,SAAS,CAACH,KAAK,CAAC;IAC7BH,MAAM,GAAG,CAAC;IACVL,MAAM,CAACY,OAAO,GAAGC,gBAAgB;IACjCb,MAAM,CAACc,SAAS,GAAGC,kBAAkB;IACrCf,MAAM,CAACgB,OAAO,GAAGC,cAAc;IAC/BjB,MAAM,CAACkB,MAAM,GAAGC,aAAa;EACjC,CAAC,MAAI;IACDpB,OAAO,CAACqB,KAAK,CAAC;MACVC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;IACb,CAAC,CAAC;EACN;AACJ,CAAC;;AAGD;AACA,MAAMH,aAAa,GAAII,CAAC,IAAK;EACzBd,OAAO,CAACC,GAAG,CAACa,CAAC,EAAC,KAAK,CAAC;EACpBtB,aAAa,GAAG,IAAI;EACpBI,MAAM,GAAG,CAAC;AAEd,CAAC;AACD;AACA,MAAMmB,SAAS,GAAGA,CAAA,KAAK;EACnB,IAAGvB,aAAa,EAAC;IACb;EACJ;EACA,IAAGG,MAAM,IAAE,CAAC,EAAC;IACTC,MAAM,GAAG,CAAC;IAEVI,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACzC,CAAC,MAAI;IACDD,OAAO,CAACC,GAAG,CAAE,SAAQN,MAAO,SAAQ,CAAC;IACrCqB,UAAU,CAAC,YAAU;MACjBrB,MAAM,EAAE;MACRE,aAAa,CAAC,CAAC;IACnB,CAAC,EAACJ,UAAU,CAAC;EACjB;AACJ,CAAC;AAGD,MAAMwB,aAAa,GAAGH,CAAC,IAAI;EACvBvB,MAAM,CAAC2B,IAAI,CAAE,OAAM,CAAC;AACxB,CAAC;AAGD,MAAMd,gBAAgB,GAAGU,CAAC,IAAK;EAC3Bd,OAAO,CAACC,GAAG,CAAC,MAAM,EAACa,CAAC,CAAC;EACrBC,SAAS,CAAC,CAAC;AAEf,CAAC;AAED,MAAMT,kBAAkB,GAAEQ,CAAC,IAAK;EAC5Bd,OAAO,CAACC,GAAG,CAAC,MAAM,EAACa,CAAC,CAAC;AACzB,CAAC;AAED,MAAMN,cAAc,GAAEM,CAAC,IAAK;EACxBd,OAAO,CAACC,GAAG,CAAC,OAAO,EAACa,CAAC,CAAC;EACtBtB,aAAa,GAAG,KAAK;AACzB,CAAC;AACD;AACA,MAAM2B,KAAK,GAAEA,CAAA,KAAM;EACf;EACE5B,MAAM,CAAC4B,KAAK,CAAC,CAAC;AACpB,CAAC;AAED,eAAc;EAACtB,aAAa;EAACD;AAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}