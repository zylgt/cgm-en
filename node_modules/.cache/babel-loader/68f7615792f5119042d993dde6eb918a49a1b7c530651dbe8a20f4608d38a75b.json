{"ast":null,"code":"import Socket from '@/utils/webSocket';\nimport store from '@/store';\nimport socketLog from '@/utils/socketLog';\n\n// 处理数据\nexport function handelMessage(res) {\n  switch (res.path) {\n    case 'getAppInfo':\n      //  判断是否有更新，没有更新进行下一步\n      Socket.getReaderList();\n      break;\n    case 'getReaderDevices':\n      //获取redaer列表，如果只有一台直接连接，否则选取连接\n      store.dispatch('setDeviceList', res.data.devices);\n      store.dispatch('setUpStep', 3);\n      if (res.data.devices.length == 1) {\n        store.dispatch('setReaderConnect', 0);\n        Socket.connectReader(res.data.devices[0]);\n      }\n      break;\n    case 'connectReaderDevice':\n      //连接reader\n\n      store.dispatch('setReaderConnect', 1);\n      Socket.getReaderInfo();\n      break;\n    case 'getReaderDeviceInfo':\n      //连接reader\n      // 判断reader时间与当前时间差值为1000，则同步时间\n      let timestamp = Math.floor(Date.now() / 1000);\n      if (Math.abs(timestamp - res.data.currentTime) >= 1000) {\n        Socket.setTime({\n          zone: +8,\n          timestamp: timestamp\n        });\n      }\n      break;\n  }\n}","map":{"version":3,"names":["Socket","store","socketLog","handelMessage","res","path","getReaderList","dispatch","data","devices","length","connectReader","getReaderInfo","timestamp","Math","floor","Date","now","abs","currentTime","setTime","zone"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/socketMessage.js"],"sourcesContent":["import Socket from '@/utils/webSocket'\nimport store from '@/store'\nimport socketLog from '@/utils/socketLog'\n\n// 处理数据\nexport function handelMessage (res) {\n    switch(res.path){\n        case 'getAppInfo':\n            //  判断是否有更新，没有更新进行下一步\n            Socket.getReaderList()\n            break;\n        case 'getReaderDevices': //获取redaer列表，如果只有一台直接连接，否则选取连接\n            store.dispatch('setDeviceList',res.data.devices)\n            store.dispatch('setUpStep',3)\n            if(res.data.devices.length==1){\n                store.dispatch('setReaderConnect',0)\n                Socket.connectReader(res.data.devices[0])\n            }\n            break;\n        case 'connectReaderDevice': //连接reader\n            \n            store.dispatch('setReaderConnect',1)\n            Socket.getReaderInfo()\n            break;\n        case 'getReaderDeviceInfo': //连接reader\n            // 判断reader时间与当前时间差值为1000，则同步时间\n            let timestamp = Math.floor(Date.now() / 1000)\n            if( Math.abs(timestamp-res.data.currentTime)>=1000){\n                Socket.setTime({zone:+8,timestamp:timestamp})\n            }\n            break;\n    }\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,mBAAmB;AACtC,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,SAAS,MAAM,mBAAmB;;AAEzC;AACA,OAAO,SAASC,aAAaA,CAAEC,GAAG,EAAE;EAChC,QAAOA,GAAG,CAACC,IAAI;IACX,KAAK,YAAY;MACb;MACAL,MAAM,CAACM,aAAa,CAAC,CAAC;MACtB;IACJ,KAAK,kBAAkB;MAAE;MACrBL,KAAK,CAACM,QAAQ,CAAC,eAAe,EAACH,GAAG,CAACI,IAAI,CAACC,OAAO,CAAC;MAChDR,KAAK,CAACM,QAAQ,CAAC,WAAW,EAAC,CAAC,CAAC;MAC7B,IAAGH,GAAG,CAACI,IAAI,CAACC,OAAO,CAACC,MAAM,IAAE,CAAC,EAAC;QAC1BT,KAAK,CAACM,QAAQ,CAAC,kBAAkB,EAAC,CAAC,CAAC;QACpCP,MAAM,CAACW,aAAa,CAACP,GAAG,CAACI,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MAC7C;MACA;IACJ,KAAK,qBAAqB;MAAE;;MAExBR,KAAK,CAACM,QAAQ,CAAC,kBAAkB,EAAC,CAAC,CAAC;MACpCP,MAAM,CAACY,aAAa,CAAC,CAAC;MACtB;IACJ,KAAK,qBAAqB;MAAE;MACxB;MACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;MAC7C,IAAIH,IAAI,CAACI,GAAG,CAACL,SAAS,GAACT,GAAG,CAACI,IAAI,CAACW,WAAW,CAAC,IAAE,IAAI,EAAC;QAC/CnB,MAAM,CAACoB,OAAO,CAAC;UAACC,IAAI,EAAC,CAAC,CAAC;UAACR,SAAS,EAACA;QAAS,CAAC,CAAC;MACjD;MACA;EACR;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}