{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateMethodInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _assertClassBrand = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/assertClassBrand.js\").default;\nvar _classPrivateFieldGet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js\").default;\nvar _classPrivateFieldSet = require(\"/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/node_modules/@babel/runtime/helpers/classPrivateFieldSet2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkStorage = void 0;\nconst protocol_js_1 = require(\"../../../protocol/protocol.js\");\nconst uuid_js_1 = require(\"../../../utils/uuid.js\");\nconst NetworkRequest_js_1 = require(\"./NetworkRequest.js\");\nconst NetworkUtils_js_1 = require(\"./NetworkUtils.js\");\n/** Stores network and intercept maps. */\nvar _eventManager = /*#__PURE__*/new WeakMap();\nvar _logger = /*#__PURE__*/new WeakMap();\nvar _requests = /*#__PURE__*/new WeakMap();\nvar _intercepts = /*#__PURE__*/new WeakMap();\nvar _NetworkStorage_brand = /*#__PURE__*/new WeakSet();\nclass NetworkStorage {\n  constructor(eventManager, browserClient, logger) {\n    /**\n     * Gets the network request with the given ID, if any.\n     * Otherwise, creates a new network request with the given ID and cdp target.\n     */\n    _classPrivateMethodInitSpec(this, _NetworkStorage_brand);\n    _classPrivateFieldInitSpec(this, _eventManager, void 0);\n    _classPrivateFieldInitSpec(this, _logger, void 0);\n    /**\n     * A map from network request ID to Network Request objects.\n     * Needed as long as information about requests comes from different events.\n     */\n    _classPrivateFieldInitSpec(this, _requests, new Map());\n    /** A map from intercept ID to track active network intercepts. */\n    _classPrivateFieldInitSpec(this, _intercepts, new Map());\n    _classPrivateFieldSet(_eventManager, this, eventManager);\n    browserClient.on('Target.detachedFromTarget', ({\n      sessionId\n    }) => {\n      this.disposeRequestMap(sessionId);\n    });\n    _classPrivateFieldSet(_logger, this, logger);\n  }\n  onCdpTargetCreated(cdpTarget) {\n    const cdpClient = cdpTarget.cdpClient;\n    // TODO: Wrap into object\n    const listeners = [['Network.requestWillBeSent', params => {\n      const request = this.getRequestById(params.requestId);\n      if (request && request.isRedirecting()) {\n        request.handleRedirect(params);\n        this.deleteRequest(params.requestId);\n        _assertClassBrand(_NetworkStorage_brand, this, _getOrCreateNetworkRequest).call(this, params.requestId, cdpTarget, request.redirectCount + 1).onRequestWillBeSentEvent(params);\n      } else {\n        _assertClassBrand(_NetworkStorage_brand, this, _getOrCreateNetworkRequest).call(this, params.requestId, cdpTarget).onRequestWillBeSentEvent(params);\n      }\n    }], ['Network.requestWillBeSentExtraInfo', params => {\n      _assertClassBrand(_NetworkStorage_brand, this, _getOrCreateNetworkRequest).call(this, params.requestId, cdpTarget).onRequestWillBeSentExtraInfoEvent(params);\n    }], ['Network.responseReceived', params => {\n      _assertClassBrand(_NetworkStorage_brand, this, _getOrCreateNetworkRequest).call(this, params.requestId, cdpTarget).onResponseReceivedEvent(params);\n    }], ['Network.responseReceivedExtraInfo', params => {\n      _assertClassBrand(_NetworkStorage_brand, this, _getOrCreateNetworkRequest).call(this, params.requestId, cdpTarget).onResponseReceivedExtraInfoEvent(params);\n    }], ['Network.requestServedFromCache', params => {\n      _assertClassBrand(_NetworkStorage_brand, this, _getOrCreateNetworkRequest).call(this, params.requestId, cdpTarget).onServedFromCache();\n    }], ['Network.loadingFailed', params => {\n      _assertClassBrand(_NetworkStorage_brand, this, _getOrCreateNetworkRequest).call(this, params.requestId, cdpTarget).onLoadingFailedEvent(params);\n    }], ['Fetch.requestPaused', event => {\n      _assertClassBrand(_NetworkStorage_brand, this, _getOrCreateNetworkRequest).call(this,\n      // CDP quirk if the Network domain is not present this is undefined\n      event.networkId ?? event.requestId, cdpTarget).onRequestPaused(event);\n    }], ['Fetch.authRequired', event => {\n      let request = this.getRequestByFetchId(event.requestId);\n      if (!request) {\n        request = _assertClassBrand(_NetworkStorage_brand, this, _getOrCreateNetworkRequest).call(this, event.requestId, cdpTarget);\n      }\n      request.onAuthRequired(event);\n    }]];\n    for (const [event, listener] of listeners) {\n      cdpClient.on(event, listener);\n    }\n  }\n  getInterceptionStages(browsingContextId) {\n    const stages = {\n      request: false,\n      response: false,\n      auth: false\n    };\n    for (const intercept of _classPrivateFieldGet(_intercepts, this).values()) {\n      if (intercept.contexts && !intercept.contexts.includes(browsingContextId)) {\n        continue;\n      }\n      stages.request ||= intercept.phases.includes(\"beforeRequestSent\" /* Network.InterceptPhase.BeforeRequestSent */);\n      stages.response ||= intercept.phases.includes(\"responseStarted\" /* Network.InterceptPhase.ResponseStarted */);\n      stages.auth ||= intercept.phases.includes(\"authRequired\" /* Network.InterceptPhase.AuthRequired */);\n    }\n    return stages;\n  }\n  getInterceptsForPhase(request, phase) {\n    if (request.url === NetworkRequest_js_1.NetworkRequest.unknownParameter) {\n      return new Set();\n    }\n    const intercepts = new Set();\n    for (const [interceptId, intercept] of _classPrivateFieldGet(_intercepts, this).entries()) {\n      if (!intercept.phases.includes(phase) || intercept.contexts && !intercept.contexts.includes(request.cdpTarget.topLevelId)) {\n        continue;\n      }\n      if (intercept.urlPatterns.length === 0) {\n        intercepts.add(interceptId);\n        continue;\n      }\n      for (const pattern of intercept.urlPatterns) {\n        if ((0, NetworkUtils_js_1.matchUrlPattern)(pattern, request.url)) {\n          intercepts.add(interceptId);\n          break;\n        }\n      }\n    }\n    return intercepts;\n  }\n  disposeRequestMap(sessionId) {\n    for (const request of _classPrivateFieldGet(_requests, this).values()) {\n      if (request.cdpClient.sessionId === sessionId) {\n        _classPrivateFieldGet(_requests, this).delete(request.id);\n      }\n    }\n  }\n  /**\n   * Adds the given entry to the intercept map.\n   * URL patterns are assumed to be parsed.\n   *\n   * @return The intercept ID.\n   */\n  addIntercept(value) {\n    const interceptId = (0, uuid_js_1.uuidv4)();\n    _classPrivateFieldGet(_intercepts, this).set(interceptId, value);\n    return interceptId;\n  }\n  /**\n   * Removes the given intercept from the intercept map.\n   * Throws NoSuchInterceptException if the intercept does not exist.\n   */\n  removeIntercept(intercept) {\n    if (!_classPrivateFieldGet(_intercepts, this).has(intercept)) {\n      throw new protocol_js_1.NoSuchInterceptException(`Intercept '${intercept}' does not exist.`);\n    }\n    _classPrivateFieldGet(_intercepts, this).delete(intercept);\n  }\n  getRequestById(id) {\n    return _classPrivateFieldGet(_requests, this).get(id);\n  }\n  getRequestByFetchId(fetchId) {\n    for (const request of _classPrivateFieldGet(_requests, this).values()) {\n      if (request.fetchId === fetchId) {\n        return request;\n      }\n    }\n    return;\n  }\n  addRequest(request) {\n    _classPrivateFieldGet(_requests, this).set(request.id, request);\n  }\n  deleteRequest(id) {\n    _classPrivateFieldGet(_requests, this).delete(id);\n  }\n}\nfunction _getOrCreateNetworkRequest(id, cdpTarget, redirectCount) {\n  let request = this.getRequestById(id);\n  if (request) {\n    return request;\n  }\n  request = new NetworkRequest_js_1.NetworkRequest(id, _classPrivateFieldGet(_eventManager, this), this, cdpTarget, redirectCount, _classPrivateFieldGet(_logger, this));\n  this.addRequest(request);\n  return request;\n}\nexports.NetworkStorage = NetworkStorage;","map":{"version":3,"names":["protocol_js_1","require","uuid_js_1","NetworkRequest_js_1","NetworkUtils_js_1","_eventManager","WeakMap","_logger","_requests","_intercepts","_NetworkStorage_brand","WeakSet","NetworkStorage","constructor","eventManager","browserClient","logger","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","Map","_classPrivateFieldSet","on","sessionId","disposeRequestMap","onCdpTargetCreated","cdpTarget","cdpClient","listeners","params","request","getRequestById","requestId","isRedirecting","handleRedirect","deleteRequest","_assertClassBrand","_getOrCreateNetworkRequest","call","redirectCount","onRequestWillBeSentEvent","onRequestWillBeSentExtraInfoEvent","onResponseReceivedEvent","onResponseReceivedExtraInfoEvent","onServedFromCache","onLoadingFailedEvent","event","networkId","onRequestPaused","getRequestByFetchId","onAuthRequired","listener","getInterceptionStages","browsingContextId","stages","response","auth","intercept","_classPrivateFieldGet","values","contexts","includes","phases","getInterceptsForPhase","phase","url","NetworkRequest","unknownParameter","Set","intercepts","interceptId","entries","topLevelId","urlPatterns","length","add","pattern","matchUrlPattern","delete","id","addIntercept","value","uuidv4","set","removeIntercept","has","NoSuchInterceptException","get","fetchId","addRequest","exports"],"sources":["../../../../../src/bidiMapper/modules/network/NetworkStorage.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}