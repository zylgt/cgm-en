{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Socket from '@/utils/webSocket';\nimport store from '@/store';\n\n// 处理数据\nexport function handelMessage(res) {\n  switch (res.path) {\n    case 'getAppInfo':\n      //  判断是否有更新，没有更新进行下一步\n      Socket.getReaderList();\n      break;\n    case 'getReaderDevices':\n      //获取redaer列表，如果只有一台直接连接，否则选取连接\n      store.dispatch('setDeviceList', res.data.devices);\n      store.dispatch('setUpStep', 3);\n      if (res.data.devices.length == 1) {\n        store.dispatch('setReaderConnect', 1);\n        Socket.connectReader(res.data.devices[0]);\n      }\n      break;\n    case 'connectReaderDevice':\n      //连接reader\n      store.dispatch('setReaderConnect', 2);\n      Socket.getReaderInfo();\n      break;\n    case 'getReaderDeviceInfo':\n      //获取reader信息，判断是否需要同步时间和目标范围\n      // 判断reader时间与当前时间差值为1000，则同步时间\n      let timestamp = Math.floor(Date.now() / 1000);\n      if (Math.abs(timestamp - res.data.currentTime) >= 1000) {\n        Socket.setTime({\n          timestamp: timestamp\n        });\n      }\n      Socket.cgmList(); // 同时获取绑定的发射器列表\n      break;\n    case 'getBindDevices':\n      //获取reader绑定的发射器列表\n      store.dispatch('setCgmList', res.data.devices);\n      if (res.data.devices.length > 0) {\n        getBgData(res.data.devices[0].mac, 50, 0, res.data.devices[0].lastIndex);\n      }\n      break;\n    case 'getBingetGlucoseDatadDevices':\n      //获取的血糖数据\n      upLoad(res.data);\n      break;\n  }\n}\n\n/**\n * 获取,上传血糖数据\n * \n * @param {*} devices  reader绑定的发射器列表\n * dataLength 数据长度\n * start_index 开始上传数据的索引，从接口中获取服务器上最后一条索引，作为向reader获取数据的开始索引\n *              每接收一包数据，索引加量\n * size 一包数据条数\n */\n\n/**\n * 获取数据\n */\nlet cgm_index = 0;\nlet start_index = 0;\nlet device = store.getters.deviceList;\nfunction getBgData(mac, size, start_index, last_index) {\n  if (start_index <= last_index) {\n    Socket.queryGlucoseData({\n      \"mac\": mac,\n      \"size\": size,\n      \"startIndex\": start_index\n    });\n  } else {\n    console.log('传完了');\n  }\n}\n/**\n * 上传数据\n */\n\nfunction upLoad(data) {\n  let datas = [];\n  data.values.forEach(item => {\n    datas.push({\n      \"data_index\": item.index,\n      \"data_ts\": item.timestamp,\n      \"timezone\": 8,\n      \"value\": item.value,\n      \"current\": item.current,\n      \"temperature\": item.temperature\n    });\n  });\n  let params = {\n    device_mac: data.mac,\n    start_index: data.startIndex,\n    end_index: data.values[data.values.length - 1].index,\n    start_ts: data.values[0].timestamp,\n    end_ts: data.values[data.values.length - 1].timestamp,\n    data_source: 1,\n    datas: datas\n  };\n  // 模拟服务器上传成功时间\n  setTimeout(function () {\n    // 判断当前mac是否上传完成\n    let last_index = deviceList[cgm_index].lastIndex;\n    if (device.length > 1 && last_index == params.end_index) {\n      cgm_index++;\n      start_index = 0;\n    } else {\n      start_index = data.values[data.values.length - 1].index + 1;\n    }\n    getBgData(device[cgm_index].mac, 50, start_index, last_index);\n  }, 100);\n}","map":{"version":3,"names":["Socket","store","handelMessage","res","path","getReaderList","dispatch","data","devices","length","connectReader","getReaderInfo","timestamp","Math","floor","Date","now","abs","currentTime","setTime","cgmList","getBgData","mac","lastIndex","upLoad","cgm_index","start_index","device","getters","deviceList","size","last_index","queryGlucoseData","console","log","datas","values","forEach","item","push","index","value","current","temperature","params","device_mac","startIndex","end_index","start_ts","end_ts","data_source","setTimeout"],"sources":["/Users/hexuemin/Desktop/jiuan/CGM/CGMWeb/src/utils/socketMessage.js"],"sourcesContent":["import Socket from '@/utils/webSocket'\nimport store from '@/store'\n\n// 处理数据\nexport function handelMessage (res) {\n    switch(res.path){\n        case 'getAppInfo':\n            //  判断是否有更新，没有更新进行下一步\n            Socket.getReaderList()\n            break;\n        case 'getReaderDevices': //获取redaer列表，如果只有一台直接连接，否则选取连接\n            store.dispatch('setDeviceList',res.data.devices)\n            store.dispatch('setUpStep',3)\n            if(res.data.devices.length==1){\n                store.dispatch('setReaderConnect',1)\n                Socket.connectReader(res.data.devices[0])\n            }\n            break;\n        case 'connectReaderDevice': //连接reader\n            store.dispatch('setReaderConnect',2)\n            Socket.getReaderInfo()\n            break;\n        case 'getReaderDeviceInfo': //获取reader信息，判断是否需要同步时间和目标范围\n            // 判断reader时间与当前时间差值为1000，则同步时间\n            let timestamp = Math.floor(Date.now() / 1000)\n            if( Math.abs(timestamp-res.data.currentTime)>=1000){\n                Socket.setTime({timestamp:timestamp})\n            }\n            Socket.cgmList() // 同时获取绑定的发射器列表\n            break;\n        case 'getBindDevices': //获取reader绑定的发射器列表\n            store.dispatch('setCgmList',res.data.devices)\n            if(res.data.devices.length>0){\n                getBgData(res.data.devices[0].mac,50,0,res.data.devices[0].lastIndex)\n            }\n            break;\n        case 'getBingetGlucoseDatadDevices': //获取的血糖数据\n            upLoad(res.data)\n            break;\n    }\n}\n\n\n/**\n * 获取,上传血糖数据\n * \n * @param {*} devices  reader绑定的发射器列表\n * dataLength 数据长度\n * start_index 开始上传数据的索引，从接口中获取服务器上最后一条索引，作为向reader获取数据的开始索引\n *              每接收一包数据，索引加量\n * size 一包数据条数\n */\n\n\n\n/**\n * 获取数据\n */\n let  cgm_index = 0 \n let start_index  = 0\n let device = store.getters.deviceList\nfunction getBgData(mac,size,start_index,last_index){\n    if(start_index<=last_index){\n        Socket.queryGlucoseData({\"mac\":mac,\"size\":size,\"startIndex\":start_index})\n    }else{\n        console.log('传完了')\n    }\n}\n/**\n * 上传数据\n */\n\n\nfunction upLoad(data){\n    let datas  = []\n    data.values.forEach(item=>{\n        datas.push({\n           \"data_index\":item.index,\n           \"data_ts\":item.timestamp,\n           \"timezone\":8,\n           \"value\":item.value,\n           \"current\":item.current,\n           \"temperature\":item.temperature,\n        })\n    })\n    let params = {\n        device_mac:data.mac,\n        start_index:data.startIndex,\n        end_index:data.values[data.values.length-1].index,\n        start_ts:data.values[0].timestamp,\n        end_ts:data.values[data.values.length-1].timestamp,\n        data_source:1,\n        datas:datas\n    }\n    // 模拟服务器上传成功时间\n    setTimeout(function(){\n        // 判断当前mac是否上传完成\n        let last_index = deviceList[cgm_index].lastIndex\n        if(device.length>1&&last_index==params.end_index){\n            cgm_index++\n            start_index = 0\n        }else{\n            start_index = data.values[data.values.length-1].index + 1\n        }\n        getBgData(device[cgm_index].mac,50,start_index,last_index)\n    },100)\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}