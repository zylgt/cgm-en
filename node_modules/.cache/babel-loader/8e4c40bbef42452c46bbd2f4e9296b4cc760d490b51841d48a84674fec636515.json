{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TChart from '@/views/components/TChart';\nimport { hasEventListener } from \"@/utils/utils\";\nexport default {\n  data() {\n    return {\n      initOptions: {\n        renderer: 'svg'\n      },\n      option: {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            crossStyle: {\n              color: '#999'\n            }\n          }\n        },\n        grid: {\n          left: 120,\n          right: 120,\n          bottom: 60,\n          top: 60\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: false,\n          axisTick: false,\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: '#e5e5e5',\n              width: 1\n            }\n          },\n          axisLabel: {\n            color: '#666',\n            fontSize: 16,\n            margin: 14\n          }\n        }],\n        yAxis: [{\n          type: 'value',\n          min: 0,\n          max: 15,\n          splitLine: {\n            lineStyle: {\n              type: 'dashed',\n              color: '#e5e5e5'\n            }\n          },\n          axisLabel: {\n            formatter: '{value}',\n            color: '#666',\n            fontSize: 16,\n            margin: 14\n          }\n        }],\n        series: [{\n          name: '第50百分位',\n          type: 'line',\n          symbol: 'none',\n          lineStyle: {\n            color: '#32BAC0',\n            width: 2\n          },\n          connectNulls: false,\n          missing: 'gap',\n          data: [[new Date('2024-05-10T10:00:00').getTime(), 1], [new Date('2024-05-10T10:01:00').getTime(), 5],\n          // 注意，数据点可以是不连续的\n          [new Date('2024-05-10T10:02:00').getTime(), 3], [new Date('2024-05-10T10:03:00').getTime(), 8], [new Date('2024-05-10T10:05:00').getTime(), 10], [new Date('2024-05-10T10:06:00').getTime(), 6]]\n        }]\n      }\n    };\n  },\n  components: {\n    TChart\n  },\n  mounted() {\n    if (!hasEventListener(this.$bus, 'getData')) {\n      this.$bus.$on('getData', data => {\n        this.manageData(data);\n      });\n    }\n    console.log(1715129400 & 1715043000);\n  },\n  methods: {\n    // 管理数据\n    manageData(data) {\n      let array = [{\n        DataIndex: 0,\n        DataTs: 1715129400,\n        DeviceMac: \"hb1234567890\",\n        Timezone: 8,\n        Value: 360\n      }];\n      array = array.concat(data);\n      let current = '';\n      for (var i = 0; i < array.length; i++) {\n        current = array[i].DataTs;\n        if (array[i].DataTs / current) {}\n      }\n      console.log(this.makeArrayContinuous(array, 'DataTs'));\n    },\n    // 补齐数据\n    makeArrayContinuous(arr, idKey) {\n      let maxId = 0;\n      let minId = Infinity;\n      const existingIds = new Set();\n\n      // 查找最大和最小ID以及已存在的ID\n      arr.forEach(item => {\n        const id = item[idKey];\n        if (id === undefined || existingIds.has(id)) return;\n        existingIds.add(id);\n        maxId = Math.max(maxId, id);\n        minId = Math.min(minId, id);\n      });\n      // 如果数组是连续的，则不需要任何操作\n      if ((maxId - minId) / 60 === arr.length - 1) return arr;\n\n      // 构建一个新数组，补齐缺失的对象\n      const newArr = [];\n      for (let i = minId; i <= maxId; i += 60) {\n        const existingItem = arr.find(item => item[idKey] === i);\n        newArr.push(existingItem || {\n          [idKey]: i,\n          Value: null\n        }); // 如果缺失，则补上一个空对象\n      }\n      return newArr;\n    }\n    // 分割数据\n  },\n  beforeDestroy() {\n    this.$bus.$off('getData');\n  }\n};","map":{"version":3,"names":["TChart","hasEventListener","data","initOptions","renderer","option","tooltip","trigger","axisPointer","type","crossStyle","color","grid","left","right","bottom","top","xAxis","boundaryGap","axisTick","axisLine","show","lineStyle","width","axisLabel","fontSize","margin","yAxis","min","max","splitLine","formatter","series","name","symbol","connectNulls","missing","Date","getTime","components","mounted","$bus","$on","manageData","console","log","methods","array","DataIndex","DataTs","DeviceMac","Timezone","Value","concat","current","i","length","makeArrayContinuous","arr","idKey","maxId","minId","Infinity","existingIds","Set","forEach","item","id","undefined","has","add","Math","newArr","existingItem","find","push","beforeDestroy","$off"],"sources":["src/views/components/Chart/AGPchart.vue"],"sourcesContent":["<template>\n    <div>\n        <t-chart\n                style=\"width: 100%;height:450px;\"\n                :option=\"option\"\n                :init-options=\"initOptions\"\n                theme=\"tduck-echarts-theme\"\n        />\n    </div>\n</template>\n<script>\nimport TChart from '@/views/components/TChart'\nimport { hasEventListener } from \"@/utils/utils\";\nexport default {\n    data(){\n        return{\n            initOptions: {\n                renderer: 'svg'\n            },\n             option: {\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                    type: 'cross',\n                    crossStyle: {\n                        color: '#999'\n                    }\n                    }\n                },\n                grid:{\n                    left:120,\n                    right:120,\n                    bottom:60,\n                    top:60\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap:false,\n                        axisTick: false,\n                        axisLine: {\n                            show: true,\n                            lineStyle: {\n                                color: '#e5e5e5',\n                                width:1,\n                            },\n                        },\n                        axisLabel:{\n                            color: '#666',\n                            fontSize: 16, \n                            margin:14\n                        },\n                    }\n                ],\n                yAxis: [\n                    {\n                    type: 'value',\n                    min: 0,\n                    max: 15,\n                    splitLine:{\n                        lineStyle:{\n                            type:'dashed',\n                            color:'#e5e5e5'\n                        }\n                    },\n                    axisLabel: {\n                        formatter: '{value}',\n                        color: '#666',\n                        fontSize: 16,\n                        margin:14\n                    }\n                    }\n                ],\n                series: [\n                     {\n                        name: '第50百分位',\n                        type: 'line',\n                        symbol:'none',\n                        lineStyle:{\n                            color:'#32BAC0',\n                            width:2\n                        },\n                        connectNulls: false,\n                        missing:'gap',\n                        data: [\n                            [new Date('2024-05-10T10:00:00').getTime(), 1],\n                            [new Date('2024-05-10T10:01:00').getTime(), 5],\n                            // 注意，数据点可以是不连续的\n                            [new Date('2024-05-10T10:02:00').getTime(), 3],\n                            [new Date('2024-05-10T10:03:00').getTime(), 8],\n                            [new Date('2024-05-10T10:05:00').getTime(), 10],\n                            [new Date('2024-05-10T10:06:00').getTime(), 6],\n                        ]\n                    },\n                   \n                   \n                  \n                    \n                ]\n            },\n        }\n    },\n    components: {\n        TChart\n    },\n    mounted(){\n        if(!hasEventListener(this.$bus,'getData')){\n            this.$bus.$on('getData',(data)=>{\n              this.manageData(data)  \n            })\n        }\n        console.log(1715129400 & 1715043000)\n\n    },\n    methods:{\n        // 管理数据\n        manageData(data){\n            let array = [{\n                DataIndex:0,\n                DataTs:1715129400,\n                DeviceMac:\"hb1234567890\",\n                Timezone:8,\n                Value:360,\n\n            }]\n            array = array.concat(data)\n            let current = ''\n            for(var i=0;i<array.length;i++){\n                current = array[i].DataTs\n                if(array[i].DataTs/current){\n\n                }\n\n            }\n            console.log(this.makeArrayContinuous(array,'DataTs'))\n        },\n        // 补齐数据\n        makeArrayContinuous(arr, idKey) {\n            let maxId = 0;\n            let minId = Infinity;\n            const existingIds = new Set();\n            \n            // 查找最大和最小ID以及已存在的ID\n            arr.forEach(item => {\n                const id = item[idKey];\n                if (id === undefined || existingIds.has(id)) return;\n                existingIds.add(id);\n                maxId = Math.max(maxId, id);\n                minId = Math.min(minId, id);\n            });\n            // 如果数组是连续的，则不需要任何操作\n            if ((maxId - minId)/60 === arr.length - 1) return arr; \n            \n            // 构建一个新数组，补齐缺失的对象\n            const newArr = [];\n            for (let i = minId; i <= maxId; i+=60) {\n                const existingItem = arr.find(item => item[idKey] === i);\n                newArr.push(existingItem || { [idKey]: i ,Value:null}); // 如果缺失，则补上一个空对象\n            }\n        \n            return newArr;\n        },\n        // 分割数据\n\n    },\n    beforeDestroy(){\n        this.$bus.$off('getData')\n    }\n}\n</script>"],"mappings":";AAWA,OAAAA,MAAA;AACA,SAAAC,gBAAA;AACA;EACAC,KAAA;IACA;MACAC,WAAA;QACAC,QAAA;MACA;MACAC,MAAA;QACAC,OAAA;UACAC,OAAA;UACAC,WAAA;YACAC,IAAA;YACAC,UAAA;cACAC,KAAA;YACA;UACA;QACA;QACAC,IAAA;UACAC,IAAA;UACAC,KAAA;UACAC,MAAA;UACAC,GAAA;QACA;QACAC,KAAA,GACA;UACAR,IAAA;UACAS,WAAA;UACAC,QAAA;UACAC,QAAA;YACAC,IAAA;YACAC,SAAA;cACAX,KAAA;cACAY,KAAA;YACA;UACA;UACAC,SAAA;YACAb,KAAA;YACAc,QAAA;YACAC,MAAA;UACA;QACA,EACA;QACAC,KAAA,GACA;UACAlB,IAAA;UACAmB,GAAA;UACAC,GAAA;UACAC,SAAA;YACAR,SAAA;cACAb,IAAA;cACAE,KAAA;YACA;UACA;UACAa,SAAA;YACAO,SAAA;YACApB,KAAA;YACAc,QAAA;YACAC,MAAA;UACA;QACA,EACA;QACAM,MAAA,GACA;UACAC,IAAA;UACAxB,IAAA;UACAyB,MAAA;UACAZ,SAAA;YACAX,KAAA;YACAY,KAAA;UACA;UACAY,YAAA;UACAC,OAAA;UACAlC,IAAA,GACA,KAAAmC,IAAA,wBAAAC,OAAA,QACA,KAAAD,IAAA,wBAAAC,OAAA;UACA;UACA,KAAAD,IAAA,wBAAAC,OAAA,QACA,KAAAD,IAAA,wBAAAC,OAAA,QACA,KAAAD,IAAA,wBAAAC,OAAA,SACA,KAAAD,IAAA,wBAAAC,OAAA;QAEA;MAMA;IACA;EACA;EACAC,UAAA;IACAvC;EACA;EACAwC,QAAA;IACA,KAAAvC,gBAAA,MAAAwC,IAAA;MACA,KAAAA,IAAA,CAAAC,GAAA,YAAAxC,IAAA;QACA,KAAAyC,UAAA,CAAAzC,IAAA;MACA;IACA;IACA0C,OAAA,CAAAC,GAAA;EAEA;EACAC,OAAA;IACA;IACAH,WAAAzC,IAAA;MACA,IAAA6C,KAAA;QACAC,SAAA;QACAC,MAAA;QACAC,SAAA;QACAC,QAAA;QACAC,KAAA;MAEA;MACAL,KAAA,GAAAA,KAAA,CAAAM,MAAA,CAAAnD,IAAA;MACA,IAAAoD,OAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,GAAAR,KAAA,CAAAS,MAAA,EAAAD,CAAA;QACAD,OAAA,GAAAP,KAAA,CAAAQ,CAAA,EAAAN,MAAA;QACA,IAAAF,KAAA,CAAAQ,CAAA,EAAAN,MAAA,GAAAK,OAAA,GAEA;MAEA;MACAV,OAAA,CAAAC,GAAA,MAAAY,mBAAA,CAAAV,KAAA;IACA;IACA;IACAU,oBAAAC,GAAA,EAAAC,KAAA;MACA,IAAAC,KAAA;MACA,IAAAC,KAAA,GAAAC,QAAA;MACA,MAAAC,WAAA,OAAAC,GAAA;;MAEA;MACAN,GAAA,CAAAO,OAAA,CAAAC,IAAA;QACA,MAAAC,EAAA,GAAAD,IAAA,CAAAP,KAAA;QACA,IAAAQ,EAAA,KAAAC,SAAA,IAAAL,WAAA,CAAAM,GAAA,CAAAF,EAAA;QACAJ,WAAA,CAAAO,GAAA,CAAAH,EAAA;QACAP,KAAA,GAAAW,IAAA,CAAA1C,GAAA,CAAA+B,KAAA,EAAAO,EAAA;QACAN,KAAA,GAAAU,IAAA,CAAA3C,GAAA,CAAAiC,KAAA,EAAAM,EAAA;MACA;MACA;MACA,KAAAP,KAAA,GAAAC,KAAA,WAAAH,GAAA,CAAAF,MAAA,aAAAE,GAAA;;MAEA;MACA,MAAAc,MAAA;MACA,SAAAjB,CAAA,GAAAM,KAAA,EAAAN,CAAA,IAAAK,KAAA,EAAAL,CAAA;QACA,MAAAkB,YAAA,GAAAf,GAAA,CAAAgB,IAAA,CAAAR,IAAA,IAAAA,IAAA,CAAAP,KAAA,MAAAJ,CAAA;QACAiB,MAAA,CAAAG,IAAA,CAAAF,YAAA;UAAA,CAAAd,KAAA,GAAAJ,CAAA;UAAAH,KAAA;QAAA;MACA;MAEA,OAAAoB,MAAA;IACA;IACA;EAEA;EACAI,cAAA;IACA,KAAAnC,IAAA,CAAAoC,IAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}